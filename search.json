[{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_KOR_antagonists.html","id":"hill","dir":"Articles","previous_headings":"","what":"Hill Equation","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"case study going reanalyze dose response 4 Kappa Opioid receptor (KOR) antagonists using BayesPharma package study done Margolis et al. (-@Margolis2020-bm). Whole cell electrophysiology acute rat midbrain slices used evaluate pharmacological properties four novel KOR antagonists: BTRX-335140, BTRX-395750, PF-04455242, JNJ-67953964 Originally paper, dose-response data analysis done using drc package R implements minimization negative log likelihood function reduces least square estimation continuous response. data normalized % baseline fit 4-parameter log-logistic dose response model, setting top (max response) 100% estimating IC50, variance, bottom (min response).","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_KOR_antagonists.html","id":"fitting-the-sigmoid-model","dir":"Articles","previous_headings":"Hill Equation","what":"Fitting the sigmoid model","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"Using BayesPharma package, can re-fit sigmoid model negative slope, fixing top parameter 100 response normalized -drug baseline. prior, going use normal distribution response values continuous. First, run analysis top (max response) parameter prior set constant value 100 top normalized 100 default broad prior ic50, hill bottom. Broad priors represent unbiased uncertainty provide opportunity extreme responses. level informativeness prior affect much influence prior model. information prior choice recommendations.","code":"kor_prior <- BayesPharma::sigmoid_antagonist_prior(top = 100) kor_prior ##            prior class coef group resp dpar  nlpar   lb   ub source ##  normal(-6, 2.5)     b                        ic50 <NA> <NA>   user ##    normal(-1, 1)     b                        hill <NA> 0.01   user ##    constant(100)     b                         top <NA> <NA>   user ##   normal(0, 0.5)     b                      bottom <NA> <NA>   user"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_KOR_antagonists.html","id":"prior-predictive-checks","dir":"Articles","previous_headings":"Hill Equation > Fitting the sigmoid model","what":"Prior predictive checks","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"Following Bayesian workflow, fitting model good check prior predictive distributions see compatible domain expertise. , running model, verify prior distributions cover plausible range values parameter. , want sample prior distributions adding sample_prior = “” argument sigmoid_antagonist_model function. use default response distribution model (family = gaussian()). plot prior predictive distributions:  sample model Stan NUTs Hamiltonian Monte Carlo, initialize parameters prior means help model convergence, using default values ec50 = -9, hill = -1, top = 100, bottom = 0.","code":"kor_sample_prior <- BayesPharma::sigmoid_antagonist_model(   data = kor_antag |> dplyr::select(substance_id, log_dose, response),   prior = kor_prior,   sample_prior = \"only\") kor_sample_prior |>   BayesPharma::density_distributions_plot() kor_model <- BayesPharma::sigmoid_antagonist_model(   data = kor_antag |> dplyr::select(substance_id, log_dose, response),   formula = BayesPharma::sigmoid_antagonist_formula(     predictors = 0 + substance_id),    prior = kor_prior)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_KOR_antagonists.html","id":"analyzing-model-fit","dir":"Articles","previous_headings":"Hill Equation","what":"Analyzing model fit","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"BRMS generated model summary shows formula expected response sigmoid function log_dose four parameters, shared Gaussian distribution. parameter dependent substance_id. Since want fit separate model substance include 0 + indicate common intercept. consists 73 data points posterior sampling done 4 chains 8000 steps 4000 steps warm-. population effects parameter summarize marginal posterior distributions, well effective sample size bulk tail. gives indication sampling quality, ESS > 500 samples good type model.","code":"##  Family: gaussian  ##   Links: mu = identity; sigma = identity  ## Formula: response ~ sigmoid(ic50, hill, top, bottom, log_dose)  ##          ic50 ~ 0 + substance_id ##          hill ~ 0 + substance_id ##          top ~ 0 + substance_id ##          bottom ~ 0 + substance_id ##    Data: data (Number of observations: 73)  ##   Draws: 4 chains, each with iter = 8000; warmup = 4000; thin = 1; ##          total post-warmup draws = 16000 ##  ## Population-Level Effects:  ##                                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## ic50_substance_idBTRX_335140      -8.84      0.20    -9.20    -8.40 1.00    14883     8873 ## ic50_substance_idBTRX_395750      -8.24      0.41    -8.92    -7.39 1.00    12333     5863 ## ic50_substance_idJNJ              -9.15      0.32    -9.78    -8.50 1.00    17511    10242 ## ic50_substance_idPF               -6.15      1.05    -7.64    -3.41 1.00     8649     6213 ## hill_substance_idBTRX_335140      -1.47      0.60    -2.89    -0.59 1.00    15340    10545 ## hill_substance_idBTRX_395750      -0.89      0.51    -2.24    -0.26 1.00    12763     6273 ## hill_substance_idJNJ              -1.01      0.51    -2.38    -0.41 1.00    15285    11508 ## hill_substance_idPF               -0.31      0.24    -0.88    -0.03 1.00     7904     4559 ## bottom_substance_idBTRX_335140    -0.00      0.50    -0.99     0.97 1.00    19984    11491 ## bottom_substance_idBTRX_395750     0.01      0.50    -0.97     1.00 1.00    19123    11247 ## bottom_substance_idJNJ            -0.01      0.50    -0.98     0.98 1.00    18940    11984 ## bottom_substance_idPF              0.00      0.50    -0.98     0.98 1.00    21351    12102 ## top_substance_idBTRX_335140      100.00      0.00   100.00   100.00   NA       NA       NA ## top_substance_idBTRX_395750      100.00      0.00   100.00   100.00   NA       NA       NA ## top_substance_idJNJ              100.00      0.00   100.00   100.00   NA       NA       NA ## top_substance_idPF               100.00      0.00   100.00   100.00   NA       NA       NA ##  ## Family Specific Parameters:  ##       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma    32.17      2.84    27.19    38.32 1.00    14690    10539 ##  ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_KOR_antagonists.html","id":"traceplot","dir":"Articles","previous_headings":"Hill Equation > Analyzing model fit","what":"Traceplot","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"model ran without warning messages meaning parameter value problems mcmc conflicts. bulk tail ESS indicate high resolution stability. R-hat parameter equals 1.00 traceplot shows chains mixed well indicating chains converged.","code":"kor_model |>   bayesplot::mcmc_trace()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_KOR_antagonists.html","id":"compare-prior-and-posterior-marginal-distributions","dir":"Articles","previous_headings":"Hill Equation > Analyzing model fit","what":"Compare prior and posterior marginal distributions","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"Displayed plot prior posterior distributions parameters (prior pink posterior teal). can useful comparing density distribution prior posterior. produced model:  Displayed plot posterior distributions parameter confidence intervals mean. useful visual model results highlight mode high density intervals:  Displayed plot sample 100 sigmoid dose-response curves posterior distribution (purple) median quantile intervals:","code":"BayesPharma::prior_posterior_densities_plot(   model = kor_model,   predictors_col_name = \"substance_id\",   half_max_label = \"ic50\",   title_label=\"\") BayesPharma::posterior_densities_plot(   kor_model,    predictors_col_name = \"substance_id\",    half_max_label = \"ic50\",   title_label = \"\") BayesPharma::posterior_draws_plot(   model = kor_model,   title = \"\")"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_KOR_antagonists.html","id":"comparing-alternative-models","dir":"Articles","previous_headings":"Hill Equation","what":"Comparing alternative models","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"test sensitivity analysis prior, can re-fit model informative prior: Re-fitting model","code":"##            prior class coef group resp dpar  nlpar   lb   ub source ##  normal(-6, 2.5)     b                        ic50 <NA> <NA>   user ##  normal(-1, 0.5)     b                        hill <NA> 0.01   user ##    constant(100)     b                         top <NA> <NA>   user ##   normal(10, 15)     b                      bottom <NA> <NA>   user"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_KOR_antagonists.html","id":"comparing-the-two-models-using-loo-comparison","dir":"Articles","previous_headings":"","what":"Comparing the Two Models Using LOO-Comparison:","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"One way evaluate quality model data-point, re-fit model remaining points, evaluate log probability point posterior distribution. Taking expectation across points give Expected Log Pointwise predictive Density (ELPD). Since computationally challenging re-fit model point, model fits data reasonably well, ELPD can approximated using Pareto smoothed importance sampling (PSIS). Using LOO, package, Pareto k value data point computed, k less 0.5 good, 0.5 0.7 ok, higher 0.7 indicates data point fit model well. Evaluating model KOR antagonists, shows model fits data well. Since ELPD global measure model fit, can used compare models. Using loo_compare LOO package, returns elpd_diff se_diff model relative model lowest ELPD. kor_model2, model informative prior, preferred model, significantly. ##Analysis Using drc Package analyze KOR antagonist data using drc package compare results BayesPharma analysis. fix top 100 fit ic50, hill, bottom. Displayed comparison results drc BayesPharma parameter dose-response curve. see Bayesian method provides distribution curve evidence smaller confidence intervals standard errors provided drc method.","code":"## No problematic observations found. Returning the original 'loo' object. ## NULL ## No problematic observations found. Returning the original 'loo' object. ##            elpd_diff se_diff ## kor_model   0.0       0.0    ## kor_model2 -0.2       0.8 drc_models <- kor_antag |>   dplyr::group_by(substance_id) |>   dplyr::group_nest() |>   dplyr::mutate(     model = data |>        purrr::map(~drc::drm(         response ~ log_dose,         data = .x,         fct = drc::L.4(fixed = c(NA, NA, 100, NA),         names = c(\"hill\", \"bottom\", \"top\", \"ic50\")))))  drc_models |>   dplyr::mutate(summary = purrr::map(model, broom::tidy, conf.int = TRUE)) |>   tidyr::unnest(summary) |>   dplyr::arrange(term, substance_id) |>   dplyr::select(-data, -model, -curve) ## # A tibble: 12 × 8 ##    substance_id term   estimate std.error statistic  p.value  conf.low conf.high ##    <chr>        <chr>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>     <dbl> ##  1 BTRX_335140  bottom     1.31    19.4      0.0675 9.47e- 1  -40.0        42.6  ##  2 BTRX_395750  bottom    29.5      9.40     3.14   7.85e- 3    9.20       49.8  ##  3 JNJ          bottom   -18.1     26.7     -0.681  5.04e- 1  -73.7        37.4  ##  4 PF           bottom    39.4     30.8      1.28   2.22e- 1  -27.0       106.   ##  5 BTRX_335140  hill       4.06     9.20     0.441  6.65e- 1  -15.5        23.7  ##  6 BTRX_395750  hill       9.82   164.       0.0600 9.53e- 1 -344.        364.   ##  7 JNJ          hill       1.17     0.580    2.02   5.69e- 2   -0.0378      2.38 ##  8 PF           hill       1.13     1.33     0.855  4.08e- 1   -1.73        4.00 ##  9 BTRX_335140  ic50      -8.91     0.308  -28.9    1.42e-14   -9.57       -8.26 ## 10 BTRX_395750  ic50      -8.97     0.505  -17.8    1.70e-10  -10.1        -7.88 ## 11 JNJ          ic50      -8.77     0.670  -13.1    2.89e-11  -10.2        -7.37 ## 12 PF           ic50      -7.96     1.27    -6.29   2.78e- 5  -10.7        -5.23 ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_Pnear.html","id":"modeling-folding-funnels","dir":"Articles","previous_headings":"","what":"Modeling Folding Funnels","title":"Apply: Sigmoid Model -- Pnear Folding Funnel","text":"common task molecular modeling predict conformation folded state given molecular system. example, Rosetta ab initio, protein-protein-interface docking protocols. turn simulation prediction requires predicting relative free energy folded state relative reference. Rosetta score function can score individual conformations, doesn’t capture free energy state. Typically, researcher run series trajectories generate score vs. RMSD plot look “folding funnel” e.g. lower energies conformations closer target folded state. , RMSD root-mean squared deviation measuring euclidean distance pairs atom defined application (example just backbone sequence design interface atoms docking).","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_Pnear.html","id":"pnear-score","dir":"Articles","previous_headings":"Modeling Folding Funnels","what":"Pnear score","title":"Apply: Sigmoid Model -- Pnear Folding Funnel","text":"quantify quality folding funnel, recently, interest using Pnear score, defined (RMSD[], score[]) score RMSD score values conformation . parameter lambda measured Angstroms indicating breadth Gaussian used define “native-like-ness”. bigger value, permissive calculation structures deviate native. Typical values peptides range 1.5 2.0, proteins 2.0 perhaps 4.0. finally parameter k_BT measured energy units, determines large energy gap must order sequence said favour native state. default value, 0.62, correspond physiological temperature ref2015 scorefunction units kcal/mol.","code":"Pnear = Sum_i[exp(-RMSD[i]^2/lambda^2)*exp(-score[i]/k_BT)] /         Sum_i[exp(-score[i]/k_BT)]"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_Pnear.html","id":"two-state-model","dir":"Articles","previous_headings":"Modeling Folding Funnels","what":"Two state model","title":"Apply: Sigmoid Model -- Pnear Folding Funnel","text":"Thinking folded unfolded states two-state model RSMD reaction coordinate “collective variable”, energy gap can modeled sigmoidal Boltzmann distribution.  principled molecular dynamics monte carlo simulation maintains detailed balance, theory possible use thermodynamic integration quantify energy gap two states. However, often computationally feasible proteins moderate size protein design screening context many different molecules need evaluated given limited computational budget. , Instead, assume least locally around folded state, degrees freedom increase exponentially log RMSD defines linear reaction coordinate. simulate, trajectory points sigmoid log(RMSD) scale, Normally distributed error can generate synthetic score-vs-rmsd plots  nice thing parametric model generate score-vs-rmsd plots, allows us measure measure sensitivity Pnear differently shaped score-vs-rmsd plots. example can scan radius  Another question can use model investigate reproducible Pnear score?","code":"## Warning in xkcd::theme_xkcd(): Not xkcd fonts installed! See ## vignette(\"xkcd-intro\") ## Warning in theme_xkcd(): Not xkcd fonts installed! See vignette(\"xkcd-intro\") ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_Pnear.html","id":"antibody-snugdock-case-study","dir":"Articles","previous_headings":"","what":"Antibody SnugDock Case study","title":"Apply: Sigmoid Model -- Pnear Folding Funnel","text":"case study, can look real score-vs-rmsd plots Antibody SnugDock scientific benchmark. evaluates SnugDock protocol 6 Antibody protein targets can use fit sigmoid model log(RMSD) using BayesPharma package, relies BRMS Stan Check model parameter fit estimated parameters: Excitingly, using leave-one-cross-validation, sigmoid model fits data well Visualize fit draws expected mean median quantile intvervals log(RMSD) scale: original RMSD scale:","code":"##  Family: gaussian  ##   Links: mu = identity; sigma = identity  ## Formula: response ~ sigmoid(ec50, hill, top, bottom, log_dose)  ##          ec50 ~ 0 + target ##          hill ~ 0 + target ##          top ~ 0 + target ##          bottom ~ 0 + target ##    Data: data (Number of observations: 3003)  ##   Draws: 4 chains, each with iter = 4000; warmup = 2000; thin = 1; ##          total post-warmup draws = 8000 ##  ## Population-Level Effects:  ##                   Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## ec50_target1ahw       1.70      0.11     1.43     1.86 1.00     3953     2291 ## ec50_target1jps       1.37      0.13     1.08     1.59 1.00     4498     3746 ## ec50_target1mlc       2.39      0.53     0.96     3.19 1.00     2772     2019 ## ec50_target1ztx       0.75      0.08     0.59     0.90 1.00     5504     4507 ## ec50_target2aep       1.13      0.37     0.57     1.55 1.00     2119      883 ## ec50_target2jel       1.65      0.06     1.53     1.76 1.00     6454     5339 ## hill_target1ahw       1.68      0.45     0.86     2.63 1.00     3298     1816 ## hill_target1jps       1.49      0.36     0.89     2.28 1.00     3824     3753 ## hill_target1mlc       1.04      0.55     0.26     2.28 1.00     2646     2932 ## hill_target1ztx       2.72      0.56     1.75     3.91 1.00     7260     5789 ## hill_target2aep       1.98      0.68     0.59     3.38 1.00     1121      382 ## hill_target2jel       3.21      0.59     2.15     4.45 1.00     7535     5573 ## top_target1ahw      -10.54      0.75   -11.56    -8.64 1.00     4452     2288 ## top_target1jps       -9.69      0.58   -10.62    -8.34 1.00     5219     4202 ## top_target1mlc       -1.31      5.93    -9.93    12.77 1.00     6763     5064 ## top_target1ztx      -17.44      0.27   -17.97   -16.90 1.00    11553     5251 ## top_target2aep      -16.13      1.92   -16.95   -15.13 1.00     1218      401 ## top_target2jel      -11.09      0.33   -11.73   -10.45 1.00    10630     6010 ## bottom_target1ahw   -26.08      2.23   -31.80   -23.14 1.00     3373     1914 ## bottom_target1jps   -30.53      3.72   -39.60   -24.96 1.00     4356     3831 ## bottom_target1mlc   -18.48      4.42   -31.68   -14.74 1.00     2184     1868 ## bottom_target1ztx   -38.84      3.50   -46.77   -32.98 1.00     5786     4464 ## bottom_target2aep   -30.25      5.82   -43.46   -21.26 1.00     6001     4926 ## bottom_target2jel   -19.46      0.98   -21.59   -17.74 1.00     6528     4703 ##  ## Family Specific Parameters:  ##       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma     5.74      0.07     5.60     5.89 1.00    12452     5130 ##  ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). ##  ## Computed from 8000 by 3003 log-likelihood matrix ##  ##          Estimate   SE ## elpd_loo  -9521.3 39.0 ## p_loo        21.4  1.2 ## looic     19042.7 78.0 ## ------ ## Monte Carlo SE of elpd_loo is 0.1. ##  ## All Pareto k estimates are good (k < 0.5). ## See help('pareto-k-diagnostic') for details."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_Pnear.html","id":"quantify-pnear-uncertainty","dir":"Articles","previous_headings":"Antibody SnugDock Case study","what":"Quantify Pnear uncertainty","title":"Apply: Sigmoid Model -- Pnear Folding Funnel","text":"Using two-state model fit, possible propagate posterior uncertainty estimate uncertainty Pnear.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_MuSyC_model.html","id":"MuSyC","dir":"Articles","previous_headings":"","what":"MuSyC synergy model","title":"Derive: MuSyC Model -- Synergy Analysis","text":"two different treatments combined may interact cause response. end-point assays, response stronger weaker expected additive model, treatments said epistatic. sigmoidal dose-response models, however, analysis may complicated. One drug may may shift maximal response (efficacy) , may also shift effective dose shape response (potency). Historically range models proposed capture different aspects synergy, example Bliss independence Loewe additivity null-models synergistic efficacy potency, respectively. R package python package can used visualize treatment interactions, compute range synergy scores, test interactions significant. Recently Meyer et al. derived integrated functional synergistic sigmoidal dose-response, Loewe Bliss models special cases. implemented Bayesian model-fitting strategy Matlab, maximum likelihood model-ftting synergy python package. make model accessible pharmacology community, section, briefly review MuSyC functional form, describe Bayesian implementation Stan/BRMS, illustrate using model re-analyze drugs voltage may interact modulate current potassium channel.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_MuSyC_model.html","id":"musyc-functional-form","dir":"Articles","previous_headings":"MuSyC synergy model","what":"MuSyc Functional Form","title":"Derive: MuSyC Model -- Synergy Analysis","text":"functional form MuSyC model gives equation response \\(\\color{brown}{E_d}\\) doses \\(\\color{teal}{d_1}\\) \\(\\color{teal}{d_2}\\) two treatments \\(9\\) free parameters \\(\\color{purple}{C_1}\\), \\(\\color{purple}{C_2}\\), \\(\\color{brown}{E_0}\\), \\(\\color{brown}{E_1}\\), \\(\\color{brown}{E_2}\\), \\(\\color{brown}{E_3}\\), \\(\\color{purple}{h_1}\\), \\(\\color{purple}{h_2}\\), \\(\\color{purple}{\\alpha}\\): \\[\\begin{align} \\color{brown}{E_d} &= \\frac{           {\\color{purple}{C_1}}^{\\color{purple}{h_1}}{\\color{purple}{C_2}}^{\\color{purple}{h_2}}{\\color{brown}{E_0}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}{\\color{purple}{C_2}}^{\\color{purple}{h_2}}{\\color{brown}{E_1}} +           {\\color{purple}{C_1}}^{\\color{purple}{h_1}}{\\color{teal}{d_2}}^{\\color{purple}{h_2}}{\\color{brown}{E_2}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}{\\color{teal}{d_2}}^{\\color{purple}{h_2}}{\\color{purple}{\\alpha}} {\\color{brown}{E_3}}        }{           {\\color{purple}{C_1}}^{\\color{purple}{h_1}}{\\color{purple}{C_2}}^{\\color{purple}{h_2}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}{\\color{purple}{C_2}}^{\\color{purple}{h_2}} +           {\\color{purple}{C_1}}^{\\color{purple}{h_1}}{\\color{teal}{d_2}}^{\\color{purple}{h_2}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}{\\color{teal}{d_2}}^{\\color{purple}{h_2}}{\\color{purple}{\\alpha}}} \\end{align}\\] interpret parameters set \\(\\color{teal}{d_2}=0\\), \\[\\begin{align} \\color{brown}{E_d} &= \\frac{           {\\color{purple}{C_1}}^{\\color{purple}{h_1}}{\\color{brown}{E_0}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}{\\color{brown}{E_1}}        }{           {\\color{purple}{C_1}}^{\\color{purple}{h_1}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}} \\end{align}\\] Hill equation, modeled \\(\\ref{sec:hill}\\). additionally set \\(\\color{teal}{d_1}=0\\) \\(\\color{brown}{E_d}=\\color{brown}{E_0}\\), limit \\({\\color{teal}{d_1}}\\rightarrow \\infty\\) \\({\\color{brown}{E_d}}\\rightarrow {\\color{brown}{E_1}}\\), \\({\\color{teal}{d_1}}=\\color{purple}{C_1}\\) \\({\\color{brown}{E_d}} = ({\\color{brown}{E_0}} + {\\color{brown}{E_2}})/2\\), half maximal response (either \\(\\color{brown}{\\mbox{IC}_{50}}\\) treatment \\(1\\) inhibitor \\(\\color{brown}{\\mbox{EC}_{50}}\\) treatment \\(1\\) agonist). slope \\({\\color{teal}{d_1}}={\\color{purple}{C_1}}\\) \\[\\begin{align*}     \\frac{\\mathrm{d}\\;\\color{brown}{E_d}}{\\mathrm{d}\\color{teal}{d_1}}         &= {\\color{purple}{C_1}}^{v}{\\color{brown}{E_0}}               \\frac{\\mathrm{d}}{\\mathrm{d}\\color{teal}{d_1}}                   \\frac{1}{{\\color{purple}{C_1}}^{\\color{purple}{h_1}} + {\\color{teal}{d_1}}^{\\color{purple}{h_1}}} +            {\\color{brown}{E_1}}               \\frac{\\mathrm{d}}{\\mathrm{d}\\color{teal}{d_1}}                    \\frac{{\\color{teal}{d_1}}^{h_1}}{{\\color{purple}{C_1}}^{\\color{purple}{h_1}} + {\\color{teal}{d_1}}^{\\color{purple}{h_1}}}\\\\         &= {\\color{purple}{C_1}}^{h_1}{\\color{brown}{E_0}}               \\frac{                          h_1{\\color{teal}{d_1}}^{{\\color{purple}{h_1}}-1}}{\\left({\\color{purple}{C_1}}^{\\color{purple}{h_1}} + {\\color{teal}{d_1}}^{\\color{purple}{h_1}}\\right)^2} +             {\\color{brown}{E_1}}                \\frac{{\\color{purple}{C_1}}^{\\color{purple}{h_1}}h_1{\\color{teal}{d_1}}^{{\\color{purple}{h_1}}-1}}{\\left({\\color{purple}{C_1}}^{\\color{purple}{h_1}} + {\\color{teal}{d_1}}^{\\color{purple}{h_1}}\\right)^2}\\\\         &= ({\\color{brown}{E_0}} + {\\color{brown}{E_1}}) \\end{align*}\\] evaluation functional form \\({\\color{brown}{E_d}}\\) numerically unstable. transform using \\(\\mbox{log\\_sum\\_exp}\\) trick, let \\[\\begin{align*} \\mbox{numerator\\_parts} = [\\\\       &{\\color{purple}{h_1}}\\log({\\color{purple}{C_1}}) + {\\color{purple}{h_2}}\\log({\\color{purple}{C_2}}) + \\log({\\color{brown}{E_0}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{teal}{d_1}}) + {\\color{purple}{h_2}}\\log({\\color{purple}{C_2}}) + \\log({\\color{brown}{E_1}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{purple}{C_1}}) + {\\color{purple}{h_2}}\\log({\\color{teal}{d_2}}) + \\log({\\color{brown}{E_2}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{teal}{d_1}}) + {\\color{purple}{h_2}}\\log({\\color{teal}{d_2}}) + \\log({\\color{brown}{E_3}}) + \\log({\\color{purple}{\\alpha}}) ]\\\\ \\mbox{denominator\\_parts} = [\\\\       &{\\color{purple}{h_1}}\\log({\\color{purple}{C_1}}) + {\\color{purple}{h_2}}\\log({\\color{purple}{C_2}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{teal}{d_1}}) + {\\color{purple}{h_2}}\\log({\\color{purple}{C_2}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{purple}{C_1}}) + {\\color{purple}{h_2}}\\log({\\color{teal}{d_2}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{teal}{d_1}}) + {\\color{purple}{h_2}}\\log({\\color{teal}{d_2}})]\\\\ \\end{align*}\\] \\[     E_d = \\mbox{exp}\\!\\left(\\mbox{log\\_sum\\_exp}(\\mbox{numerator\\_parts}) - \\mbox{log\\_sum\\_exp}(\\mbox{denominator\\_parts})\\right). \\]","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_MuSyC_model.html","id":"implementation-and-usage-of-the-musyc-model-in-stanbrms","dir":"Articles","previous_headings":"MuSyC synergy model","what":"Implementation and usage of the MuSyC model in Stan/BRMS","title":"Derive: MuSyC Model -- Synergy Analysis","text":"#’ Drug Synergy #’ MuSyC Drug Synergy model #’ #’ Assume response metric decreases effective drugs #’ Let E3 effect maximum concentration drugs #’ #’ #’ Special cases: #’ * dose additive model: alpha1 = alpha2 = 0 #’ * loewe: h1 = h2 = 1 #’ * CI: E0 = 1, E1 = E2 = E3 = 0 #’ drug effect equated percent inhibition #’ * bliss drug independence model: #’ E0 = 1, E1 = E2 = E3 = 0, alpha1 = alpha2 = 1 #’ (param?) d1 Dose drug 1 #’ (param?) d2 Dose drug 2 #’ #’ (param?) E0 effect drug treatment #’ #’ # params drug 1 self #’ (param?) s1 drug 1 hill slope #’ (param?) C1 drug 1 EC50 #’ (param?) E1 drug 1 maximum effect #’ #’ # params drug 2 self #’ (param?) s2 drug 2 hill slope #’ (param?) C2 drug 2 EC50 #’ (param?) E2 drug 2 maximum effect #’ #’ (param?) beta synergistic efficacy #’ percent increase drug combination’s effect #’ beyond efficacious single drug. #’ #’ beta > 0 => synergistic efficacy #’ effect maximum concentration drugs (E3) exceeds #’ maximum effect either drug alone (E1 E2) #’ #’ beta < 0 => antagonistic efficacy #’ least one drugs efficacious #’ single agents combination #’ #’ (param?) alpha1 synergistic potency #’ effective dose drug 1 #’ altered presence drug 2 #’ (param?) alpha2 synergistic potency #’ effective dose drug 2 #’ altered presence drug 1 #’ #’ alpha > 1 => synergistic potency #’ EC50 decreases addition drug, #’ corresponding increase potency #’ #’ 0 <= alpha < 1 => antagonistic potency #’ EC50 drug increases result drug, #’ corresponding decrease potency #’ #’ alpha1 == alpha2 detailed balance #’ (export?) generate_MuSyC_effects <- function( d1, d2, E0, s1, C1, E1, s2, C2, E2, alpha, E3) { h1 <- MuSyC_si_to_hi(s1, C1, E0, E1) h2 <- MuSyC_si_to_hi(s2, C2, E0, E2) numerator <- C1^h1 * C2^h2 * E0 + d1^h1 * C2^h2 * E1 + C1^h1 * d2^h2 * E2 + d1^h1 * d2^h2 * E3 * alpha denominator <- C1^h1 * C2^h2 + d1^h1 * C2^h2 + C1^h1 * d2^h2 + d1^h1 * d2^h2 * alpha numerator / denominator } #’ Create formula MuSyC synergy model #’ #’ (description?) setup defaulMuSyC synergy model formula predict #’ E0, C1, E1, s1, C2, E2, s2, log10alpha, E3alpha #’ parameters. #’ #’ (param?) predictors Additional formula objects specify predictors #’ non-linear parameters. .e. perturbations/experimental differences #’ modeled separately? (Default: 1) random effect taken #’ consideration? .e. cell number, plate number, etc. #’ (return?) brmsformula #’ #’ (examples?) #‘ #’ #’ (export?) MuSyC_formula <- function( predictors = 1, …) { } #’ Fit MuSyC synergy model dose #’ #’ (param?) data data.frame experimental data #’ columns: dose1, dose2, n_positive, count, [] #’ (param?) group_vars quosures list #’ dplyr::vars(…) columns fitting synergy model #’ (param?) C1_prior prior distribution Ed d1=d1_IC50, d2=0 #’ (param?) C2_prior prior distribution Ed d1=0, d2=d2_IC50 #’ (param?) s1_prior prior distribution d(Ed)/d(d1) d1=d1_IC50, d2=0 #’ (param?) s2_prior prior distribution d(Ed)/d(d2) d1=0, d2=d2_IC50 #’ (param?) log10alpha_prior prior distribution alpha synergy parameter #’ (param?) E0_prior prior distribution Ed d1=0, d2=0 #’ (param?) E1_prior prior distribution Ed d1=Inf, d2=0 #’ (param?) E2_prior prior distribution Ed d1=0, d2=Inf #’ (param?) E3_alpha_prior prior distribution Ed scaled alpha d1=Inf, #’ d2=Inf #’ (param?) C1_init initial sampling distribution C1 parameter #’ (param?) C2_init initial sampling distribution C2 parameter #’ (param?) s1_init initial sampling distribution s1 parameter #’ (param?) s2_init initial sampling distribution s2 parameter #’ (param?) log10alpha_init intial sampling distribution alpha parameter #’ (param?) E0_init initial sampling distribution E0 parameter #’ (param?) E1_init initial sampling distribution E1 parameter #’ (param?) E2_init initial sampling distribution E2 parameter #’ (param?) E3_alpha_init initial sampling distribution E3 parameter #’ (param?) combine combine grouped models single brms model #’ (param?) verbose verbose output #’ #’ (param?) iter number stan NUTS sampling steps #’ (param?) cores number cores used sampling #’ (param?) stan_model_args stan model arguments #’ (param?) control stan control arguments #’ #’ #’ #’ bernoulli_inf(n_positive / count) = #’ Ed ~ MuSyC(d1, d2, C_params, E_params, s_params, alpha) #’ #’ improve numeric stability, d1 d2 C1 C2 variables #’ scaled improve numeric stability: #’ #’ d1 = dose1/max(dose1) #’ d2 = dose2/max(dose2) #’ drug1_IC50 = C1 * max(dose1) #’ drug2_IC50 = C2 * max(dose2) #’ #’ Functional form: #’ Ed ~ ( #’ C1^h1 * C2^h2 * E0 + #’ d1^h1 * C2^h2 * E1 + #’ C1^h1 * d2^h2 * E2 + #’ d1^h1 * d2^h2 * E3 * alpha #’ ) / ( #’ C1^h1 * C2^h2 + #’ d1^h1 * C2^h2 + #’ C1^h1 * d2^h2 + #’ d1^h1 * d2^h2 * alpha #’ ) #’ #’ #’ #’ #’ #’ ############################################## #’ # Proof definitions parameters # #’ ############################################## #’ #’ Claim: d1=0 d2=0 Ed = E0 #’ Ed = (C1^h1 * C2^h2 * E0) / (C1^h1 * C2^h2) #’ = E0 #’ #’ Claim: d1=0 d2 -> Inf Ed = E2 #’ Ed = (C2^h2 * E0 + d2^h2 * E2) / (C2^h2 + d2^h2) #’ = (d2^h2 * E2) / (d2^h2) #’ = E2 #’ #; Claim: d1=0 d2=C2 Ed = (E0 + E2) / 2 #’ d1>0 d2 -> Inf Ed #’ Ed = (C1^h1 * C2^h2 * E0 + C1^h1 * C2^h2 * E2) / #’ (C1^h1 * C2^h2 + C1^h1 * C2^h2) #’ = (E0 + E2) / 2 #’ #’(export?) MuSyC_model <- function( data, group_vars = vars(compound), formula = MuSyC_formula(), prior = MuSyC_prior(), init = MuSyC_init(), combine = FALSE, verbose = FALSE, iter = 8000, cores = 4, stan_model_args = list(verbose = FALSE), control = list( adapt_delta = .99, max_treedepth = 12), model_evaluation_criteria = c(“loo”, “bayes_R2”), …) { (.data.frame(well_scores)) { grouped_data <- well_scores |> dplyr::group_by(!!!group_vars) |> dplyr::mutate( d1_scale_factor = max(dose1), d2_scale_factor = max(dose2)) |> tidyr::nest() |> dplyr::ungroup() } (verbose) { cat(“Fitting MuSyC model”) } model <- brms::brm_multiple( formula = formula, data = grouped_data$data, family = binomial(“identity”), prior = prior, init = init, # stanvars = c( # brms::stanvar( # scode = ” real d1_scale_factor = max(dose1));“, # block =”tdata”, # position = “end”), # brms::stanvar( # scode = ” real d2_scale_factor = max(dose2));“, # block =”tdata”, # position = “end”), # brms::stanvar( # scode = ” real drug1_IC50 = b_C1 * d1_scale_factor);“, # block =”genquant”, # position = “end”), # brms::stanvar( # scode = ” real drug2_IC50 = b_C2 * d2_scale_factor;“, # block =”genquant”, # position = “end”)), combine = FALSE, data2 = NULL, iter = iter, cores = cores, stan_model_args = stan_model_args, control = control, …) (!.null(model_evaluation_criteria)) { # evalate fits model <- model |> purrr::imap(function(model, ) { group_index <- grouped_data[, ] |> dplyr::select(-data) group_index_label <- paste0( names(group_index), “:”, group_index, collapse = “,”) cat(“Evaluating model fit ”, group_index_label, “…”, sep = ““) model <- model |> brms::add_criterion( criterion = model_evaluation_criteria, model_name = paste0(”MuSyC:“, group_index_label), reloo = TRUE) model }) } grouped_data |> dplyr::mutate( model = model) }","code":"predictor_eq <- rlang::new_formula(   lhs = quote(E0 + C1 + E1 + s1 + C2 + E2 + s2 + log10alpha + E3alpha),   rhs = rlang::enexpr(predictors))  brms::brmsformula(   response ~ (C1^h1 * C2^h2 * E0 +       d1^h1 * C2^h2 * E1 +       C1^h1 * d2^h2 * E2 +       d1^h1 * d2^h2 * E3alpha     ) / (       C1^h1 * C2^h2 +       d1^h1 * C2^h2 +       C1^h1 * d2^h2 +       d1^h1 * d2^h2 * 10^log10alpha),   brms::nlf(d1 ~ dose1 / d1_scale_factor),   brms::nlf(d2 ~ dose2 / d2_scale_factor),   brms::nlf(h1 ~ s1 * (4 * C1) / (E0 + E1)),   brms::nlf(h2 ~ s2 * (4 * C2) / (E0 + E2)),   predictors_eq,   nl = TRUE,   ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"enzyme-kinetic-modeling","dir":"Articles","previous_headings":"","what":"Enzyme Kinetic Modeling","title":"Derive: tQ Model -- Enzyme Kinetics","text":"Enzymes proteins catalyze chemical reactions. facilitate producing virtual biological matter, crucial regulating biological processes. early 20th century Michaels Menten described foundational kinematic model enzymes, substrate enzyme reversibly bind, substrate converted product released. free enzyme (E) reversibly binds stubstrate (S) form complex (C) forward backward rate constants kf kb, irreversibly catalyzed product (P), rate constant kcat, releasing enzyme catalyze additional substrate. total enzyme concentration defined ET := E + C. total substrate product concentration defined ST := S + C + P. Michaelis constant defined kM := (kb + kcat) / kf. kcat rate constant determines maximum turn saturating substrate concentrations, Vmax := kcat * ET. rate constants kcat kM can estimated monitoring product accumulation time (enzyme progress curves), varying enzyme substrate concentrations. assuming enzyme concentration low (ET << ST), derived celebrated Michaelis-Menten kinetics. Since work, number groups developed models enzyme kinetics make less stringent assumptions. Recently (Choi, et al., 2017), described Bayesian model total QSSA model. make model accessible, re-implemented Stan/BRMS framework made available BayesPharma package.","code":"kf              --->     kcat       E + S  <---  C --->  E + P               kb"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"outline-for-vignette","dir":"Articles","previous_headings":"","what":"Outline for Vignette","title":"Derive: tQ Model -- Enzyme Kinetics","text":"Next formally define problem formulate model solution ordinary differential equation. illustrate, consider toy system assuming kcat kM known simulate sequence measurements using deSolve. implement ODE Stan/BRMS using stanvars show parameters toy system can estimated. Since common vary enzyme substrate concentrations order better estimate kinematic parameters, show can improve Stan/BRMS model allow multiple observations, arbitrary number measurements. finally, consider real enzyme kinetics dataset use Stan/BRMS model estimate kinematic parameters. compare estimated parameters fit using standard approaches.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"problem-statement","dir":"Articles","previous_headings":"","what":"Problem Statement","title":"Derive: tQ Model -- Enzyme Kinetics","text":"Implement total QSSA model stan/BRMS, refinement classical Michaelis-Menten enzyme kinetics ordinary differential equation described (Choi, et al., 2017, DOI: 10.1038/s41598-017-17072-z). equation 2: (Choi, et al. 2017) prove, tQ model valid K = kb/kf dissociation constant.","code":"Observed data:   M     = number of measurements # The product concentration Pt is measured   t[M]  = time                   # at M time points t   Pt[M] = product                #    ST    = substrate total conc.  # Substrate and enzyme concentrations are   ET    = enzyme total conc.     # assumed to be given for each observation  Model parameters:   kcat    # catalytic constant   kM      # Michaelis constant  ODE formulation:   dPdt = kcat * (                # Change in product concentration at time t     ET + kM + ST - Pt +               -sqrt((ET + kM + ST - Pt)^2 - 2* ET * (ST - Pt))) / 2   initial condition:     P := 0                       # There is zero product at time 0 K/(2*ST) * (ET+kM+ST) / sqrt((ET+kM+ST+P)^2 - 4*ET(ST-P)) << 1,"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"simulate-one-observation","dir":"Articles","previous_headings":"","what":"Simulate one observation","title":"Derive: tQ Model -- Enzyme Kinetics","text":"Using deSolve package can simulate data following total QSSA model. Measurements made random Gaussian noise mean 0 variance 0.5. visualize, true enzyme progress curve shown blue, enzyme progress curve fit noisy measurements smooth loess spline shown orange. smooth fits well, estimate parameters curve .","code":"tQ_model_generate <- function(time, kcat, kM, ET, ST){   ode_tQ <- function(time, Pt, theta){     list(c(theta[1] * (       ET + theta[2] + ST - Pt +       -sqrt((ET + theta[2] + ST - Pt)^2 - 4 * ET * (ST - Pt))) / 2))   }   deSolve::ode(y = 0, times = time, func = ode_tQ, parms = c(kcat, kM)) }  data_single <- tQ_model_generate(   time = seq(0.00, 3, by=.05),   kcat = 3,   kM = 5,   ET = 10,   ST = 10) |>   as.data.frame() |>   dplyr::rename(P_true = 2) |>   dplyr::mutate(     P = rnorm(dplyr::n(), P_true, 0.5), # add some observational noise     ST = 10, ET = 10) head(data_single) ##   time    P_true          P ST ET ## 1 0.00 0.0000000 -0.3321247 10 10 ## 2 0.05 0.7311578  1.1175903 10 10 ## 3 0.10 1.4243598  1.1193415 10 10 ## 4 0.15 2.0794197  2.3942416 10 10 ## 5 0.20 2.6964485  3.6683677 10 10 ## 6 0.25 3.2758537  3.2796322 10 10 ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"fitting-a-single-ode-observation-in-brms","dir":"Articles","previous_headings":"","what":"Fitting a single ODE observation in BRMS","title":"Derive: tQ Model -- Enzyme Kinetics","text":"implement BRMS, can use stanvars define custom functions. key idea call ODE solver, case backward differentiation formula (bdf) used solve stiff ODEs, passing function ode_tQ returns dP/dt, change product time t. ode_tQ function depends product time t state vector, kinematic parameters estimated kcat kM user-provided data enzyme substrate concentrations ET ST. call ode_dbf pass initial product concentration time (equal zero), measured time-points, parameters user defied data. Finally , extract vector sampled vector product concentrations return. use function, define kcat kM parameters wish sample P ~ tQ(...). Since data points define single observation, set loop = FALSE. use gamma priors kcat kM shape parameter alpha=4 rate parameter beta=1. prior mean alpha/beta = 4/1 = 4 variance alpha/beta^2 = 4/1 = 4. also bound parameters 0. initialize chain prior mean use cmdstanr version 2.29.2 backend, use default warmup 1000 Fitting model takes ~15 seconds, Rhat = 1 effective sample size bulk tail greater 1400 parameters. estimates 95% confidence intervals good. visualize posterior distribution vs. prior distribution, first sample prior, using brms::brm call sample_prior = \"\" argument. plot, use tidybayes gather draws ggplot2 map curves, prior theorange curve, posterior blue curve, true parameter marked vertical line.  Next, plot prior posterior samples scatter plot. Note high correlation kcat kM parameters posterior. expected, typically better estimates require varying enzyme substrate concentrations.","code":"stanvars_tQ_ode <- brms::stanvar(scode = paste(\" vector tQ_ode(    real time,    vector state,    vector params,    data real ET,    data real ST) {        real Pt = state[1];   // product at time t    real kcat = params[1];    real kM = params[2];    vector[1] dPdt;    dPdt[1] = kcat * (      ET + kM + ST - Pt      -sqrt((ET + kM + ST - Pt)^2 - 4 * ET * (ST - Pt))) / 2;    return(dPdt); } \", sep = \"\\n\"), block = \"functions\") stanvars_tQ_single <- brms::stanvar(scode = paste(\" vector tQ_single(   data vector time,   vector vkcat,   vector vkM,   data vector vET,   data vector vST) {      vector[2] params = [ vkcat[1], vkM[1] ]';   vector[1] initial_state = [ 0.0 ]';   real initial_time = 0.0;   int M = dims(time)[1];    vector[1] P_ode[M] = ode_bdf(     // Function signature:     tQ_ode,                         // function ode     initial_state,                  // vector initial_state     initial_time,                   // real initial_time     to_array_1d(time),              // array[] real time     params,                         // vector params     vET[1],                         // ...     vST[1]);                        // ...      vector[M] P;                      // Need to return a vector not array   for(i in 1:M) P[i] = P_ode[i,1];   return(P); } \", sep = \"\\n\"), block = \"functions\") brms_params <- list(   cores = 4,   seed = 52L,   backend = 'cmdstanr') model_single <- do.call(what = brms::brm, args = c(list(   formula = brms::brmsformula(     P ~ tQ_single(time, kcat, kM, ET, ST),     kcat + kM ~ 1,     nl = TRUE,     loop=FALSE),   data = data_single |> dplyr::filter(time > 0),   prior = c(     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kcat\"),     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kM\")),   init = function() list(kcat = 4, kM = 4),   stanvars = c(     stanvars_tQ_ode,     stanvars_tQ_single)),   brms_params)) ## Start sampling ## Init values were only set for a subset of parameters.  ## Missing init values for the following parameters: ##  - chain 1: b_kcat, b_kM, sigma ##  - chain 2: b_kcat, b_kM, sigma ##  - chain 3: b_kcat, b_kM, sigma ##  - chain 4: b_kcat, b_kM, sigma ## Running MCMC with 4 parallel chains... ##  ## Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 2 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 3 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 1 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 2 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 4 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 3 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 1 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 2 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 3 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 4 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 1 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 2 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 3 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 4 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 1 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 4 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 3 finished in 53.6 seconds. ## Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 2 finished in 56.7 seconds. ## Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 4 finished in 57.6 seconds. ## Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 1 finished in 59.2 seconds. ##  ## All 4 chains finished successfully. ## Mean chain execution time: 56.8 seconds. ## Total execution time: 59.3 seconds. ##  Family: gaussian  ##   Links: mu = identity; sigma = identity  ## Formula: P ~ tQ_single(time, kcat, kM, ET, ST)  ##          kcat ~ 1 ##          kM ~ 1 ##    Data: structure(list(time = c(0.05, 0.1, 0.15, 0.2, 0.25 (Number of observations: 60)  ##   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ##          total post-warmup draws = 4000 ##  ## Population-Level Effects:  ##                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## kcat_Intercept     2.88      0.48     2.14     3.97 1.00     1096     1095 ## kM_Intercept       4.28      2.18     1.16     9.35 1.00     1089     1020 ##  ## Family Specific Parameters:  ##       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma     0.48      0.05     0.40     0.58 1.00     1769     1797 ##  ## Draws were sampled using sample(hmc). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). model_single_prior <- do.call(what = brms::brm, args = c(list(   formula = brms::brmsformula(     P ~ tQ_single(time, kcat, kM, ET, ST),     kcat + kM ~ 1,     nl = TRUE,     loop=FALSE),   data = data_single |> dplyr::filter(time > 0),   prior = c(     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kcat\"),     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kM\")),   init = function() list(kcat = 4, kM = 4),   stanvars = c(     stanvars_tQ_ode,     stanvars_tQ_single),   sample_prior = \"only\"),   brms_params)) ## Start sampling ## Init values were only set for a subset of parameters.  ## Missing init values for the following parameters: ##  - chain 1: b_kcat, b_kM, sigma ##  - chain 2: b_kcat, b_kM, sigma ##  - chain 3: b_kcat, b_kM, sigma ##  - chain 4: b_kcat, b_kM, sigma ## Running MCMC with 4 parallel chains... ##  ## Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 1 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 1 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 1 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 1 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 2 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 2 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 2 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 2 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 3 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 3 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 3 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 3 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 4 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 4 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 4 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 4 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 1 finished in 0.1 seconds. ## Chain 2 finished in 0.1 seconds. ## Chain 3 finished in 0.1 seconds. ## Chain 4 finished in 0.0 seconds. ##  ## All 4 chains finished successfully. ## Mean chain execution time: 0.1 seconds. ## Total execution time: 0.3 seconds."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"fitting-multiple-observations","dir":"Articles","previous_headings":"","what":"Fitting multiple observations","title":"Derive: tQ Model -- Enzyme Kinetics","text":"Next extend BRMS model allow fitting common kcat, kM concentrations based multiple replicas, varying substrate/enzyme concentrations using BRMS. demonstrate, varying enzyme substrate concentrations, better fit kinematic parameters.   Next sample enzyme progress curves posterior","code":"data_multiple <- tidyr::expand_grid(   kcat = 3,   kM =  5,   ET = c(3, 10, 30),   ST = c(3, 10, 30)) |>   dplyr::mutate(observation_index = dplyr::row_number()) |>   dplyr::rowwise() |>   dplyr::do({     data <- .     time <- seq(0.05, 3, by=.05)     data <- data.frame(data,       time = time,       P = tQ_model_generate(         time = time,         kcat = data$kcat,         kM = data$kM,         ET = data$ET,         ST = data$ST)[,2])   }) |>   dplyr::mutate(     P = rnorm(dplyr::n(), P, 0.5)) stanvars_tQ_multiple <- brms::stanvar(scode = paste(\" vector tQ_multiple(   array[] int replica,   data vector time,   vector vkcat,   vector vkM,   data vector vET,   data vector vST) {    int N = size(time);   vector[N] P;   int begin = 1;   int current_replica = replica[1];   for (i in 1:N){     if(current_replica != replica[i]){       P[begin:i-1] = tQ_single(         time[begin:i-1],         vkcat,         vkM,         vET[begin:i-1],         vST[begin:i-1]);       begin = i;       current_replica = replica[i];     }   }   P[begin:N] = tQ_single(time[begin:N], vkcat, vkM, vET[begin:N], vST[begin:N]);   return(P); }\", sep = \"\\n\"), block = \"functions\") model_multiple <- do.call(what = brms::brm, args = c(list(   formula = brms::brmsformula(     P ~ tQ_multiple(observation_index, time, kcat, kM, ET, ST),     kcat + kM ~ 1,     nl = TRUE,     loop=FALSE),   data = data_multiple,   prior = c(     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kcat\"),     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kM\")),   init = function() list(kcat = 4, kM = 4),   stanvars = c(     stanvars_tQ_ode,     stanvars_tQ_single,     stanvars_tQ_multiple)),   brms_params)) ## Start sampling ## Init values were only set for a subset of parameters.  ## Missing init values for the following parameters: ##  - chain 1: b_kcat, b_kM, sigma ##  - chain 2: b_kcat, b_kM, sigma ##  - chain 3: b_kcat, b_kM, sigma ##  - chain 4: b_kcat, b_kM, sigma ## Running MCMC with 4 parallel chains... ##  ## Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 1 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 2 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 4 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 1 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 3 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 2 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 4 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 1 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 3 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 2 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 4 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 1 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 3 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 2 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 4 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 3 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 4 finished in 244.5 seconds. ## Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 1 finished in 248.1 seconds. ## Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 3 finished in 249.4 seconds. ## Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 2 finished in 249.9 seconds. ##  ## All 4 chains finished successfully. ## Mean chain execution time: 248.0 seconds. ## Total execution time: 250.1 seconds. model_multiple ##  Family: gaussian  ##   Links: mu = identity; sigma = identity  ## Formula: P ~ tQ_multiple(observation_index, time, kcat, kM, ET, ST)  ##          kcat ~ 1 ##          kM ~ 1 ##    Data: structure(list(kcat = c(3, 3, 3, 3, 3, 3, 3, 3, 3, (Number of observations: 540)  ##   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ##          total post-warmup draws = 4000 ##  ## Population-Level Effects:  ##                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## kcat_Intercept     2.79      0.05     2.71     2.89 1.00     1286     1488 ## kM_Intercept       4.61      0.33     4.01     5.30 1.00     1233     1458 ##  ## Family Specific Parameters:  ##       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma     0.59      0.02     0.56     0.63 1.00     1898     1815 ##  ## Draws were sampled using sample(hmc). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). ## Start sampling ## Init values were only set for a subset of parameters.  ## Missing init values for the following parameters: ##  - chain 1: b_kcat, b_kM, sigma ##  - chain 2: b_kcat, b_kM, sigma ##  - chain 3: b_kcat, b_kM, sigma ##  - chain 4: b_kcat, b_kM, sigma ## Running MCMC with 4 sequential chains... ##  ## Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 1 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 1 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 1 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 1 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 1 finished in 0.0 seconds. ## Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 2 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 2 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 2 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 2 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 2 finished in 0.0 seconds. ## Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 3 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 3 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 3 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 3 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 3 finished in 0.0 seconds. ## Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 4 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 4 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 4 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 4 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 4 finished in 0.0 seconds. ##  ## All 4 chains finished successfully. ## Mean chain execution time: 0.0 seconds. ## Total execution time: 0.6 seconds."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/implement_tidymodels.html","id":"using-bayespharma-models-with-tidymodels","dir":"Articles","previous_headings":"","what":"Using BayesPharma models with Tidymodels","title":"Implement: BayesPharma and Tidymodels","text":"Tidymodels platform running analyzing models R. vignette demonstrates use BayesPharma models Tidy Models. Define recipe assign roles different columns Define model using wrapper package TidyModels. Build run workflow adding recipe model running fit.","code":"load(here::here(\"data\", \"kor_antag.rda\")) kor_antag <- kor_antag |> dplyr::transmute(   substance_id = Drug,   cell_id = cell_number,   log_dose = log_dose,   response = normalized_measurement) kor_recipe <- kor_antag |>   recipes::recipe() |>   recipes::update_role(response, new_role = \"outcome\") |>   recipes::update_role(log_dose, new_role = \"predictor\") |>   recipes::update_role(substance_id, new_role = \"predictor\") kor_model <- bayesian::bayesian(   cores = 4,   chains = 4,   iter = 2000,   control = list(adapt_delta = 0.99),   stanvars = BayesPharma::sigmoid_stanvar,   init = BayesPharma::sigmoid_antagonist_init(top = 100),   prior = BayesPharma::sigmoid_antagonist_prior(top = 100)) |>   parsnip::set_engine(\"brms\") |>   parsnip::set_mode(\"regression\") |>   recipes::update(     formula.override = bayesian::bayesian_formula(       ..y ~ sigmoid(ic50, hill, top, bottom, log_dose),       ic50 + hill + top + bottom ~ 0 + substance_id,       nl = TRUE)) kor_workflow <- workflows::workflow() |>   workflows::add_recipe(kor_recipe) |>   workflows::add_model(spec = kor_model) |>   parsnip::fit(data = kor_antag) ## Compiling Stan program... ## Start sampling kor_workflow ## ══ Workflow [trained] ═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════ ## Preprocessor: Recipe ## Model: bayesian() ##  ## ── Preprocessor ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## 0 Recipe Steps ##  ## ── Model ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ##  Family: gaussian  ##   Links: mu = identity; sigma = identity  ## Formula: ..y ~ sigmoid(ic50, hill, top, bottom, log_dose)  ##          ic50 ~ 0 + substance_id ##          hill ~ 0 + substance_id ##          top ~ 0 + substance_id ##          bottom ~ 0 + substance_id ##    Data: ~data (Number of observations: 73)  ##   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ##          total post-warmup draws = 4000 ##  ## Population-Level Effects:  ##                                Estimate Est.Error l-95% CI u-95% CI Rhat ## ic50_substance_idBTRX_335140      -8.85      0.20    -9.21    -8.42 1.00 ## ic50_substance_idBTRX_395750      -8.22      0.46    -8.95    -7.31 1.00 ## ic50_substance_idJNJ              -9.14      0.33    -9.78    -8.47 1.00 ## ic50_substance_idPF               -6.17      1.01    -7.66    -3.52 1.00 ## hill_substance_idBTRX_335140      -1.46      0.58    -2.86    -0.60 1.00 ## hill_substance_idBTRX_395750      -0.90      0.52    -2.27    -0.25 1.00 ## hill_substance_idJNJ              -0.99      0.49    -2.30    -0.41 1.00 ## hill_substance_idPF               -0.31      0.24    -0.86    -0.03 1.00 ## bottom_substance_idBTRX_335140    -0.01      0.50    -0.99     1.00 1.00 ## bottom_substance_idBTRX_395750     0.01      0.50    -0.96     0.99 1.00 ## bottom_substance_idJNJ            -0.01      0.50    -1.02     0.98 1.00 ## bottom_substance_idPF              0.00      0.50    -0.95     1.00 1.00 ## top_substance_idBTRX_335140      100.00      0.00   100.00   100.00   NA ## top_substance_idBTRX_395750      100.00      0.00   100.00   100.00   NA ## top_substance_idJNJ              100.00      0.00   100.00   100.00   NA ## top_substance_idPF               100.00      0.00   100.00   100.00   NA ##                                Bulk_ESS Tail_ESS ## ic50_substance_idBTRX_335140       3472     2285 ## ic50_substance_idBTRX_395750       2175     1165 ## ic50_substance_idJNJ               3496     2343 ## ic50_substance_idPF                1589     1142 ## hill_substance_idBTRX_335140       3993     2991 ## hill_substance_idBTRX_395750       2588     1408 ## hill_substance_idJNJ               3837     2880 ## hill_substance_idPF                1665     1375 ## bottom_substance_idBTRX_335140     4083     1966 ## bottom_substance_idBTRX_395750     4229     2709 ## bottom_substance_idJNJ             4207     2656 ## bottom_substance_idPF              4314     2965 ## top_substance_idBTRX_335140          NA       NA ## top_substance_idBTRX_395750          NA       NA ## top_substance_idJNJ                  NA       NA ## top_substance_idPF                   NA       NA ##  ## Family Specific Parameters:  ##       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma    32.21      2.81    27.19    38.31 1.00     3093     2815 ##  ## ... ## and 4 more lines."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Madeline Martin. Author, maintainer. Matthew O'Meara. Author.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Martin M, O'Meara M (2023). BayesPharma: Tools Bayesian Analysis Non-Linear Pharmacology Models. R package version 0.0.2, https://api.github.com/repos/maomlab/BayesPharma/pages.","code":"@Manual{,   title = {BayesPharma: Tools for Bayesian Analysis of Non-Linear Pharmacology Models},   author = {Madeline Martin and Matthew O'Meara},   year = {2023},   note = {R package version 0.0.2},   url = {https://api.github.com/repos/maomlab/BayesPharma/pages}, }"},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"BayesPharma package contains collection R tools analyzing pharmacology data using Bayesian statistics modeling. comparison likelihood-based inference, BayesPharma builds stan ecosystem brms package. BayesPharma facilitates applying principled Bayesian workflow fit analyze several foundational pharmacology models, dose-response modeling, modeling Pnear folding funnels molecular modeling, modeling potential docking ‘hit-rate’ curves function dock score ultra-large library docking (Lyu et al. (2019), Alon et al. (2021)).","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"pre-requisites","dir":"","previous_headings":"Installation","what":"Pre-requisites","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"Follow instructions install rstan","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"install-bayespharma","dir":"","previous_headings":"Installation","what":"Install BayesPharma","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"R ","code":"install.packages(\"remotes\") remotes::install_github(\"maomlab/BayesPharma\", build_vignettes = FALSE)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"predictor columns typically treatment variables like drug batch variable like well_id. treatment dose given molar concentration, can convert log_dose using basic usage ","code":"library(tidyverse) library(BayesPharma)  data <- data.frame(   response = ...,   log_dose = ...,   <predictor columns>) data <- data |>    dplyr::mutate(     log_dose = BayesPharma::calculate_log_dose(dose)) model <- BayesPharma::sigmoid_model(    data = data)"},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"traceplot","dir":"","previous_headings":"Usage > Evaluate model fit","what":"Traceplot","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model |> BayesPharma::traceplot()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"basic-statistics","dir":"","previous_headings":"Usage > Evaluate model fit","what":"Basic statistics","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model |> BayesPharma::basic_stats()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"regression-plot","dir":"","previous_headings":"Usage > Evaluate model fit","what":"Regression plot","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model |> BayesPharma::posterior_draws_plot()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"prior-densities","dir":"","previous_headings":"Usage > Evaluate model fit","what":"Prior densities","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model |> BayesPharma::density_distributions() model |> BayesPharma::posterior_densities() model |> BayesPharma::prior_posterior_densitites()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"posterior-predictive-check","dir":"","previous_headings":"Usage > Evaluate model fit","what":"posterior predictive check","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model |> brms::pp_check(type = \"dens_overlay\", ndraws = 50)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"compare-model-fits","dir":"","previous_headings":"Usage","what":"compare model fits","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model <- model |> brms::add_loo_criterion() model_fit_comparison <- brms::compare_models(model, model_alt)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate MuSyC Ed scores using a robust functional form — MuSyC","title":"Generate MuSyC Ed scores using a robust functional form — MuSyC","text":"Generate MuSyC Ed scores using robust functional form","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate MuSyC Ed scores using a robust functional form — MuSyC","text":"","code":"MuSyC(logd1, logd2, logE0, logE1, logC1, h1, logE2, logC2, h2, logE3, logalpha)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate MuSyC Ed scores using a robust functional form — MuSyC","text":"logd1 numeric. log dose treatment 1 logd2 numeric. log dose treatment 2 logE0 numeric. Full log response treatment. logE1 numeric. Full log response treatment 1 dose treatment 2 zero. logC1 numeric. IC50 treatment 1 dose treatment 2 zero. h1 numeric. Slope treatment 1 IC50 dose treatment 2 zero exponential form. Use MuSyC_si_to_hi convert slope form. logE2 numeric. Full log response treatment 2 dose treatment 1 zero. logC2 numeric. IC50 treatment 2 dose treatment 1 zero. h2 numeric. Slope treatment 2 IC50 dose treatment 1 zero exponential form. Use MuSyC_si_to_hi convert slope form. logE3 numeric. Full response treatment 1 treatment 2. logalpha numeric. Log synergistic potency parameter greater 1 synergistic, less 1 antagonistic.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate MuSyC Ed scores using a robust functional form — MuSyC","text":"numeric synergistic response treatment 1      treatment 2 doses logd1 logd2 respectively.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a formula for the MuSyC synergy model — MuSyC_formula","title":"Create a formula for the MuSyC synergy model — MuSyC_formula","text":"setup default MuSyC synergy model formula     predict E0, C1, E1, s1,     C2, E2, s2, log10alpha,     E3alpha parameters.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a formula for the MuSyC synergy model — MuSyC_formula","text":"","code":"MuSyC_formula(predictors = 1, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a formula for the MuSyC synergy model — MuSyC_formula","text":"predictors Additional formula objects specify predictors non-linear parameters. .e. perturbations/experimental differences modeled separately? (Default: 1) random effect taken consideration? .e. cell number, plate number, etc. ... additional arguments passed brms::brmsformula","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a formula for the MuSyC synergy model — MuSyC_formula","text":"brmsformula","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a formula for the MuSyC synergy model — MuSyC_formula","text":"","code":"if (FALSE) {   # Data has a string column drug_id with drug identifiers   # Fit a separate model for each drug   BayesPharma::MuSyC_formula(predictors = 0 + drug_id)    # Data has a string column plate_id with plate identifiers   # Estimate the change in response for each plate relative to a global   # baseline.   BayesPharma::MuSyC_formula(predictors = plate_id)    # data has columns drug_id and plate_id   # fit a multilevel model where the drug effect depends on the plate   BayesPharma::MuSyC_formula(predictors = 0 + (drug_id|plate_id)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_hi_to_si.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert slope parametrization to exponent parametrization for drug i — MuSyC_hi_to_si","title":"Convert slope parametrization to exponent parametrization for drug i — MuSyC_hi_to_si","text":"can used setting priors interpreting parameter estimates see MuSyC_si_to_hi details","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_hi_to_si.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert slope parametrization to exponent parametrization for drug i — MuSyC_hi_to_si","text":"","code":"MuSyC_hi_to_si(hi, Ci, E0, Ei)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_hi_to_si.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert slope parametrization to exponent parametrization for drug i — MuSyC_hi_to_si","text":"hi exponent MuSyC equation drug Ci IC50 drug E0 response treatments Ei response infinite drug treatments","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_hi_to_si.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert slope parametrization to exponent parametrization for drug i — MuSyC_hi_to_si","text":"si slope drug IC50 doses drugs zero","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Create initialization for the MuSyC model — MuSyC_init","title":"Create initialization for the MuSyC model — MuSyC_init","text":"Initial values MuSyC model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create initialization for the MuSyC model — MuSyC_init","text":"","code":"MuSyC_init(   logE0 = log(0.5),   logC1 = 0,   logE1 = log(0.5),   h1 = 4,   logC2 = 0,   logE2 = log(0.5),   h2 = 4,   logE3 = log(0.5),   logalpha = 0 )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create initialization for the MuSyC model — MuSyC_init","text":"logE0 numeric function returning array length 1.  Initial value logE0 parameter. Default: log(0.5) logC1 numeric function returning array length 1. Initial value logC1 parameter. Default: 0 = log(1) logE1 numeric function returning array length 1. Initial value logE1 parameter. Default: log(0.5) h1 numeric function returning array length 1. Initial value h1 parameter. Default: 4 = MuSyC_si_to_hi(si=1, Ci=1, E0=1, Ei=0.0) exponent treatment 1 corresponding slope 1 logC2 numeric function returning array length 1. Initial value logC2 parameter. Default: 0 = log(1) logE2 numeric function returning array length 1. Initial value logE2 parameter. Default: log(0.5) h2 numeric function returning array length 1. Initial value h2 parameter. Default: 4 = MuSyC_si_to_hi(si=1, Ci=1, E0=1, Ei=0.0) exponent treatment 1 corresponding slope 1 logE3 numeric function returning array length 1. Initial value logE3 parameter. Default: log(0.5) logalpha numeric function returning array length 1. Initial value logalpha parameter. Default: 0 = log(1)","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create initialization for the MuSyC model — MuSyC_init","text":"input BayesPharma::model_MuSyC(init = ...) parameter.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create initialization for the MuSyC model — MuSyC_init","text":"","code":"if (FALSE) {   # default prior and init for MuSyC Model   prior <- BayesPharma::MuSyC_prior()   init <- BayesPharma::MuSyC_init()    # Set prior and init for MuSyC model where both treatment 1 and treatment 2   # are assumed to be full inhibitors   BayesPharma::MuSyC_prior(logE0 = 0, E1 = -Inf, E2 = -Inf, E3 = -Inf)   BayesPharma::MuSyC_init(E0 = 1, E1 = -Inf, E2 = -Inf, E3 = -Inf) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_model.html","id":null,"dir":"Reference","previous_headings":"","what":"MuSyC Synergy Model — MuSyC_model","title":"MuSyC Synergy Model — MuSyC_model","text":"Combined:      sample1 =","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MuSyC Synergy Model — MuSyC_model","text":"","code":"MuSyC_model(   data,   prior = MuSyC_prior(),   init = MuSyC_init(),   formula = MuSyC_formula(),   control = list(adapt_delta = 0.99, max_treedepth = 12),   stanvars = c(MuSyC_function_stanvar, MuSyC_genquant_stanvar),   expose_functions = TRUE,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MuSyC Synergy Model — MuSyC_model","text":"data data.frame experimental data.  must contain columns response predictors specified formula. prior brmspriors kcat kM parameters. Use BayesPharma::MuSyC_prior(...) create prior use .  Default: BayesPharma::MuSyC_prior(). init Initial values parameters, Use BayesPharma::MuSyC_init(...) create init use . Default BayesPharma::MuSyC_init(). formula brmsformula object. create dose-response brmsformula, use MuSyC_formula function. control named list parameters control sampler's behavior.  Adding max_treedepth giving greater value 10 can improve model convergence (default: list(adapt_delta = 0.99)). stanvars stanvars code model. Default defines MuSyC function genquant code. expose_functions boolean. Expose BayesPharma functions model [default: TRUE]. ... additional arguments passed brms::brm","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MuSyC Synergy Model — MuSyC_model","text":"nlp_logE0 = X_logE0 * b_logE0                  _______   _______                     = 1    = param nlp_logE1 = X_logE1 * b_logE0                  _______   ______                  =sample1","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Default priors for the MuSyC model — MuSyC_prior","title":"Default priors for the MuSyC model — MuSyC_prior","text":"Creating data.frame priors dose response    parameters required MuSyC model. like set parameter constant, enter numeric value function argument.  like set distribution, example, function arguments type ec50 = brms::prior(normal(<mu>, <sigma>), nlpar = 'ec50'). distribution options, reference http://mc-stan.org/rstanarm/reference/priors.html#arguments.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default priors for the MuSyC model — MuSyC_prior","text":"","code":"MuSyC_prior(   logE0 = brms::prior(normal(-0.6931, 3), nlpar = \"logE0\", ub = 0),   logE1 = brms::prior(normal(-1.386, 3), nlpar = \"logE1\", ub = 0),   logC1 = brms::prior(normal(0, 3), nlpar = \"logC1\"),   h1 = brms::prior(normal(4, 3), nlpar = \"h1\", lb = 0.1),   logE2 = brms::prior(normal(-1.386, 3), nlpar = \"logE2\", ub = 0),   logC2 = brms::prior(normal(0, 3), nlpar = \"logC2\"),   h2 = brms::prior(normal(4, 3), nlpar = \"h2\", lb = 0.1),   logE3 = brms::prior(normal(-1.386, 3), nlpar = \"logE3\", ub = 0),   logalpha = brms::prior(normal(0, 0.5), nlpar = \"logalpha\"),   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default priors for the MuSyC model — MuSyC_prior","text":"logE0 numeric brms::prior(...). Prior log response treatment. Default normal(log(0.5), 3) lower bounded 0. logE1 numeric brms::prior(...). Prior full log response treatment 1 dose treatment 2 zero. Default normal(log(0.25), 3) lower bounded 0. logC1 numeric brms::prior(...). Prior log IC50 drug 1 Default normal(log(1), 3). h1 numeric brms::prior(...). Prior slope drug 1 IC50 dose treatment 2 zero converted exponent form Default mu = MuSyC_si_to_hi(si = 1, Ci = 1, E0 = 0, Ei = 0); normal(mu, 3) lower bounded .1 logE2 numeric brms::prior(...). Prior full log response treatment 2 dose treatment 1 zero. Default normal(log(0.25), 3) lower bounded 0. logC2 numeric brms::prior(...). Prior log IC50 drug 2 Default normal(log(1), 3). h2 numeric brms::prior(...). Prior slope drug 2 IC50 dose treatment 1 zero converted exponent form Default mu = MuSyC_si_to_hi(si = 1, Ci = 1, E0 = 0, Ei = 0); normal(mu, 3) lower bounded 0.1 logE3 numeric brms::prior(...). Prior low full response treatment 1 treatment 2. Default normal(log(0.25), 3) lower bounded 0. logalpha numeric brms::prior(...). Prior log synergistic potency parameter greater 1 synergistic, less 1 antagonistic. Default normal(log(0), 0.5). ... additional brmsprior objects.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default priors for the MuSyC model — MuSyC_prior","text":"brmsprior  data.frame","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_si_to_hi.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from slope parametrization to the exponent parametrization for drug i — MuSyC_si_to_hi","title":"Convert from slope parametrization to the exponent parametrization for drug i — MuSyC_si_to_hi","text":"can used setting priors interpreting parameter estimates","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_si_to_hi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from slope parametrization to the exponent parametrization for drug i — MuSyC_si_to_hi","text":"","code":"MuSyC_si_to_hi(si, Ci, E0, Ei)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_si_to_hi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from slope parametrization to the exponent parametrization for drug i — MuSyC_si_to_hi","text":"si slope drug IC50 doses drugs zero Ci IC50 drug E0 reponse treatments Ei reponse inifinite drug treatments","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_si_to_hi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert from slope parametrization to the exponent parametrization for drug i — MuSyC_si_to_hi","text":"hi exponent MuSyC equation drug Claim: d1=0 d2=C2 d(Ed)/d(d2) = s2        s2 = h2 * (E0 + E2) / (4 * C2) d(Ed)/d(d2)   =  d/d(d2)      (C1^h1 * C2^h2 * E0 + C1^h1 * d2^h2 * E2) /      (C1^h1 * C2^h2      + C1^h1 * d2^h2) Cancle C1^h1 terms:   =  d/d(d2)      (C2^h2 * E0 + d2^h2 * E2) /      (C2^h2      + d2^h2) distribute derivative across terms numerator   =  E0 * C2^h2 * [d/d(d2) 1     / (C2^h2 + d2^h2)] +      E2         * [d/d(d2) d2^h2 / (C2^h2 + d2^h2)] =  E0 * C2^h2 * [h2 * d2^(h2-1) / (C2^h2 + d2^h2)^2] +      E2 * [C2^h2 * h2 * d2^(h2-1) / (C2^h2 + d2^h2)^2] =  (E0 + E2) * C2^h2 * h2 * d2^(h2-1)/(C2^h2 + d2^h2)^2 Evaluate d2 = C2:   =  (E0 + E2) * h2 * C2^(2*h2-1) / [4*C2^(2*h2))]   =  h2 * (E0 + E2) / (4 * C2)","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Pnear quality metric for RMSD funnel — Pnear","title":"Compute the Pnear quality metric for RMSD funnel — Pnear","text":"Pnear metric defined [(Bhardwaj, et al., Nature, 2016)](https://www.nature.com/articles/nature19791) measures \"funnel-like\" score-vs-rmsd plot . paste0(\"<https://github.com/RosettaCommons/\", \"main/blob/master/tests/benchmark/util/quality_measures.py#L268>\")","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Pnear quality metric for RMSD funnel — Pnear","text":"","code":"Pnear(score, rmsd, lambda = 1.5, kbt = 0.62, verbose = FALSE)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Pnear quality metric for RMSD funnel — Pnear","text":"score vector scores e.g. Rosetta energies e.g. Ref2015. rmsd root mean squared deviation values e.g. backbone atoms lambda Lambda value Angstroms indicating breadth Gaussian used define \"native-like-ness\".  bigger value, permissive calculation structures deviate native. Typical values peptides range 1.5 2.0, proteins 2.0 perhaps 4.0. kbt value k_B*T, energy units, determines large energy gap must order sequence said favour native state. default value, 0.62, correspond physiological temperature ref2015 scorefunction units kcal/mol. verbose give verbose output.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Pnear quality metric for RMSD funnel — Pnear","text":"numeric value.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Pnear quality metric for RMSD funnel — Pnear","text":"```r # subtract min-score done Rosetta Code scores = scores - min(scores) # write equation code-like notation Pnear <- Sum_i[exp(-RMSD[]^2/lambda^2)*exp(-scores[]/k_BT)] /          Sum_i[exp(-scores[]/k_BT)] # combine terms first exponential Pnear = Sum_i[exp(-RMSD[]^2/lambda^2 - scores[]/k_BT)] /         Sum_i[exp(-scores[]/k_BT)] let x_i  = RMSD[]^2/lambda^2 * k_BT/scores[]     beta = -scores[] Pnear = Sum_i[exp(-RMSD[]^2/lambda^2*k_BT/scores])] # Use log-sum-exponential trick log(Pnear) =   log_sum_exp(-RMSD[]^2/lambda^2 - scores[]/k_BT)              - log_sum_exp(-scores[]/k_BT) ```","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute the Pnear quality metric for RMSD funnel — Pnear","text":"Unlike Conway discrimination score, PNear calculation uses hard cutoffs.  advantageous repeated testing: scatter points RMSD plot changes slightly run run, PNear value change small amount, whereas metric dependent hard cutoffs change large amount low-energy point crosses RMSD threshold.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the Pnear quality metric for RMSD funnel — Pnear","text":"Vikram K. Mulligan (vmulligan\\@flatironinstitute.org) adapted   Rosetta","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Pnear quality metric for RMSD funnel — Pnear","text":"","code":"if (FALSE) {  Pnear(score = score_a, rmsd = rmsd_a) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/basic_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Give Basic statistical information about the model results — basic_stats","title":"Give Basic statistical information about the model results — basic_stats","text":"Return data.frame containing summary statistics     brms::brmsfit model.  summary statistics included     mean, median, standard deviation, lower confidence interval, upper     confidence interval.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/basic_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Give Basic statistical information about the model results — basic_stats","text":"","code":"basic_stats(   model,   predictors_col_name = \"_Intercept\",   half_max_label = \"ec50\",   l_ci = 0.025,   u_ci = 0.975 )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/basic_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Give Basic statistical information about the model results — basic_stats","text":"model brms::brmsfit model predictors_col_name string expression predictors column input data.frame. Predictors perturbations tested experiment (.e. Drug, Temperature, etc.). [default = \"_Intercept\"] half_max_label string label half maximal fits type experiment done (.e. ec50, ic50, ed50, id50, ld50, etc.). l_ci numeric unit lower confidence interval (default = 0.025) u_ci numeric unit upper confidence interval (default = 0.975)","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/basic_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Give Basic statistical information about the model results — basic_stats","text":"tibble::tibble object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/basic_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Give Basic statistical information about the model results — basic_stats","text":"","code":"if (FALSE) {   BayesPharma::basic_stats(     model = my_sigmoid_model,     predictors_col_name = \"predictors\",     half_max_label = \"ic50\",     l_ci = 0.025,     u_ci = 0.975) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/calculate_log_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a log dose (in base 10) column to the input data.frame — calculate_log_dose","title":"Add a log dose (in base 10) column to the input data.frame — calculate_log_dose","text":"Given dose column data.frame given   molar concentration add new column log base-10 dose,   log_dose, data.frame return .","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/calculate_log_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a log dose (in base 10) column to the input data.frame — calculate_log_dose","text":"","code":"calculate_log_dose(data, dose_col = \"dose\", molar_concentration = 1)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/calculate_log_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a log dose (in base 10) column to the input data.frame — calculate_log_dose","text":"data data.frame containing column representing dose molar units. dose_col expression dose column input data.frame molar_concentration numeric units molar concentration dose column (default = 1).","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/calculate_log_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a log dose (in base 10) column to the input data.frame — calculate_log_dose","text":"input data.frame additional log_dose column.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/calculate_log_dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a log dose (in base 10) column to the input data.frame — calculate_log_dose","text":"","code":"if (FALSE) { # Consider observations at doses of 1 μM and 0.1 μM. # If the doses are given in molar units e.g. M then, data <- data.frame(dose = c(1e-6, 1e-7)) |>    BayesPharma::calculate_log_dose(dose_col = dose, molar_concentration = 1) data$log_dose == c(-6, -7)  # If the doses are given with in units of nanomolar units e.g. \\code{nM} then data <- data.frame(dose_nM = c(1000, 100)) |>   BayesPharma::calculate_log_dose(     dose_col = dose_nM,     molar_concentration = 1e-9) data$log_dose == c(-6, -7) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/constant_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for a curve with a constant response — constant_formula","title":"Formula for a curve with a constant response — constant_formula","text":"set-equation formula objects constant response.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/constant_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formula for a curve with a constant response — constant_formula","text":"","code":"constant_formula(predictors = 1, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/constant_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formula for a curve with a constant response — constant_formula","text":"predictors Additional formula objects specify predictors non-linear parameters. .e. perturbations/experimental differences modeled separately? (Default: 1) random effect taken consideration? .e. cell number, plate number, etc. ... additional arugments brms::brmsformula","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/constant_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formula for a curve with a constant response — constant_formula","text":"brmsformula","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/constant_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for a curve with a constant response — constant_formula","text":"","code":"if (FALSE) {   constant_formula(predictors = 0 + predictors) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/density_distributions_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a plot of the density distributions of modeled parameters from brmsfit\nmodel — density_distributions_plot","title":"Create a plot of the density distributions of modeled parameters from brmsfit\nmodel — density_distributions_plot","text":"function useful observe distributions     priors set brmsfit model. adding     sample_prior = \"\" sigmoid_model brmsfit     model, model samples prior distributions     can observed using plot function verify     values intended covered included.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/density_distributions_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a plot of the density distributions of modeled parameters from brmsfit\nmodel — density_distributions_plot","text":"","code":"density_distributions_plot(   model,   pars = NULL,   labeller = NULL,   title_label = \"Density Distributions\" )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/density_distributions_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a plot of the density distributions of modeled parameters from brmsfit\nmodel — density_distributions_plot","text":"model brmsfit model. pars parameters choose (Default b_<parameter>_Intercept') labeller strip 'b_' '_Intercept' parameter labels title_label string plot title. (Default = \"Prior Density Plot\")","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/density_distributions_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a plot of the density distributions of modeled parameters from brmsfit\nmodel — density_distributions_plot","text":"ggplot2::ggplot object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/density_distributions_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a plot of the density distributions of modeled parameters from brmsfit\nmodel — density_distributions_plot","text":"","code":"if (FALSE) {   density_distributions_plot(     model = my_sigmoid_model) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/drc_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for DRC dose response models — drc_model","title":"Wrapper for DRC dose response models — drc_model","text":"Wrapper DRC dose response models","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/drc_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for DRC dose response models — drc_model","text":"","code":"drc_model(   data,   formula = response ~ log_dose,   fct = drc::L.4(fixed = c(NA, NA, NA, NA), names = c(\"hill\", \"bottom\", \"top\", \"ic50\")),   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/drc_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for DRC dose response models — drc_model","text":"data data.frame formula formula. Default: response ~ log_dose fct Non-linear link function. Default 4 parameter log-linear sigmoid equation, parameters estimated. fix subset , set parameters constant values. ... additional arguments passed drc::drm","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/drc_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for DRC dose response models — drc_model","text":"object (S3) class 'drc'.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/kor_antag.html","id":null,"dir":"Reference","previous_headings":"","what":"Dose Response Measurements of Four Different Kappa Opioid Receptor\nAntagonists — kor_antag","title":"Dose Response Measurements of Four Different Kappa Opioid Receptor\nAntagonists — kor_antag","text":"dataset containing drugs used, cell id, log dose response measured , reference, raw, normalized measurement","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/kor_antag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dose Response Measurements of Four Different Kappa Opioid Receptor\nAntagonists — kor_antag","text":"","code":"kor_antag"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/kor_antag.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dose Response Measurements of Four Different Kappa Opioid Receptor\nAntagonists — kor_antag","text":"data.frame includes dose-response measurements","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/kor_antag.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dose Response Measurements of Four Different Kappa Opioid Receptor\nAntagonists — kor_antag","text":"https://github.com/maomlab/BayesPharma","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_drc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create plot of drc model — plot_drc","title":"Create plot of drc model — plot_drc","text":"Create plot drc model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_drc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create plot of drc model — plot_drc","text":"","code":"plot_drc(   model,   newdata = NULL,   predict_args = list(interval = \"prediction\"),   aes_mapping = ggplot2::aes(x = .data[[\"log_dose\"]], y = .data[[\"response\"]]),   title = NULL )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_drc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create plot of drc model — plot_drc","text":"model drc object. drc model generated drc::drm(...) newdata data.frame predictions made. Default: use range log_dose values model object. predict_args list arguments passed predict(model, ...) including interval generate ribbon given type, see drc:::predict.drc details, Default: list(interval = \"prediction\") aes_mapping ggplot2::aes(...) mapping columns model data new data plot. Default: ggplot2::aes(x = log_dose, y = response) title character, plot title. Default: NULL","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_pp_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Posterior Predictive Check — plot_pp_check","title":"Perform Posterior Predictive Check — plot_pp_check","text":"Given brms model, perform graphical posterior     predictive check. pp_check brms package different plot types analyze model fit comparing observed data generated data model. documentation pp_check: <http://paul-buerkner.github.io/brms/reference/pp_check.brmsfit.html> documentation pp_check plot types PPC plotting functions: <https://mc-stan.org/bayesplot/reference/PPC-overview.html>","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_pp_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Posterior Predictive Check — plot_pp_check","text":"","code":"plot_pp_check(model, plot_type = \"dens_overlay\", n = 50, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_pp_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Posterior Predictive Check — plot_pp_check","text":"model brmsfit model. plot_type string expression plot function. n numeric units posterior draws used. ... additional arguments brms::pp_check.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_pp_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Posterior Predictive Check — plot_pp_check","text":"ggplot object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_pp_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Posterior Predictive Check — plot_pp_check","text":"","code":"if (FALSE) { # Consider a dose response model with the plot type being 10 box plots BayesPharma::plot_pp_check(   model = my_dose_response_model,   plot_type = \"box_plot\",   n = 10) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_synergy_checkerboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot synergy checkerboard — plot_synergy_checkerboard","title":"Plot synergy checkerboard — plot_synergy_checkerboard","text":"Plot synergy checkerboard","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_synergy_checkerboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot synergy checkerboard — plot_synergy_checkerboard","text":"","code":"plot_synergy_checkerboard(   data,   treatment_1_label = \"Treatment 1\",   treatment_2_label = \"Treatment 2\",   treatment_1_units = NULL,   treatment_2_units = NULL,   plot_zero_dose = TRUE,   contour_color = \"gold\" )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_synergy_checkerboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot synergy checkerboard — plot_synergy_checkerboard","text":"data data.frame columns [dose1, dose2, response] treatment_1_label used make default title axis labels treatment_2_label used make default title axis labels treatment_1_units used make default axis labels treatment_2_units used make default axis labels plot_zero_dose plotted log scale, zero doses -Inf, show plot, add slight separation axis. contour_color default 'gold'","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_synergy_checkerboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot synergy checkerboard — plot_synergy_checkerboard","text":"ggplot2 plot light-blue dark-blue tiles dose     response. Individual plot elements can -written     plot can saved ggplot2::ggsave()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/posterior_densities_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a plot of the posterior density distributions of modeled parameters\nfrom brmsfit model — posterior_densities_plot","title":"Create a plot of the posterior density distributions of modeled parameters\nfrom brmsfit model — posterior_densities_plot","text":"plots brmsfit model density distribution     parameter mean, lower confidence interval, upper     confidence interval.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/posterior_densities_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a plot of the posterior density distributions of modeled parameters\nfrom brmsfit model — posterior_densities_plot","text":"","code":"posterior_densities_plot(   model,   predictors_col_name = \"_Intercept\",   half_max_label = \"ec50\",   l_ci = 0.025,   u_ci = 0.975,   title_label = \"Posterior Density Plots w/ Mean & 95% CI\" )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/posterior_densities_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a plot of the posterior density distributions of modeled parameters\nfrom brmsfit model — posterior_densities_plot","text":"model brmsfit model. predictors_col_name string expression predictors column input data.frame (default = \"_Intercept\"). Predictors perturbations tested experiment (.e. Drug, Temperature, etc.). half_max_label string label half maximal fits type experiment done (.e. ec50, ic50, ed50, id50, ld50, etc.). l_ci numeric unit lower confidence interval (default = 0.025) u_ci numeric unit upper confidence interval (default = 0.975) title_label string plot title. (default = \"Posterior Density Plots Mean 95% CI\")","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/posterior_densities_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a plot of the posterior density distributions of modeled parameters\nfrom brmsfit model — posterior_densities_plot","text":"ggplot2::ggplot object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/posterior_densities_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a plot of the posterior density distributions of modeled parameters\nfrom brmsfit model — posterior_densities_plot","text":"","code":"if (FALSE) {   posterior_densities_plot(     model = my_sigmoid_model,     predictors_col_name = \"predictors\",     half_max_label = \"ic50\",     l_ci = 0.025,     u_ci = 0.975,     title_label = \"Posterior Density Plots with Mean and 95% CI\") }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/posterior_draws_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of Posterior Model Fit Draws — posterior_draws_plot","title":"Plot of Posterior Model Fit Draws — posterior_draws_plot","text":"plot sample model fit draws     posterior distribution expected mean median     quantile intervals.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/posterior_draws_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of Posterior Model Fit Draws — posterior_draws_plot","text":"","code":"posterior_draws_plot(   model,   newdata = NULL,   n = 50,   point_size = 0.75,   jitter_height = 0,   jitter_width = 0,   title = \"Dose-Response Posterior Draws\",   xlab = \"Log[Molar]\",   ylab = \"Response\" )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/posterior_draws_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of Posterior Model Fit Draws — posterior_draws_plot","text":"model brmsfit model. newdata data.frame newdata use predictions. Default data.frame predictor log-dose. n numeric value number draws observed (default = 50). point_size numeric. geom_jitter point size (default = 0.75). jitter_height numeric. height distance overlapping points (default = 0). jitter_width numeric. width distance overlapping points (default = 0). title character name plot (default = \"Dose-Response Posterior Draws\"). xlab character name x-axis label (default = \"Log[Molar]\"). ylab character name y-axis label (default = \"Response\").","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/posterior_draws_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of Posterior Model Fit Draws — posterior_draws_plot","text":"ggplot2::ggplot object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/posterior_draws_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of Posterior Model Fit Draws — posterior_draws_plot","text":"","code":"if (FALSE) {   # Consider a model named my_model and data named my_data with a column   # named predictors containing multiple different perturbations.   posterior_draws_plot(     model = my_model,     newdata = my_data,     predictors_col_name = \"predictors\",     lower = -12,     upper = -3,     n = 50,     facet_var = predictors,     jitter_width = 0.10,     title = \"Dose-Response Posterior Draws\",     xlab = \"Log[Molar]\",     ylab = \"Response\") }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare an init for a brms model — prepare_init","title":"Prepare an init for a brms model — prepare_init","text":"Prepare init brms model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare an init for a brms model — prepare_init","text":"","code":"prepare_init(init)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare an init for a brms model — prepare_init","text":"init function returning numeric array length one numeric value.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare an init for a brms model — prepare_init","text":"function returning numeric array length 1.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a brmsprior — prepare_prior","title":"Prepare a brmsprior — prepare_prior","text":"gives brms::prior(...) friends   1) allow just giving numeric value rather constant(<value>)   2) already brmsprior checks specified arguments","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a brmsprior — prepare_prior","text":"","code":"prepare_prior(prior, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a brmsprior — prepare_prior","text":"prior brmsprior numeric. ... additional arguments brms::prior_string(). prior brmsprior check slots given values.  prior numeric, arguments passed brms::prior_string","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a brmsprior — prepare_prior","text":"brmsprior","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare a brmsprior — prepare_prior","text":"used models want allow user specified priors make sure right parameters make sure model well specified.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prior_posterior_densities_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a plot of the prior & posterior density distributions of\nmodeled parameters from brmsfit model — prior_posterior_densities_plot","title":"Create a plot of the prior & posterior density distributions of\nmodeled parameters from brmsfit model — prior_posterior_densities_plot","text":"Plot prior posterior density distributions     parameter brmsfit model. prior posterior     density distributions displayed plot     color labeled.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prior_posterior_densities_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a plot of the prior & posterior density distributions of\nmodeled parameters from brmsfit model — prior_posterior_densities_plot","text":"","code":"prior_posterior_densities_plot(   model,   predictors_col_name = \"_Intercept\",   half_max_label = \"ec50\",   title_label = \"Prior Posterior Density\\n  Plots\" )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prior_posterior_densities_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a plot of the prior & posterior density distributions of\nmodeled parameters from brmsfit model — prior_posterior_densities_plot","text":"model brmsfit model. predictors_col_name string expression predictors column input data.frame (default = \"_Intercept\"). Predictors perturbations tested experiment (.e. Drug, Temperature, etc.). half_max_label string label half maximal fits type experiment done (.e. ec50, ic50, ed50, id50, ld50, etc.). title_label string plot title.  (default = \"Prior Posterior Density Plots\")","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prior_posterior_densities_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a plot of the prior & posterior density distributions of\nmodeled parameters from brmsfit model — prior_posterior_densities_plot","text":"ggplot2::ggplot object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prior_posterior_densities_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a plot of the prior & posterior density distributions of\nmodeled parameters from brmsfit model — prior_posterior_densities_plot","text":"","code":"if (FALSE) {   prior_posterior_densities_plot(     model = my_sigmoid_model,     predictors_col_name = \"predictors\",     half_max_response = \"ic50\",     title_label = \"Prior Posterior Density Plots\") }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Sigmoid Function — sigmoid","title":"Sigmoid Function — sigmoid","text":"Functional form sigmoid model.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigmoid Function — sigmoid","text":"","code":"sigmoid(ac50, hill, top, bottom, log_dose)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigmoid Function — sigmoid","text":"ac50 numeric, log_dose half maximal activity hill numeric, slope curve ac50 units response/log_dose top numeric, value maximal response positive slope, occurs log_dose = Inf, negative slope log_dose = -Inf bottom numeric, value minimal response positive slope, occurs log_dose = -Inf, negative slope log_dose = Inf log_dose numeric, evaluate response log base 10.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sigmoid Function — sigmoid","text":"numeric, response given log_dose parameters","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sigmoid Function — sigmoid","text":"","code":"if (FALSE) {  # Generate an agonist curve with an ec50 of 1 μM with the response  # normalized to [0, 1] over the range 100 nM to 10 μM with half-log steps  data <- data.frame(    log_dose = seq(-7, -5, length.out = 5)) |>      dplyr::mutate(        response = stats::rnorm(          n = length(log_dose),          mean = BayesPharma::sigmoid(            ac50 = -6,            hill = 1,            top = 1,            bottom = 0,            log_dose = log_dose),        sd = .2)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an agonist sigmoid formula for the brms model — sigmoid_agonist_formula","title":"Create an agonist sigmoid formula for the brms model — sigmoid_agonist_formula","text":"set-sigmoid dose response model formula define     non-linear model multilevel non-linear model     ec50, hill, top, , bottom     use Bayesian_model BRMS package.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an agonist sigmoid formula for the brms model — sigmoid_agonist_formula","text":"","code":"sigmoid_agonist_formula(predictors = 1, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an agonist sigmoid formula for the brms model — sigmoid_agonist_formula","text":"predictors Additional formula objects specify predictors non-linear parameters. .e. perturbations/experimental differences modeled separately? (Default: 1) random effect taken consideration? .e. cell number, plate number, etc. ... additional arguments brms::brmsformula","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an agonist sigmoid formula for the brms model — sigmoid_agonist_formula","text":"brmsformula","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an agonist sigmoid formula for the brms model — sigmoid_agonist_formula","text":"","code":"if (FALSE) {   # Data has a string column drug_id with drug identifiers   # Fit a separate model for each drug   BayesPharma::sigmoid_agonist_formula(predictors = 0 + drug_id)    # Data has a string column plate_id with plate identifiers   # Estimate the change in response for each plate relative to a global   # baseline.   BayesPharma::sigmoid_agonist_formula(predictors = plate_id)    # data has columns drug_id and plate_id   # fit a multilevel model where the drug effect depends on the plate   BayesPharma::sigmoid_agonist_formula(predictors = 0 + (drug_id|plate_id)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Create initialization for the agonist sigmoid model — sigmoid_agonist_init","title":"Create initialization for the agonist sigmoid model — sigmoid_agonist_init","text":"Creating initial values agonist sigmoid model     parameters can passed     sigmoid_agoninst_model.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create initialization for the agonist sigmoid model — sigmoid_agonist_init","text":"","code":"sigmoid_agonist_init(ec50 = -9, hill = 1, top = 1, bottom = 0)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create initialization for the agonist sigmoid model — sigmoid_agonist_init","text":"ec50 numeric numeric returning function units log_dose (default = -6, corresponding 1 μM hill numeric numeric returning function units response/log_dose (default = 1) top numeric units top (default = 1). bottom numeric units bottom (default = 0).","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create initialization for the agonist sigmoid model — sigmoid_agonist_init","text":"input brms::brm(init = ...)","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create initialization for the agonist sigmoid model — sigmoid_agonist_init","text":"","code":"if (FALSE) { #Consider an activator that has a max response around 50%, EC50 is estimated #to be around 1 nM, minimum response is known to be 0. init <- BayesPharma::sigmoid_agonist_init(   ec50 = -9,   top = 0.5) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Bayesian Growth Model — sigmoid_agonist_model","title":"Run Bayesian Growth Model — sigmoid_agonist_model","text":"additional information additional function arguments, reference:   <https://paul-buerkner.github.io/brms/reference/brm.html>     <https://rdrr.io/cran/rstan/man/stan.html> additional information additional function arguments, reference:   <https://paul-buerkner.github.io/brms/reference/brm.html>     <https://rdrr.io/cran/rstan/man/stan.html>","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Bayesian Growth Model — sigmoid_agonist_model","text":"","code":"sigmoid_agonist_model(   data,   formula = sigmoid_agonist_formula(),   prior = sigmoid_agonist_prior(),   init = sigmoid_agonist_init(),   iter = 8000,   control = list(adapt_delta = 0.99),   stanvar_function = sigmoid_stanvar,   expose_functions = TRUE,   ... )  sigmoid_agonist_model(   data,   formula = sigmoid_agonist_formula(),   prior = sigmoid_agonist_prior(),   init = sigmoid_agonist_init(),   iter = 8000,   control = list(adapt_delta = 0.99),   stanvar_function = sigmoid_stanvar,   expose_functions = TRUE,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Bayesian Growth Model — sigmoid_agonist_model","text":"data data.frame experimental data.  must contain columns response predictors specified formula. formula brmsformula object. create dose-response brmsformula, (default: BayesPharma::sigmoid_agonist_formula(). prior brmspriors data.frame ec50, hill, top, bottom. Use one priors functions provided create priors use .  (default: BayesPharma::sigmoid_agonist_prior() init initial values parameters modeled (default = BayesPharma::sigmoid_agonist_init() iter number iterations model runs. Increasing iter can help model convergence (default: 8000). control named list parameters control sampler's behavior.  Adding max_treedepth giving greater value 10 can improve model convergence (default: list(adapt_delta = 0.99)). stanvar_function stan code model (default: BayesPharma::sigmoid_stanvar) expose_functions boolean. Expose BayesPharma functions model [default: TRUE]. ... additional arguments passed brms::brm","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Bayesian Growth Model — sigmoid_agonist_model","text":"brmsfit object brmsfit object","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Bayesian Growth Model — sigmoid_agonist_model","text":"","code":"if (FALSE) {   BayesPharma::sigmoid_agonist_model(     data = data,     formula = BayesPharma::sigmoid_agonist_formula(predictors = 0 + drug)) } if (FALSE) {   BayesPharma::sigmoid_agonist_model(     data = data,     formula = BayesPharma::sigmoid_agonist_formula(predictors = 0 + drug)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Default priors for the sigmoid agonist model — sigmoid_agonist_prior","title":"Default priors for the sigmoid agonist model — sigmoid_agonist_prior","text":"Creates data.frame priors sigmoid agonist     model function arguments ec50, hill, top, bottom NULL, default normal distribution priors set. like set parameter constant, enter numeric value function argument. distribution options, reference <http://mc-stan.org/rstanarm/reference/priors.html#arguments>","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default priors for the sigmoid agonist model — sigmoid_agonist_prior","text":"","code":"sigmoid_agonist_prior(   ec50 = brms::prior(normal(-6, 2.5), nlpar = \"ec50\"),   hill = brms::prior(prior = normal(1, 1), nlpar = \"hill\", lb = -0.01),   top = brms::prior(normal(1, 0.5), nlpar = \"top\"),   bottom = brms::prior(prior = normal(0, 0.5), nlpar = \"bottom\"),   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default priors for the sigmoid agonist model — sigmoid_agonist_prior","text":"ec50 brmsprior numeric. Prior ec50 parameter.  Default: normal(-6, 2.5) mean -7 corresponds concentration 1e-6 1 μM. Setting ec50 numeric value constrains constant value. hill brmsprior numeric. Prior hill parameter. Default: normal(1, 1) lower bound -0.1. top brmsprior numeric. Prior top parameter.  Default: normal(1, 0.5). Setting top numeric value constrains constant value. bottom brmsprior numeric. Prior top parameter.  Default: normal(0, 0.5). Setting bottom numeric value constrains constant value. ... additional brmsprior objects.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default priors for the sigmoid agonist model — sigmoid_agonist_prior","text":"brmsprior  data.frame","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default priors for the sigmoid agonist model — sigmoid_agonist_prior","text":"","code":"if (FALSE) { # Consider an activator that has a max response around 50%, EC50 is estimated # to be around 1 nM, and minimum response is known to be 0. priors <- sigmoid_agonist_prior(   ec50 = brms::prior(normal(-9, 0.5), nlpar = \"ec50\"),   inhibitor = FALSE,   top = brms::prior(normal(0.5, 0.2), nlpar = \"top\"),   bottom = 0) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an antagonist sigmoid formula for the brms model — sigmoid_antagonist_formula","title":"Create an antagonist sigmoid formula for the brms model — sigmoid_antagonist_formula","text":"set-sigmoid dose response model formula define     non-linear model multilevel non-linear model     ic50, hill, top, , bottom     use Bayesian_model BRMS package.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an antagonist sigmoid formula for the brms model — sigmoid_antagonist_formula","text":"","code":"sigmoid_antagonist_formula(predictors = 1, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an antagonist sigmoid formula for the brms model — sigmoid_antagonist_formula","text":"predictors Additional formula objects specify predictors non-linear parameters. .e. perturbations/experimental differences modeled separately? (Default: 1) random effect taken consideration? .e. cell number, plate number, etc. ... additional arguments brms::brmsformula","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an antagonist sigmoid formula for the brms model — sigmoid_antagonist_formula","text":"brmsformula","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an antagonist sigmoid formula for the brms model — sigmoid_antagonist_formula","text":"","code":"if (FALSE) {   # Data has a string column drug_id with drug identifiers   # Fit a separate model for each drug   BayesPharma::sigmoid_antagonist_formula(predictors = 0 + drug_id)    # Data has a string column plate_id with plate identifiers   # Estimate the change in response for each plate relative to a global   # baseline.   BayesPharma::sigmoid_antagonist_formula(predictors = plate_id)    # data has columns drug_id and plate_id   # fit a multilevel model where the drug effect depends on the plate   BayesPharma::sigmoid_antagonist_formula(     predictors = 0 + (drug_id|plate_id)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Create initialization for the antagonist sigmoid model — sigmoid_antagonist_init","title":"Create initialization for the antagonist sigmoid model — sigmoid_antagonist_init","text":"Creating initial values sigmoid model parameters   can passed sigmoid_antagonist_model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create initialization for the antagonist sigmoid model — sigmoid_antagonist_init","text":"","code":"sigmoid_antagonist_init(ic50 = -9, hill = -1, top = 1, bottom = 0)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create initialization for the antagonist sigmoid model — sigmoid_antagonist_init","text":"ic50 numeric numeric returning function units log_dose (default = -6, corresponding 1e-6 = 1 μM) hill numeric numeric returning function units response/log_dose (default = -1) top numeric units top (default = 1). bottom numeric units bottom (default = 0).","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create initialization for the antagonist sigmoid model — sigmoid_antagonist_init","text":"input brms::brm(init = ...)","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create initialization for the antagonist sigmoid model — sigmoid_antagonist_init","text":"","code":"if (FALSE) { #Consider an inhibitor that has a min response around 50%, IC50 is estimated #to be around 1 nM, minimum response is known to be around 0, init <- BayesPharma::sigmoid_antagonist_init(   ec50 = -9,   bottom = 0.5) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Bayesian Sigmoid Antagonist Model — sigmoid_antagonist_model","title":"Run Bayesian Sigmoid Antagonist Model — sigmoid_antagonist_model","text":"additional information additional function arguments, reference:   <https://paul-buerkner.github.io/brms/reference/brm.html>     <https://rdrr.io/cran/rstan/man/stan.html> additional information additional function arguments, reference:   <https://paul-buerkner.github.io/brms/reference/brm.html>     <https://rdrr.io/cran/rstan/man/stan.html>","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Bayesian Sigmoid Antagonist Model — sigmoid_antagonist_model","text":"","code":"sigmoid_antagonist_model(   data,   formula = sigmoid_antagonist_formula(),   prior = sigmoid_antagonist_prior(),   init = sigmoid_antagonist_init(),   iter = 8000,   control = list(adapt_delta = 0.99),   stanvar_function = sigmoid_stanvar,   expose_functions = TRUE,   ... )  sigmoid_antagonist_model(   data,   formula = sigmoid_antagonist_formula(),   prior = sigmoid_antagonist_prior(),   init = sigmoid_antagonist_init(),   iter = 8000,   control = list(adapt_delta = 0.99),   stanvar_function = sigmoid_stanvar,   expose_functions = TRUE,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Bayesian Sigmoid Antagonist Model — sigmoid_antagonist_model","text":"data data.frame experimental data.  must contain columns sponse predictors specified formula. formula brmsformula object. create dose-response brmsformula, (default: BayesPharma::sigmoid__formula(). prior brmspriors data.frame ec50, hill, top, bottom.  Use one priors functions provided create priors use .  (default: BayesPharma::sigmoid_antagonist_prior() init initial values parameters modeled (default = BayesPharma::sigmoid_antagonist_init() iter number iterations model runs. Increasing iter can help model convergence (default: 8000). control named list parameters control sampler's behavior.  Adding max_treedepth giving greater value 10 can improve model convergence (default: list(adapt_delta = 0.99)). stanvar_function stan code model (default: BayesPharma::sigmoid_stanvar) expose_functions boolean. Expose BayesPharma functions model [default: TRUE]. ... additional arguments passed brms::brm","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Bayesian Sigmoid Antagonist Model — sigmoid_antagonist_model","text":"brmsfit object brmsfit object","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Bayesian Sigmoid Antagonist Model — sigmoid_antagonist_model","text":"","code":"if (FALSE) {   sigmoid_antagonist_model(data,    formula = sigmoid_antagonist_formula(predictors = 0 + drug)) } if (FALSE) {   sigmoid_antagonist_model(data,    formula = sigmoid_antagonist_formula(predictors = 0 + drug)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Default priors for the sigmoid antagonist model — sigmoid_antagonist_prior","title":"Default priors for the sigmoid antagonist model — sigmoid_antagonist_prior","text":"Creates data.frame priors sigmoid antagonist     model function arguments ic50, hill, top, bottom = NULL, default normal distribution priors set. like set parameter constant, enter numeric value function argument. distribution options, reference <http://mc-stan.org/rstanarm/reference/priors.html#arguments>","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default priors for the sigmoid antagonist model — sigmoid_antagonist_prior","text":"","code":"sigmoid_antagonist_prior(   ic50 = brms::prior(normal(-6, 2.5), nlpar = \"ic50\"),   hill = brms::prior(prior = normal(-1, 1), nlpar = \"hill\", ub = 0.01),   top = brms::prior(normal(1, 0.5), nlpar = \"top\"),   bottom = brms::prior(prior = normal(0, 0.5), nlpar = \"bottom\"),   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default priors for the sigmoid antagonist model — sigmoid_antagonist_prior","text":"ic50 brmsprior numeric. Prior ec50 parameter.  Default: normal(-6, 2.5) mean -6 corresponds concentration 1e-6 1 μM. Setting ic50 numeric value constrains constant value. hill brmsprior numeric. Prior hill parameter. Default: normal(-1, 1) upper bounded 0.1. top brmsprior numeric. Prior top parameter.  Default: normal(1, 0.5). Setting top numeric value constrains constant value. bottom brmsprior numeric. Prior top parameter.  Default: normal(0, 0.5). Setting bottom numeric value constrains constant value. ... additional brmsprior objects.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default priors for the sigmoid antagonist model — sigmoid_antagonist_prior","text":"brmsprior  data.frame","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default priors for the sigmoid antagonist model — sigmoid_antagonist_prior","text":"","code":"if (FALSE) { # Consider an activator that has a max response around 50%, EC50 is estimated # to be around 1 μM, and minimum response is known to be 0. priors <- sigmoid_antagonist_prior(   ic50 = brms::prior(normal(-6, 0.5), nlpar = \"ic50\"),   top = brms::prior(normal(0.5, 0.5), nlpar = \"top\"),   bottom = 0) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan code for the sigmoid function. — sigmoid_stanvar","title":"Stan code for the sigmoid function. — sigmoid_stanvar","text":"Stan code sigmoid function.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan code for the sigmoid function. — sigmoid_stanvar","text":"","code":"sigmoid_stanvar"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_stanvar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Stan code for the sigmoid function. — sigmoid_stanvar","text":"object class stanvars length 1.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_stanvar.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stan code for the sigmoid function. — sigmoid_stanvar","text":"stanvar script sigmoid dose response equation.  log     dose greater negative infinity (dose greater 0),     sigmoid dose response equation used. ac50 half     maximal response, hill slope, top maximum     response, bottom minimum response. log dose     equal negative infinity (dose equal 0), hill     positive, bottom value returned. hill     negative, top value returned.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Define formula for the tQ enzyme kinetics model — tQ_formula","title":"Define formula for the tQ enzyme kinetics model — tQ_formula","text":"Define formula tQ enzyme kinetics model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define formula for the tQ enzyme kinetics model — tQ_formula","text":"","code":"tQ_formula(predictors = 1, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define formula for the tQ enzyme kinetics model — tQ_formula","text":"predictors predictors kcat kM. ... additional arguments passed brms::brmsformula","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize parameter values for the tQ enyzme kinetic model — tQ_init","title":"Initialize parameter values for the tQ enyzme kinetic model — tQ_init","text":"Initialize parameter values tQ enyzme kinetic model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize parameter values for the tQ enyzme kinetic model — tQ_init","text":"","code":"tQ_init(kcat = 4, kM = 4)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize parameter values for the tQ enyzme kinetic model — tQ_init","text":"kcat numeric initial value kcat parameter tQ model (Default 4) kM numeric initial value kM parameter tQ model (default 4)","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize parameter values for the tQ enyzme kinetic model — tQ_init","text":"input BayesPharma::model_tQ(init = ...) parameter.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model for the tQ enzyme kinetics model — tQ_model","title":"Model for the tQ enzyme kinetics model — tQ_model","text":"Model tQ enzyme kinetics model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model for the tQ enzyme kinetics model — tQ_model","text":"","code":"tQ_model(   data,   formula = tQ_formula(),   prior = tQ_prior(),   init = tQ_init(),   iter = 8000,   control = list(adapt_delta = 0.99),   expose_functions = TRUE,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model for the tQ enzyme kinetics model — tQ_model","text":"data data.frame experimental data. must contain columns response predictors specified formula. formula brmsformula object. create dose-response brmsformula, use tQ_formula function. prior brmspriors data.frame kcat, kM. Use one priors functions provided create priors use . init list lists, numeric value, \"random\" initial values parameters modeled (default = 0). iter number iterations model runs. Increasing iter can help model convergence (default = 8000). control named list parameters control sampler's behavior. Adding max_treedepth giving greater value 10 can improve model convergence (default = list(adapt_delta = 0.99)). expose_functions boolean. Expose BayesPharma functions model [default: TRUE]. ... additional arguments passed brms::brm.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model for the tQ enzyme kinetics model — tQ_model","text":"brmsfit model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model_generate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data from the total QSSA model for enzyme kinetics — tQ_model_generate","title":"Generate data from the total QSSA model for enzyme kinetics — tQ_model_generate","text":"Simulate data total QSSA model refinement classical Michaelis-Menten enzyme kinetics ordinary differential equation described (Choi, et al., 2017, DOI: 10.1038/s41598-017-17072-z). Consider kinetic rate equation","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model_generate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data from the total QSSA model for enzyme kinetics — tQ_model_generate","text":"","code":"tQ_model_generate(time, kcat, kM, ET, ST, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model_generate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data from the total QSSA model for enzyme kinetics — tQ_model_generate","text":"time numeric vector. Increasing time points kcat numeric value catalytic rate constant kM numeric value Michaelis rate constant ET numeric value total enzyme concentration ST numeric value total substrate concentration ... additional arguments deSolve::ode","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model_generate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data from the total QSSA model for enzyme kinetics — tQ_model_generate","text":"run tQ ordinary differential equation forwards starting     initial product concentration 0 specified kcat     kM parameters specified time steps.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model_generate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate data from the total QSSA model for enzyme kinetics — tQ_model_generate","text":"kf                  --->    kcat           E + S  <---  C --->  E + P                   kb free enzyme (E) reversibly binds stubstrate (S) form complex (C) forward backward rate constants kf kb, irreversibly catalyzed product (P), rate constant kcat, releasing enzyme catalyze additional substrate. total enzyme concentration defined ET := E + C. total substrate product concentration defined ST := S + C + P. Michaelis constant defined kM := (kb + kcat) / kf. kcat rate constant determines maximum turn saturating substrate concentrations, Vmax := kcat * ET. rate constants kcat kM can estimated monitoring product accumulation time (enzyme progress curves), varying enzyme substrate concentrations. (Choi, et al, 2017, equation 2, total quasi-steady-state approximation (tQ) differential equation defined Observed data:      M     = number measurements        # number measurements      t[M]  = time                          # measured seconds      Pt[M] = product                       # product produced time t      ST    = substrate total concentration # specified experiment      ET    = enzyme total concentration    # specified experiment Model parameters:     kcat    # catalytic constant (min^-1)     kM      # Michaelis constant () ODE formulation:     dPdt = kcat * (              ET + kM + ST - Pt +              -sqrt((ET + kM + ST - Pt)^2 - 2 * ET * (ST - Pt))) / 2 initial condition:      P := 0 (Choi, et al. 2017) prove, tQ model valid K/(2*ST) * (ET+kM+ST) / sqrt((ET+kM+ST+P)^2 - 4*ET(ST-P)) << 1, K = kb/kf dissociation constant.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Define priors for the tQ enzyme kinetics model — tQ_prior","title":"Define priors for the tQ enzyme kinetics model — tQ_prior","text":"Default priors gamma(4, 1) kcat kM. use gamma distribution naturally lower bounded 0. first parameter shape, alpha=4, second rate, beta=1. mean gamma distributions alpha/beta variance alpha/beta^2.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define priors for the tQ enzyme kinetics model — tQ_prior","text":"","code":"tQ_prior(kcat = NULL, kM = NULL)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define priors for the tQ enzyme kinetics model — tQ_prior","text":"kcat prior kcat parameter (Default: NULL). Given numeric value, used constant estimated. kM prior kM parameter (Default: NULL). Given numeric value, used constant estimated.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"stanvar for the tQ enzyme kinetics model — tQ_stanvar","title":"stanvar for the tQ enzyme kinetics model — tQ_stanvar","text":"stanvar tQ enzyme kinetics model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stanvar for the tQ enzyme kinetics model — tQ_stanvar","text":"","code":"tQ_stanvar"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_stanvar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"stanvar for the tQ enzyme kinetics model — tQ_stanvar","text":"object class stanvars length 1.","code":""}]
