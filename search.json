[{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_KOR.html","id":"sec-hill","dir":"Articles","previous_headings":"","what":"Hill Equation","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"case study going reanalyze dose response 4 Kappa Opioid receptor (KOR) antagonists using package study done Margolis et al.Â (-@Margolis2020-bm). Whole cell electrophysiology acute rat midbrain slices used evaluate pharmacological properties four novel KOR antagonists: BTRX-335140, BTRX-395750, PF-04455242, JNJ-67953964 Originally paper dose-response data analysis done using package R implements minimization negative log likelihood function reduces least square estimation continuous response. data normalized % baseline fit 4-parameter log-logistic dose response model, setting top (max response) 100% estimating IC50, variance, bottom (min response).","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_KOR.html","id":"fitting-the-sigmoid-model","dir":"Articles","previous_headings":"Hill Equation","what":"Fitting the sigmoid model","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"Using package, can re-fit sigmoid model negative slope, fixing top parameter response normalized -drug baseline. prior, going use normal distribution response values continuous. First, run analysis top (max response) parameter prior set constant value 100 top normalized default broad prior , parameters. Broad priors represent unbiased uncertainty provide opportunity extreme responses. level informativeness prior affect much influence prior model. information prior choice recommendations.","code":"kor_prior <- BayesPharma::sigmoid_antagonist_prior(top = 100) kor_prior ##            prior class coef group resp dpar  nlpar   lb   ub source ##  normal(-6, 2.5)     b                        ic50 <NA> <NA>   user ##    normal(-1, 1)     b                        hill <NA> 0.01   user ##    constant(100)     b                         top <NA> <NA>   user ##   normal(0, 0.5)     b                      bottom <NA> <NA>   user"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_KOR.html","id":"prior-predictive-checks","dir":"Articles","previous_headings":"Hill Equation > Fitting the sigmoid model","what":"Prior predictive checks","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"Following Bayesian workflow, fitting model, good check prior predictive distributions see compatible domain expertise. , running model, verify prior distributions cover plausible range values parameter. , want sample prior distributions adding argument function. use default response distribution model (). plot prior predictive distributions:  sample model NUTs Hamiltonian Monte Carlo, initialize parameters prior means help model convergence, using default values , , , .","code":"kor_sample_prior <- BayesPharma::sigmoid_model(   data = kor_antag |> dplyr::select(substance_id, log_dose, response),   formula = BayesPharma::sigmoid_antagonist_formula(),   prior = kor_prior,   init = BayesPharma::sigmoid_antagonist_init(),   sample_prior = \"only\") kor_sample_prior |>   BayesPharma::plot_density_distribution() kor_model <- BayesPharma::sigmoid_model(   data = kor_antag |> dplyr::select(substance_id, log_dose, response),   formula = BayesPharma::sigmoid_antagonist_formula(     predictors = 0 + substance_id),    prior = kor_prior,   init = BayesPharma::sigmoid_antagonist_init())"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_KOR.html","id":"analyzing-model-fit","dir":"Articles","previous_headings":"Hill Equation","what":"Analyzing model fit","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"generated model summary shows formula expected response sigmoid function log_dose four parameters, shared Gaussian distribution. parameter dependent substance_id. Since want fit separate model substance include indicate common intercept. consists data points posterior sampling done chains steps steps warm-. population effects parameter summarize marginal posterior distributions, well effective sample size bulk tail. gives indication sampling quality, ESS > samples good type model.","code":"##  Family: gaussian  ##   Links: mu = identity; sigma = identity  ## Formula: response ~ sigmoid(ic50, hill, top, bottom, log_dose)  ##          ic50 ~ 0 + substance_id ##          hill ~ 0 + substance_id ##          top ~ 0 + substance_id ##          bottom ~ 0 + substance_id ##    Data: data (Number of observations: 73)  ##   Draws: 4 chains, each with iter = 8000; warmup = 4000; thin = 1; ##          total post-warmup draws = 16000 ##  ## Population-Level Effects:  ##                                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## ic50_substance_idBTRX_335140      -8.84      0.20    -9.20    -8.40 1.00    14883     8873 ## ic50_substance_idBTRX_395750      -8.24      0.41    -8.92    -7.39 1.00    12333     5863 ## ic50_substance_idJNJ              -9.15      0.32    -9.78    -8.50 1.00    17511    10242 ## ic50_substance_idPF               -6.15      1.05    -7.64    -3.41 1.00     8649     6213 ## hill_substance_idBTRX_335140      -1.47      0.60    -2.89    -0.59 1.00    15340    10545 ## hill_substance_idBTRX_395750      -0.89      0.51    -2.24    -0.26 1.00    12763     6273 ## hill_substance_idJNJ              -1.01      0.51    -2.38    -0.41 1.00    15285    11508 ## hill_substance_idPF               -0.31      0.24    -0.88    -0.03 1.00     7904     4559 ## bottom_substance_idBTRX_335140    -0.00      0.50    -0.99     0.97 1.00    19984    11491 ## bottom_substance_idBTRX_395750     0.01      0.50    -0.97     1.00 1.00    19123    11247 ## bottom_substance_idJNJ            -0.01      0.50    -0.98     0.98 1.00    18940    11984 ## bottom_substance_idPF              0.00      0.50    -0.98     0.98 1.00    21351    12102 ## top_substance_idBTRX_335140      100.00      0.00   100.00   100.00   NA       NA       NA ## top_substance_idBTRX_395750      100.00      0.00   100.00   100.00   NA       NA       NA ## top_substance_idJNJ              100.00      0.00   100.00   100.00   NA       NA       NA ## top_substance_idPF               100.00      0.00   100.00   100.00   NA       NA       NA ##  ## Family Specific Parameters:  ##       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma    32.17      2.84    27.19    38.32 1.00    14690    10539 ##  ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_KOR.html","id":"traceplot","dir":"Articles","previous_headings":"Hill Equation > Analyzing model fit","what":"Traceplot","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"model ran without warning messages meaning parameter value problems MCMC conflicts. bulk tail ESS indicate high resolution stability. R-hat parameter equals shows chains mixed well indicating chains converged.","code":"kor_model |>   bayesplot::mcmc_trace()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_KOR.html","id":"compare-prior-and-posterior-marginal-distributions","dir":"Articles","previous_headings":"Hill Equation > Analyzing model fit","what":"Compare prior and posterior marginal distributions","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"Displayed plot prior posterior distributions parameters (prior pink posterior teal). can useful comparing density distribution prior posterior produced model:  Displayed plot posterior distributions parameter confidence intervals mean. useful visual model results highlight mode high density intervals:  Displayed plot sample 100 sigmoid dose-response curves posterior distribution (purple) median quantile intervals:","code":"BayesPharma::plot_prior_posterior_densities(   model = kor_model,   predictors_col_name = \"substance_id\",   half_max_label = \"ic50\",   title_label=\"\") BayesPharma::plot_posterior_density(   kor_model,    predictors_col_name = \"substance_id\",    half_max_label = \"ic50\",   title_label = \"\") BayesPharma::plot_posterior_draws(   model = kor_model,   title = \"\")"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_KOR.html","id":"comparing-alternative-models","dir":"Articles","previous_headings":"Hill Equation","what":"Comparing alternative models","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"test sensitivity analysis prior, can re-fit model informative prior: Re-fitting model","code":"##              prior class coef group resp dpar  nlpar   lb   ub source ##  normal(-8.5, 0.5)     b                        ic50 <NA> <NA>   user ##    normal(-1, 0.5)     b                        hill <NA> 0.01   user ##      constant(100)     b                         top <NA> <NA>   user ##     normal(10, 15)     b                      bottom <NA> <NA>   user"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_KOR.html","id":"comparing-the-two-models-using-loo-comparison","dir":"Articles","previous_headings":"","what":"Comparing the Two Models Using LOO-Comparison:","title":"Apply: Sigmoid Model -- KOR Antagonists","text":"One way evaluate quality model data-point, re-fit model remaining points, evaluate log probability point posterior distribution. Taking expectation across points give Expected Log Pointwise predictive Density (ELPD). Since computationally challenging re-fit model point, model fits data reasonably well, ELPD can approximated using Pareto smoothed importance sampling (PSIS). Using LOO, package, Pareto k value data point computed, k less good, OK, higher indicates data point fit model well. Evaluating model KOR antagonists, shows model fits data well. Since ELPD global measure model fit, can used compare models. Using LOO package, returns model relative model lowest ELPD. , model informative prior, preferred model, significantly. ##Analysis Using drc Package analyze KOR antagonist data using drc package compare results analysis. fix top fit , , . Displayed comparison results parameter dose-response curve. see Bayesian method provides distribution curve evidence smaller confidence intervals standard errors provided method.","code":"## No problematic observations found. Returning the original 'loo' object. ## NULL ## No problematic observations found. Returning the original 'loo' object. ##            elpd_diff se_diff ## kor_model2  0.0       0.0    ## kor_model  -0.8       1.2 drc_models <- kor_antag |>   dplyr::group_by(substance_id) |>   dplyr::group_nest() |>   dplyr::mutate(     model = data |>        purrr::map(~drc::drm(         response ~ log_dose,         data = .x,         fct = drc::L.4(fixed = c(NA, NA, 100, NA),         names = c(\"hill\", \"bottom\", \"top\", \"ic50\")))))  drc_models |>   dplyr::mutate(summary = purrr::map(model, broom::tidy, conf.int = TRUE)) |>   tidyr::unnest(summary) |>   dplyr::arrange(term, substance_id) |>   dplyr::select(-data, -model, -curve) ## # A tibble: 12 Ã 8 ##    substance_id term   estimate std.error statistic  p.value  conf.low conf.high ##    <chr>        <chr>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>     <dbl> ##  1 BTRX_335140  bottom     1.31    19.4      0.0675 9.47e- 1  -40.0        42.6  ##  2 BTRX_395750  bottom    29.5      9.40     3.14   7.85e- 3    9.20       49.8  ##  3 JNJ          bottom   -18.1     26.7     -0.681  5.04e- 1  -73.7        37.4  ##  4 PF           bottom    39.4     30.8      1.28   2.22e- 1  -27.0       106.   ##  5 BTRX_335140  hill       4.06     9.20     0.441  6.65e- 1  -15.5        23.7  ##  6 BTRX_395750  hill       9.82   164.       0.0600 9.53e- 1 -344.        364.   ##  7 JNJ          hill       1.17     0.580    2.02   5.69e- 2   -0.0378      2.38 ##  8 PF           hill       1.13     1.33     0.855  4.08e- 1   -1.73        4.00 ##  9 BTRX_335140  ic50      -8.91     0.308  -28.9    1.42e-14   -9.57       -8.26 ## 10 BTRX_395750  ic50      -8.97     0.505  -17.8    1.70e-10  -10.1        -7.88 ## 11 JNJ          ic50      -8.77     0.670  -13.1    2.89e-11  -10.2        -7.37 ## 12 PF           ic50      -7.96     1.27    -6.29   2.78e- 5  -10.7        -5.23 ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## â¹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_Pnear.html","id":"modeling-folding-funnels","dir":"Articles","previous_headings":"","what":"Modeling Folding Funnels","title":"Apply: Sigmoid Model -- Pnear Folding Funnel","text":"common task molecular modeling predict conformation folded state given molecular system. example, Rosetta ab initio, protein-protein-interface docking protocols. turn simulation prediction requires predicting relative free energy folded state relative reference. Rosetta score function can score individual conformations, doesnât capture free energy state. Typically, researcher run series trajectories generate score vs.Â RMSD plot look âfolding funnelâ e.g.Â lower energies conformations closer target folded state. , RMSD root-mean squared deviation measuring euclidean distance pairs atom defined application (example just backbone sequence design interface atoms docking).","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_Pnear.html","id":"pnear-score","dir":"Articles","previous_headings":"Modeling Folding Funnels","what":"Pnear score","title":"Apply: Sigmoid Model -- Pnear Folding Funnel","text":"quantify quality folding funnel, recently, interest using Pnear score, defined (RMSD[], score[]) score RMSD score values conformation . parameter lambda measured Angstroms indicating breadth Gaussian used define ânative-like-nessâ. bigger value, permissive calculation structures deviate native. Typical values peptides range 1.5 2.0, proteins 2.0 perhaps 4.0. finally parameter k_BT measured energy units, determines large energy gap must order sequence said favor native state. default value, 0.62, correspond physiological temperature ref2015 scorefunction units kcal/mol.","code":"Pnear = Sum_i[exp(-RMSD[i]^2/lambda^2)*exp(-score[i]/k_BT)] /         Sum_i[exp(-score[i]/k_BT)]"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_Pnear.html","id":"two-state-model","dir":"Articles","previous_headings":"Modeling Folding Funnels","what":"Two state model","title":"Apply: Sigmoid Model -- Pnear Folding Funnel","text":"Thinking folded unfolded states two-state model RSMD reaction coordinate âcollective variableâ, energy gap can modeled sigmoidal Boltzmann distribution.  principled molecular dynamics Monte Carlo simulation maintains detailed balance, theory possible use thermodynamic integration quantify energy gap two states. However, often computationally feasible proteins moderate size protein design screening context many different molecules need evaluated given limited computational budget. , Instead, assume least locally around folded state, degrees freedom increase exponentially log RMSD defines linear reaction coordinate. simulate, trajectory points sigmoid log(RMSD) scale, Normally distributed error can generate synthetic score-vs-rmsd plots  nice thing parametric model generate score-vs-rmsd plots, allows us measure measure sensitivity Pnear differently shaped score-vs-rmsd plots. example can scan radius  Another question can use model investigate reproducible Pnear score?","code":"## Warning in xkcd::theme_xkcd(): Not xkcd fonts installed! See ## vignette(\"xkcd-intro\") ## Warning in theme_xkcd(): Not xkcd fonts installed! See vignette(\"xkcd-intro\") ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## â¹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_Pnear.html","id":"antibody-snugdock-case-study","dir":"Articles","previous_headings":"","what":"Antibody SnugDock Case study","title":"Apply: Sigmoid Model -- Pnear Folding Funnel","text":"case study, can look real score-vs-rmsd plots Antibody SnugDock scientific benchmark. evaluates SnugDock protocol 6 Antibody protein targets can use fit sigmoid model log(RMSD) using BayesPharma package, relies BRMS Stan Check model parameter fit estimated parameters: Excitingly, using leave-one-cross-validation, sigmoid model fits data well Visualize fit draws expected mean median quantile intvervals log(RMSD) scale: original RMSD scale:","code":"##  Family: gaussian  ##   Links: mu = identity; sigma = identity  ## Formula: response ~ sigmoid(ec50, hill, top, bottom, log_dose)  ##          ec50 ~ 0 + target ##          hill ~ 0 + target ##          top ~ 0 + target ##          bottom ~ 0 + target ##    Data: data (Number of observations: 3003)  ##   Draws: 4 chains, each with iter = 4000; warmup = 2000; thin = 1; ##          total post-warmup draws = 8000 ##  ## Population-Level Effects:  ##                   Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## ec50_target1ahw       1.69      0.12     1.41     1.87 1.00     2877     1687 ## ec50_target1jps       1.38      0.12     1.09     1.59 1.00     5373     4239 ## ec50_target1mlc       2.40      0.52     0.99     3.20 1.00     3675     2475 ## ec50_target1ztx       0.75      0.08     0.58     0.89 1.00     5291     3796 ## ec50_target2aep       1.12      0.25     0.63     1.52 1.00     4585     2016 ## ec50_target2jel       1.65      0.06     1.53     1.76 1.00     6534     5151 ## hill_target1ahw       1.68      0.44     0.86     2.62 1.00     2528     1354 ## hill_target1jps       1.51      0.36     0.91     2.33 1.00     4332     3997 ## hill_target1mlc       1.03      0.56     0.25     2.30 1.00     3224     2761 ## hill_target1ztx       2.71      0.55     1.74     3.89 1.00     6396     5073 ## hill_target2aep       2.00      0.65     0.78     3.36 1.00     2210      725 ## hill_target2jel       3.20      0.59     2.11     4.44 1.00     7223     4963 ## top_target1ahw      -10.55      0.71   -11.57    -8.76 1.00     3500     2136 ## top_target1jps       -9.70      0.57   -10.62    -8.36 1.00     5663     4538 ## top_target1mlc       -1.19      5.99    -9.92    12.37 1.00     6721     4782 ## top_target1ztx      -17.44      0.28   -17.99   -16.88 1.00     9559     5237 ## top_target2aep      -16.32      0.57   -16.96   -15.49 1.00     2266      813 ## top_target2jel      -11.10      0.34   -11.76   -10.41 1.00    10085     5363 ## bottom_target1ahw   -26.09      2.40   -32.02   -23.13 1.00     2482     1411 ## bottom_target1jps   -30.32      3.60   -39.13   -24.93 1.00     4782     3868 ## bottom_target1mlc   -18.50      4.45   -32.03   -14.78 1.00     3071     2067 ## bottom_target1ztx   -38.86      3.51   -46.78   -32.98 1.00     5433     4085 ## bottom_target2aep   -30.29      5.95   -44.48   -21.19 1.00     5739     4435 ## bottom_target2jel   -19.48      0.99   -21.59   -17.75 1.00     6529     4573 ##  ## Family Specific Parameters:  ##       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma     5.74      0.08     5.60     5.90 1.00    11394     5840 ##  ## Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). ##  ## Computed from 8000 by 3003 log-likelihood matrix ##  ##          Estimate   SE ## elpd_loo  -9521.2 39.0 ## p_loo        21.4  1.1 ## looic     19042.5 77.9 ## ------ ## Monte Carlo SE of elpd_loo is 0.1. ##  ## All Pareto k estimates are good (k < 0.5). ## See help('pareto-k-diagnostic') for details."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/apply_sigmoid_model_Pnear.html","id":"quantify-pnear-uncertainty","dir":"Articles","previous_headings":"Antibody SnugDock Case study","what":"Quantify Pnear uncertainty","title":"Apply: Sigmoid Model -- Pnear Folding Funnel","text":"Using two-state model fit, possible propagate posterior uncertainty estimate uncertainty Pnear.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_MuSyC_model.html","id":"sec-MuSyC","dir":"Articles","previous_headings":"","what":"MuSyC synergy model","title":"Derive: MuSyC Model -- Synergy Analysis","text":"two different treatments combined may interact cause response. end-point assays, response stronger weaker expected additive model, treatments said epistatic. sigmoidal dose-response models, however, analysis may complicated. One drug may may shift maximal response (efficacy) , may also shift effective dose shape response (potency). Historically range models proposed capture different aspects synergy, example Bliss independence Loewe additivity null-models synergistic efficacy potency, respectively. R package python package can used visualize treatment interactions, compute range synergy scores, test interactions significant. Recently Meyer et al. derived integrated functional synergistic sigmoidal dose-response, Loewe Bliss models special cases. implemented Bayesian model-fitting strategy Matlab, maximum likelihood model-fitting synergy python package. make model accessible pharmacology community, section, briefly review MuSyC functional form, describe Bayesian implementation Stan/BRMS, illustrate using model re-analyze drugs voltage may interact modulate current potassium channel.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_MuSyC_model.html","id":"musyc-functional-form","dir":"Articles","previous_headings":"MuSyC synergy model","what":"MuSyC Functional Form","title":"Derive: MuSyC Model -- Synergy Analysis","text":"functional form MuSyC model gives equation response \\(\\color{brown}{E_d}\\) doses \\(\\color{teal}{d_1}\\) \\(\\color{teal}{d_2}\\) two treatments \\(9\\) free parameters \\(\\color{purple}{C_1}\\), \\(\\color{purple}{C_2}\\), \\(\\color{brown}{E_0}\\), \\(\\color{brown}{E_1}\\), \\(\\color{brown}{E_2}\\), \\(\\color{brown}{E_3}\\), \\(\\color{purple}{h_1}\\), \\(\\color{purple}{h_2}\\), \\(\\color{purple}{\\alpha}\\): \\[\\begin{align} \\color{brown}{E_d} &= \\frac{           {\\color{purple}{C_1}}^{\\color{purple}{h_1}}{\\color{purple}{C_2}}^{\\color{purple}{h_2}}{\\color{brown}{E_0}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}{\\color{purple}{C_2}}^{\\color{purple}{h_2}}{\\color{brown}{E_1}} +           {\\color{purple}{C_1}}^{\\color{purple}{h_1}}{\\color{teal}{d_2}}^{\\color{purple}{h_2}}{\\color{brown}{E_2}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}{\\color{teal}{d_2}}^{\\color{purple}{h_2}}{\\color{purple}{\\alpha}} {\\color{brown}{E_3}}        }{           {\\color{purple}{C_1}}^{\\color{purple}{h_1}}{\\color{purple}{C_2}}^{\\color{purple}{h_2}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}{\\color{purple}{C_2}}^{\\color{purple}{h_2}} +           {\\color{purple}{C_1}}^{\\color{purple}{h_1}}{\\color{teal}{d_2}}^{\\color{purple}{h_2}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}{\\color{teal}{d_2}}^{\\color{purple}{h_2}}{\\color{purple}{\\alpha}}} \\end{align}\\] interpret parameters set \\(\\color{teal}{d_2}=0\\), \\[\\begin{align} \\color{brown}{E_d} &= \\frac{           {\\color{purple}{C_1}}^{\\color{purple}{h_1}}{\\color{brown}{E_0}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}{\\color{brown}{E_1}}        }{           {\\color{purple}{C_1}}^{\\color{purple}{h_1}} +           {\\color{teal}{d_1}}^{\\color{purple}{h_1}}} \\end{align}\\] Hill equation, modeled \\(\\ref{sec:hill}\\). additionally set \\(\\color{teal}{d_1}=0\\) \\(\\color{brown}{E_d}=\\color{brown}{E_0}\\), limit \\({\\color{teal}{d_1}}\\rightarrow \\infty\\) \\({\\color{brown}{E_d}}\\rightarrow {\\color{brown}{E_1}}\\), \\({\\color{teal}{d_1}}=\\color{purple}{C_1}\\) \\({\\color{brown}{E_d}} = ({\\color{brown}{E_0}} + {\\color{brown}{E_2}})/2\\), half maximal response (either \\(\\color{brown}{\\mbox{IC}_{50}}\\) treatment \\(1\\) inhibitor \\(\\color{brown}{\\mbox{EC}_{50}}\\) treatment \\(1\\) agonist). slope \\({\\color{teal}{d_1}}={\\color{purple}{C_1}}\\) \\[\\begin{align*}     \\frac{\\mathrm{d}\\;\\color{brown}{E_d}}{\\mathrm{d}\\color{teal}{d_1}}         &= {\\color{purple}{C_1}}^{v}{\\color{brown}{E_0}}               \\frac{\\mathrm{d}}{\\mathrm{d}\\color{teal}{d_1}}                   \\frac{1}{{\\color{purple}{C_1}}^{\\color{purple}{h_1}} + {\\color{teal}{d_1}}^{\\color{purple}{h_1}}} +            {\\color{brown}{E_1}}               \\frac{\\mathrm{d}}{\\mathrm{d}\\color{teal}{d_1}}                    \\frac{{\\color{teal}{d_1}}^{h_1}}{{\\color{purple}{C_1}}^{\\color{purple}{h_1}} + {\\color{teal}{d_1}}^{\\color{purple}{h_1}}}\\\\         &= {\\color{purple}{C_1}}^{h_1}{\\color{brown}{E_0}}               \\frac{                          h_1{\\color{teal}{d_1}}^{{\\color{purple}{h_1}}-1}}{\\left({\\color{purple}{C_1}}^{\\color{purple}{h_1}} + {\\color{teal}{d_1}}^{\\color{purple}{h_1}}\\right)^2} +             {\\color{brown}{E_1}}                \\frac{{\\color{purple}{C_1}}^{\\color{purple}{h_1}}h_1{\\color{teal}{d_1}}^{{\\color{purple}{h_1}}-1}}{\\left({\\color{purple}{C_1}}^{\\color{purple}{h_1}} + {\\color{teal}{d_1}}^{\\color{purple}{h_1}}\\right)^2}\\\\         &= ({\\color{brown}{E_0}} + {\\color{brown}{E_1}}) \\end{align*}\\] evaluation functional form \\({\\color{brown}{E_d}}\\) numerically unstable. transform using \\(\\mbox{log\\_sum\\_exp}\\) trick, let \\[\\begin{align*} \\mbox{numerator\\_parts} = [\\\\       &{\\color{purple}{h_1}}\\log({\\color{purple}{C_1}}) + {\\color{purple}{h_2}}\\log({\\color{purple}{C_2}}) + \\log({\\color{brown}{E_0}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{teal}{d_1}}) + {\\color{purple}{h_2}}\\log({\\color{purple}{C_2}}) + \\log({\\color{brown}{E_1}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{purple}{C_1}}) + {\\color{purple}{h_2}}\\log({\\color{teal}{d_2}}) + \\log({\\color{brown}{E_2}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{teal}{d_1}}) + {\\color{purple}{h_2}}\\log({\\color{teal}{d_2}}) + \\log({\\color{brown}{E_3}}) + \\log({\\color{purple}{\\alpha}}) ]\\\\ \\mbox{denominator\\_parts} = [\\\\       &{\\color{purple}{h_1}}\\log({\\color{purple}{C_1}}) + {\\color{purple}{h_2}}\\log({\\color{purple}{C_2}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{teal}{d_1}}) + {\\color{purple}{h_2}}\\log({\\color{purple}{C_2}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{purple}{C_1}}) + {\\color{purple}{h_2}}\\log({\\color{teal}{d_2}}),\\\\       &{\\color{purple}{h_1}}\\log({\\color{teal}{d_1}}) + {\\color{purple}{h_2}}\\log({\\color{teal}{d_2}})]\\\\ \\end{align*}\\] \\[     E_d = \\mbox{exp}\\!\\left(\\mbox{log\\_sum\\_exp}(\\mbox{numerator\\_parts}) - \\mbox{log\\_sum\\_exp}(\\mbox{denominator\\_parts})\\right). \\]","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_MuSyC_model.html","id":"implementation-and-usage-of-the-musyc-model-in-stanbrms","dir":"Articles","previous_headings":"MuSyC synergy model","what":"Implementation and usage of the MuSyC model in Stan/BRMS","title":"Derive: MuSyC Model -- Synergy Analysis","text":"#â Drug Synergy #â MuSyC Drug Synergy model #â #â Assume response metric decreases effective drugs #â Let E3 effect maximum concentration drugs #â #â #â Special cases: #â * dose additive model: alpha1 = alpha2 = 0 #â * loewe: h1 = h2 = 1 #â * CI: E0 = 1, E1 = E2 = E3 = 0 #â drug effect equated percent inhibition #â * bliss drug independence model: #â E0 = 1, E1 = E2 = E3 = 0, alpha1 = alpha2 = 1 #â (param?) d1 Dose drug 1 #â (param?) d2 Dose drug 2 #â #â (param?) E0 effect drug treatment #â #â # params drug 1 self #â (param?) s1 drug 1 hill slope #â (param?) C1 drug 1 EC50 #â (param?) E1 drug 1 maximum effect #â #â # params drug 2 self #â (param?) s2 drug 2 hill slope #â (param?) C2 drug 2 EC50 #â (param?) E2 drug 2 maximum effect #â #â (param?) beta synergistic efficacy #â percent increase drug combinationâs effect #â beyond efficacious single drug. #â #â beta > 0 => synergistic efficacy #â effect maximum concentration drugs (E3) exceeds #â maximum effect either drug alone (E1 E2) #â #â beta < 0 => antagonistic efficacy #â least one drugs efficacious #â single agents combination #â #â (param?) alpha1 synergistic potency #â effective dose drug 1 #â altered presence drug 2 #â (param?) alpha2 synergistic potency #â effective dose drug 2 #â altered presence drug 1 #â #â alpha > 1 => synergistic potency #â EC50 decreases addition drug, #â corresponding increase potency #â #â 0 <= alpha < 1 => antagonistic potency #â EC50 drug increases result drug, #â corresponding decrease potency #â #â alpha1 == alpha2 detailed balance #â (export?) generate_MuSyC_effects <- function( d1, d2, E0, s1, C1, E1, s2, C2, E2, alpha, E3) { h1 <- MuSyC_si_to_hi(s1, C1, E0, E1) h2 <- MuSyC_si_to_hi(s2, C2, E0, E2) numerator <- C1^h1 * C2^h2 * E0 + d1^h1 * C2^h2 * E1 + C1^h1 * d2^h2 * E2 + d1^h1 * d2^h2 * E3 * alpha denominator <- C1^h1 * C2^h2 + d1^h1 * C2^h2 + C1^h1 * d2^h2 + d1^h1 * d2^h2 * alpha numerator / denominator } #â Create formula MuSyC synergy model #â #â (description?) setup defaulMuSyC synergy model formula predict #â E0, C1, E1, s1, C2, E2, s2, log10alpha, E3alpha #â parameters. #â #â (param?) predictors Additional formula objects specify predictors #â non-linear parameters. .e.Â perturbations/experimental differences #â modeled separately? (Default: 1) random effect taken #â consideration? .e.Â cell number, plate number, etc. #â (return?) brmsformula #â #â (examples?) #â #â #â (export?) MuSyC_formula <- function( predictors = 1, â¦) { } #â Fit MuSyC synergy model dose #â #â (param?) data data.frame experimental data #â columns: dose1, dose2, n_positive, count, [] #â (param?) group_vars quosures list #â dplyr::vars(â¦) columns fitting synergy model #â (param?) C1_prior prior distribution Ed d1=d1_IC50, d2=0 #â (param?) C2_prior prior distribution Ed d1=0, d2=d2_IC50 #â (param?) s1_prior prior distribution d(Ed)/d(d1) d1=d1_IC50, d2=0 #â (param?) s2_prior prior distribution d(Ed)/d(d2) d1=0, d2=d2_IC50 #â (param?) log10alpha_prior prior distribution alpha synergy parameter #â (param?) E0_prior prior distribution Ed d1=0, d2=0 #â (param?) E1_prior prior distribution Ed d1=Inf, d2=0 #â (param?) E2_prior prior distribution Ed d1=0, d2=Inf #â (param?) E3_alpha_prior prior distribution Ed scaled alpha d1=Inf, #â d2=Inf #â (param?) C1_init initial sampling distribution C1 parameter #â (param?) C2_init initial sampling distribution C2 parameter #â (param?) s1_init initial sampling distribution s1 parameter #â (param?) s2_init initial sampling distribution s2 parameter #â (param?) log10alpha_init initial sampling distribution alpha parameter #â (param?) E0_init initial sampling distribution E0 parameter #â (param?) E1_init initial sampling distribution E1 parameter #â (param?) E2_init initial sampling distribution E2 parameter #â (param?) E3_alpha_init initial sampling distribution E3 parameter #â (param?) combine combine grouped models single brms model #â (param?) verbose verbose output #â #â (param?) iter number stan NUTS sampling steps #â (param?) cores number cores used sampling #â (param?) stan_model_args stan model arguments #â (param?) control stan control arguments #â #â #â #â bernoulli_inf(n_positive / count) = #â Ed ~ MuSyC(d1, d2, C_params, E_params, s_params, alpha) #â #â improve numeric stability, d1 d2 C1 C2 variables #â scaled improve numeric stability: #â #â d1 = dose1/max(dose1) #â d2 = dose2/max(dose2) #â drug1_IC50 = C1 * max(dose1) #â drug2_IC50 = C2 * max(dose2) #â #â Functional form: #â Ed ~ ( #â C1^h1 * C2^h2 * E0 + #â d1^h1 * C2^h2 * E1 + #â C1^h1 * d2^h2 * E2 + #â d1^h1 * d2^h2 * E3 * alpha #â ) / ( #â C1^h1 * C2^h2 + #â d1^h1 * C2^h2 + #â C1^h1 * d2^h2 + #â d1^h1 * d2^h2 * alpha #â ) #â #â #â #â #â #â ############################################## #â # Proof definitions parameters # #â ############################################## #â #â Claim: d1=0 d2=0 Ed = E0 #â Ed = (C1^h1 * C2^h2 * E0) / (C1^h1 * C2^h2) #â = E0 #â #â Claim: d1=0 d2 -> Inf Ed = E2 #â Ed = (C2^h2 * E0 + d2^h2 * E2) / (C2^h2 + d2^h2) #â = (d2^h2 * E2) / (d2^h2) #â = E2 #â #; Claim: d1=0 d2=C2 Ed = (E0 + E2) / 2 #â d1>0 d2 -> Inf Ed #â Ed = (C1^h1 * C2^h2 * E0 + C1^h1 * C2^h2 * E2) / #â (C1^h1 * C2^h2 + C1^h1 * C2^h2) #â = (E0 + E2) / 2 #â #â(export?) MuSyC_model <- function( data, group_vars = vars(compound), formula = MuSyC_formula(), prior = MuSyC_prior(), init = MuSyC_init(), combine = FALSE, verbose = FALSE, iter = 8000, cores = 4, stan_model_args = list(verbose = FALSE), control = list( adapt_delta = .99, max_treedepth = 12), model_evaluation_criteria = c(âlooâ, âbayes_R2â), â¦) { (.data.frame(well_scores)) { grouped_data <- well_scores |> dplyr::group_by(!!!group_vars) |> dplyr::mutate( d1_scale_factor = max(dose1), d2_scale_factor = max(dose2)) |> tidyr::nest() |> dplyr::ungroup() } (verbose) { cat(âFitting MuSyC modelâ) } model <- brms::brm_multiple( formula = formula, data = grouped_data$data, family = binomial(âidentityâ), prior = prior, init = init, # stanvars = c( # brms::stanvar( # scode = â real d1_scale_factor = max(dose1));â, # block =âtdataâ, # position = âendâ), # brms::stanvar( # scode = â real d2_scale_factor = max(dose2));â, # block =âtdataâ, # position = âendâ), # brms::stanvar( # scode = â real drug1_IC50 = b_C1 * d1_scale_factor);â, # block =âgenquantâ, # position = âendâ), # brms::stanvar( # scode = â real drug2_IC50 = b_C2 * d2_scale_factor;â, # block =âgenquantâ, # position = âendâ)), combine = FALSE, data2 = NULL, iter = iter, cores = cores, stan_model_args = stan_model_args, control = control, â¦) (!.null(model_evaluation_criteria)) { # evaluate fits model <- model |> purrr::imap(function(model, ) { group_index <- grouped_data[, ] |> dplyr::select(-data) group_index_label <- paste0( names(group_index), â:â, group_index, collapse = â,â) cat(âEvaluating model fit â, group_index_label, ââ¦â, sep = ââ) model <- model |> brms::add_criterion( criterion = model_evaluation_criteria, model_name = paste0(âMuSyC:â, group_index_label), reloo = TRUE) model }) } grouped_data |> dplyr::mutate( model = model) }","code":"predictor_eq <- rlang::new_formula(   lhs = quote(E0 + C1 + E1 + s1 + C2 + E2 + s2 + log10alpha + E3alpha),   rhs = rlang::enexpr(predictors))  brms::brmsformula(   response ~ (C1^h1 * C2^h2 * E0 +       d1^h1 * C2^h2 * E1 +       C1^h1 * d2^h2 * E2 +       d1^h1 * d2^h2 * E3alpha     ) / (       C1^h1 * C2^h2 +       d1^h1 * C2^h2 +       C1^h1 * d2^h2 +       d1^h1 * d2^h2 * 10^log10alpha),   brms::nlf(d1 ~ dose1 / d1_scale_factor),   brms::nlf(d2 ~ dose2 / d2_scale_factor),   brms::nlf(h1 ~ s1 * (4 * C1) / (E0 + E1)),   brms::nlf(h2 ~ s2 * (4 * C2) / (E0 + E2)),   predictors_eq,   nl = TRUE,   ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"enzyme-kinetic-modeling","dir":"Articles","previous_headings":"","what":"Enzyme Kinetic Modeling","title":"Derive: tQ Model -- Enzyme Kinetics","text":"Enzymes proteins catalyze chemical reactions. facilitate producing virtual biological matter, crucial regulating biological processes. early 20th century Michaelis Menten described foundational kinematic model enzymes, substrate enzyme reversibly bind, substrate converted product released. free enzyme (E) reversibly binds stubstrate (S) form complex (C) forward backward rate constants kf kb, irreversibly catalyzed product (P), rate constant kcat, releasing enzyme catalyze additional substrate. total enzyme concentration defined ET := E + C. total substrate product concentration defined ST := S + C + P. Michaelis constant defined kM := (kb + kcat) / kf. kcat rate constant determines maximum turn saturating substrate concentrations, Vmax := kcat * ET. rate constants kcat kM can estimated monitoring product accumulation time (enzyme progress curves), varying enzyme substrate concentrations. assuming enzyme concentration low (ET << ST), derived celebrated Michaelis-Menten kinetics. Since work, number groups developed models enzyme kinetics make less stringent assumptions. Recently (Choi, et al., 2017), described Bayesian model total QSSA model. make model accessible, re-implemented Stan/BRMS framework made available BayesPharma package.","code":"kf              --->     kcat       E + S  <---  C --->  E + P               kb"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"outline-for-vignette","dir":"Articles","previous_headings":"","what":"Outline for Vignette","title":"Derive: tQ Model -- Enzyme Kinetics","text":"Next formally define problem formulate model solution ordinary differential equation. illustrate, consider toy system assuming kcat kM known simulate sequence measurements using deSolve. implement ODE Stan/BRMS using stanvars show parameters toy system can estimated. Since common vary enzyme substrate concentrations order better estimate kinematic parameters, show can improve Stan/BRMS model allow multiple observations, arbitrary number measurements. finally, consider real enzyme kinetics data set use Stan/BRMS model estimate kinematic parameters. compare estimated parameters fit using standard approaches.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"problem-statement","dir":"Articles","previous_headings":"","what":"Problem Statement","title":"Derive: tQ Model -- Enzyme Kinetics","text":"Implement total QSSA model stan/BRMS, refinement classical Michaelis-Menten enzyme kinetics ordinary differential equation described (Choi, et al., 2017, DOI: 10.1038/s41598-017-17072-z). equation 2: (Choi, et al.Â 2017) prove, tQ model valid K = kb/kf dissociation constant.","code":"Observed data:   M     = number of measurements # The product concentration Pt is measured   t[M]  = time                   # at M time points t   Pt[M] = product                #    ST    = substrate total conc.  # Substrate and enzyme concentrations are   ET    = enzyme total conc.     # assumed to be given for each observation  Model parameters:   kcat    # catalytic constant   kM      # Michaelis constant  ODE formulation:   dPdt = kcat * (                # Change in product concentration at time t     ET + kM + ST - Pt +               -sqrt((ET + kM + ST - Pt)^2 - 2* ET * (ST - Pt))) / 2   initial condition:     P := 0                       # There is zero product at time 0 K/(2*ST) * (ET+kM+ST) / sqrt((ET+kM+ST+P)^2 - 4*ET(ST-P)) << 1,"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"simulate-one-observation","dir":"Articles","previous_headings":"","what":"Simulate one observation","title":"Derive: tQ Model -- Enzyme Kinetics","text":"Using deSolve package can simulate data following total QSSA model. Measurements made random Gaussian noise mean 0 variance 0.5. visualize, true enzyme progress curve shown blue, enzyme progress curve fit noisy measurements smooth loess spline shown orange. smooth fits well, estimate parameters curve .","code":"tQ_model_generate <- function(time, kcat, kM, ET, ST){   ode_tQ <- function(time, Pt, theta){     list(c(theta[1] * (       ET + theta[2] + ST - Pt +       -sqrt((ET + theta[2] + ST - Pt)^2 - 4 * ET * (ST - Pt))) / 2))   }   deSolve::ode(y = 0, times = time, func = ode_tQ, parms = c(kcat, kM)) }  data_single <- tQ_model_generate(   time = seq(0.00, 3, by=.05),   kcat = 3,   kM = 5,   ET = 10,   ST = 10) |>   as.data.frame() |>   dplyr::rename(P_true = 2) |>   dplyr::mutate(     P = rnorm(dplyr::n(), P_true, 0.5), # add some observational noise     ST = 10, ET = 10) head(data_single) ##   time    P_true         P ST ET ## 1 0.00 0.0000000 0.2510143 10 10 ## 2 0.05 0.7311578 0.1910932 10 10 ## 3 0.10 1.4243598 1.0847329 10 10 ## 4 0.15 2.0794197 2.5392382 10 10 ## 5 0.20 2.6964485 3.4791866 10 10 ## 6 0.25 3.2758537 2.8057035 10 10 ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## â¹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"fitting-a-single-ode-observation-in-brms","dir":"Articles","previous_headings":"","what":"Fitting a single ODE observation in BRMS","title":"Derive: tQ Model -- Enzyme Kinetics","text":"implement BRMS, can use stanvars define custom functions. key idea call ODE solver, case backward differentiation formula (bdf) used solve stiff ODEs, passing function ode_tQ returns dP/dt, change product time t. ode_tQ function depends product time t state vector, kinematic parameters estimated kcat kM user-provided data enzyme substrate concentrations ET ST. call ode_dbf pass initial product concentration time (equal zero), measured time-points, parameters user defied data. Finally , extract vector sampled vector product concentrations return. use function, define kcat kM parameters wish sample P ~ tQ(...). Since data points define single observation, set loop = FALSE. use gamma priors kcat kM shape parameter alpha=4 rate parameter beta=1. prior mean alpha/beta = 4/1 = 4 variance alpha/beta^2 = 4/1 = 4. also bound parameters 0. initialize chain prior mean use cmdstanr version 2.29.2 backend, use default warmup 1000 Fitting model takes ~15 seconds, Rhat = 1 effective sample size bulk tail greater 1400 parameters. estimates 95% confidence intervals good. visualize posterior distribution vs.Â prior distribution, first sample prior, using brms::brm call sample_prior = \"\" argument. plot, use tidybayes gather draws ggplot2 map curves, prior theorange curve, posterior blue curve, true parameter marked vertical line.  Next, plot prior posterior samples scatter plot. Note high correlation kcat kM parameters posterior. expected, typically better estimates require varying enzyme substrate concentrations.","code":"stanvars_tQ_ode <- brms::stanvar(scode = paste(\" vector tQ_ode(    real time,    vector state,    vector params,    data real ET,    data real ST) {        real Pt = state[1];   // product at time t    real kcat = params[1];    real kM = params[2];    vector[1] dPdt;    dPdt[1] = kcat * (      ET + kM + ST - Pt      -sqrt((ET + kM + ST - Pt)^2 - 4 * ET * (ST - Pt))) / 2;    return(dPdt); } \", sep = \"\\n\"), block = \"functions\") stanvars_tQ_single <- brms::stanvar(scode = paste(\" vector tQ_single(   data vector time,   vector vkcat,   vector vkM,   data vector vET,   data vector vST) {      vector[2] params = [ vkcat[1], vkM[1] ]';   vector[1] initial_state = [ 0.0 ]';   real initial_time = 0.0;   int M = dims(time)[1];    vector[1] P_ode[M] = ode_bdf(     // Function signature:     tQ_ode,                         // function ode     initial_state,                  // vector initial_state     initial_time,                   // real initial_time     to_array_1d(time),              // array[] real time     params,                         // vector params     vET[1],                         // ...     vST[1]);                        // ...      vector[M] P;                      // Need to return a vector not array   for(i in 1:M) P[i] = P_ode[i,1];   return(P); } \", sep = \"\\n\"), block = \"functions\") brms_params <- list(   cores = 4,   seed = 52L,   backend = 'cmdstanr') model_single <- do.call(what = brms::brm, args = c(list(   formula = brms::brmsformula(     P ~ tQ_single(time, kcat, kM, ET, ST),     kcat + kM ~ 1,     nl = TRUE,     loop=FALSE),   data = data_single |> dplyr::filter(time > 0),   prior = c(     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kcat\"),     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kM\")),   init = function() list(kcat = 4, kM = 4),   stanvars = c(     stanvars_tQ_ode,     stanvars_tQ_single)),   brms_params)) ## Start sampling ## Init values were only set for a subset of parameters.  ## Missing init values for the following parameters: ##  - chain 1: b_kcat, b_kM, sigma ##  - chain 2: b_kcat, b_kM, sigma ##  - chain 3: b_kcat, b_kM, sigma ##  - chain 4: b_kcat, b_kM, sigma ## Running MCMC with 4 parallel chains... ##  ## Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 2 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 4 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 1 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 3 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 2 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 4 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 3 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 1 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 2 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 4 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 1 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 3 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 2 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 4 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 1 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 3 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 4 finished in 16.5 seconds. ## Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 2 finished in 17.7 seconds. ## Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 3 finished in 17.8 seconds. ## Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 1 finished in 18.4 seconds. ##  ## All 4 chains finished successfully. ## Mean chain execution time: 17.6 seconds. ## Total execution time: 18.5 seconds. ##  Family: gaussian  ##   Links: mu = identity; sigma = identity  ## Formula: P ~ tQ_single(time, kcat, kM, ET, ST)  ##          kcat ~ 1 ##          kM ~ 1 ##    Data: structure(list(time = c(0.05, 0.1, 0.15, 0.2, 0.25 (Number of observations: 60)  ##   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ##          total post-warmup draws = 4000 ##  ## Population-Level Effects:  ##                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## kcat_Intercept     2.76      0.43     2.05     3.71 1.00     1269     1572 ## kM_Intercept       4.41      2.05     1.25     9.20 1.00     1269     1471 ##  ## Family Specific Parameters:  ##       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma     0.54      0.05     0.45     0.66 1.00     1660     1668 ##  ## Draws were sampled using sample(hmc). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). model_single_prior <- do.call(what = brms::brm, args = c(list(   formula = brms::brmsformula(     P ~ tQ_single(time, kcat, kM, ET, ST),     kcat + kM ~ 1,     nl = TRUE,     loop=FALSE),   data = data_single |> dplyr::filter(time > 0),   prior = c(     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kcat\"),     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kM\")),   init = function() list(kcat = 4, kM = 4),   stanvars = c(     stanvars_tQ_ode,     stanvars_tQ_single),   sample_prior = \"only\"),   brms_params)) ## Start sampling ## Init values were only set for a subset of parameters.  ## Missing init values for the following parameters: ##  - chain 1: b_kcat, b_kM, sigma ##  - chain 2: b_kcat, b_kM, sigma ##  - chain 3: b_kcat, b_kM, sigma ##  - chain 4: b_kcat, b_kM, sigma ## Running MCMC with 4 parallel chains... ##  ## Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 1 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 1 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 1 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 1 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 2 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 2 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 2 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 2 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 3 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 3 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 3 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 3 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 4 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 4 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 4 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 4 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 1 finished in 0.0 seconds. ## Chain 2 finished in 0.0 seconds. ## Chain 3 finished in 0.0 seconds. ## Chain 4 finished in 0.0 seconds. ##  ## All 4 chains finished successfully. ## Mean chain execution time: 0.0 seconds. ## Total execution time: 0.2 seconds."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/derive_tQ_model.html","id":"fitting-multiple-observations","dir":"Articles","previous_headings":"","what":"Fitting multiple observations","title":"Derive: tQ Model -- Enzyme Kinetics","text":"Next extend BRMS model allow fitting common kcat, kM concentrations based multiple replicas, varying substrate/enzyme concentrations using BRMS. demonstrate, varying enzyme substrate concentrations, better fit kinematic parameters.   Next sample enzyme progress curves posterior","code":"data_multiple <- tidyr::expand_grid(   kcat = 3,   kM =  5,   ET = c(3, 10, 30),   ST = c(3, 10, 30)) |>   dplyr::mutate(observation_index = dplyr::row_number()) |>   dplyr::rowwise() |>   dplyr::do({     data <- .     time <- seq(0.05, 3, by=.05)     data <- data.frame(data,       time = time,       P = tQ_model_generate(         time = time,         kcat = data$kcat,         kM = data$kM,         ET = data$ET,         ST = data$ST)[,2])   }) |>   dplyr::mutate(     P = rnorm(dplyr::n(), P, 0.5)) stanvars_tQ_multiple <- brms::stanvar(scode = paste(\" vector tQ_multiple(   array[] int replica,   data vector time,   vector vkcat,   vector vkM,   data vector vET,   data vector vST) {    int N = size(time);   vector[N] P;   int begin = 1;   int current_replica = replica[1];   for (i in 1:N){     if(current_replica != replica[i]){       P[begin:i-1] = tQ_single(         time[begin:i-1],         vkcat,         vkM,         vET[begin:i-1],         vST[begin:i-1]);       begin = i;       current_replica = replica[i];     }   }   P[begin:N] = tQ_single(time[begin:N], vkcat, vkM, vET[begin:N], vST[begin:N]);   return(P); }\", sep = \"\\n\"), block = \"functions\") model_multiple <- do.call(what = brms::brm, args = c(list(   formula = brms::brmsformula(     P ~ tQ_multiple(observation_index, time, kcat, kM, ET, ST),     kcat + kM ~ 1,     nl = TRUE,     loop=FALSE),   data = data_multiple,   prior = c(     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kcat\"),     brms::prior(prior = gamma(4, 1), lb = 0, nlpar = \"kM\")),   init = function() list(kcat = 4, kM = 4),   stanvars = c(     stanvars_tQ_ode,     stanvars_tQ_single,     stanvars_tQ_multiple)),   brms_params)) ## Start sampling ## Init values were only set for a subset of parameters.  ## Missing init values for the following parameters: ##  - chain 1: b_kcat, b_kM, sigma ##  - chain 2: b_kcat, b_kM, sigma ##  - chain 3: b_kcat, b_kM, sigma ##  - chain 4: b_kcat, b_kM, sigma ## Running MCMC with 4 parallel chains... ##  ## Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 4 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 2 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 3 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 1 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 4 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 3 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 2 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 1 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 4 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 2 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 1 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 3 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 4 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 2 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 1 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 3 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 1 finished in 114.3 seconds. ## Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 3 finished in 114.8 seconds. ## Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 4 finished in 116.4 seconds. ## Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 2 finished in 122.2 seconds. ##  ## All 4 chains finished successfully. ## Mean chain execution time: 116.9 seconds. ## Total execution time: 122.4 seconds. model_multiple ##  Family: gaussian  ##   Links: mu = identity; sigma = identity  ## Formula: P ~ tQ_multiple(observation_index, time, kcat, kM, ET, ST)  ##          kcat ~ 1 ##          kM ~ 1 ##    Data: structure(list(kcat = c(3, 3, 3, 3, 3, 3, 3, 3, 3, (Number of observations: 540)  ##   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ##          total post-warmup draws = 4000 ##  ## Population-Level Effects:  ##                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## kcat_Intercept     2.82      0.05     2.73     2.92 1.00     1195     1218 ## kM_Intercept       4.71      0.32     4.10     5.38 1.00     1155     1287 ##  ## Family Specific Parameters:  ##       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma     0.57      0.02     0.54     0.61 1.00     2143     1739 ##  ## Draws were sampled using sample(hmc). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). ## Start sampling ## Init values were only set for a subset of parameters.  ## Missing init values for the following parameters: ##  - chain 1: b_kcat, b_kM, sigma ##  - chain 2: b_kcat, b_kM, sigma ##  - chain 3: b_kcat, b_kM, sigma ##  - chain 4: b_kcat, b_kM, sigma ## Running MCMC with 4 sequential chains... ##  ## Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 1 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 1 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 1 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 1 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 1 finished in 0.0 seconds. ## Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 2 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 2 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 2 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 2 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 2 finished in 0.0 seconds. ## Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 3 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 3 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 3 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 3 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 3 finished in 0.0 seconds. ## Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup)  ## Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup)  ## Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup)  ## Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup)  ## Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 4 Iteration:  600 / 2000 [ 30%]  (Warmup)  ## Chain 4 Iteration:  700 / 2000 [ 35%]  (Warmup)  ## Chain 4 Iteration:  800 / 2000 [ 40%]  (Warmup)  ## Chain 4 Iteration:  900 / 2000 [ 45%]  (Warmup)  ## Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling)  ## Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling)  ## Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling)  ## Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling)  ## Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling)  ## Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling)  ## Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling)  ## Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling)  ## Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 4 finished in 0.0 seconds. ##  ## All 4 chains finished successfully. ## Mean chain execution time: 0.0 seconds. ## Total execution time: 0.5 seconds."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/articles/implement_tidymodels.html","id":"using-bayespharma-models-with-tidymodels","dir":"Articles","previous_headings":"","what":"Using BayesPharma models with Tidymodels","title":"Implement: BayesPharma and Tidymodels","text":"Tidymodels platform running analyzing models R. vignette demonstrates use BayesPharma models Tidy Models. Define recipe assign roles different columns Define model using wrapper package Tidymodels. Build run workflow adding recipe model running fit.","code":"load(here::here(\"data\", \"kor_antag.rda\")) kor_antag <- kor_antag |> dplyr::transmute(   substance_id = Drug,   cell_id = cell_number,   log_dose = log_dose,   response = normalized_measurement) kor_recipe <- kor_antag |>   recipes::recipe() |>   recipes::update_role(response, new_role = \"outcome\") |>   recipes::update_role(log_dose, new_role = \"predictor\") |>   recipes::update_role(substance_id, new_role = \"predictor\") kor_model <- bayesian::bayesian(   cores = 4,   chains = 4,   iter = 2000,   control = list(adapt_delta = 0.99),   stanvars = BayesPharma::sigmoid_stanvar(),   init = BayesPharma::sigmoid_antagonist_init(top = 100),   prior = BayesPharma::sigmoid_antagonist_prior(top = 100)) |>   parsnip::set_engine(\"brms\") |>   parsnip::set_mode(\"regression\") |>   recipes::update(     formula.override = bayesian::bayesian_formula(       ..y ~ sigmoid(ic50, hill, top, bottom, log_dose),       ic50 + hill + top + bottom ~ 0 + substance_id,       nl = TRUE)) kor_workflow <- workflows::workflow() |>   workflows::add_recipe(kor_recipe) |>   workflows::add_model(spec = kor_model) |>   parsnip::fit(data = kor_antag) ## Compiling Stan program... ## Start sampling kor_workflow ## ââ Workflow [trained] ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ ## Preprocessor: Recipe ## Model: bayesian() ##  ## ââ Preprocessor ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ ## 0 Recipe Steps ##  ## ââ Model âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ ##  Family: gaussian  ##   Links: mu = identity; sigma = identity  ## Formula: ..y ~ sigmoid(ic50, hill, top, bottom, log_dose)  ##          ic50 ~ 0 + substance_id ##          hill ~ 0 + substance_id ##          top ~ 0 + substance_id ##          bottom ~ 0 + substance_id ##    Data: ~data (Number of observations: 73)  ##   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ##          total post-warmup draws = 4000 ##  ## Population-Level Effects:  ##                                Estimate Est.Error l-95% CI u-95% CI Rhat ## ic50_substance_idBTRX_335140      -8.85      0.20    -9.22    -8.42 1.00 ## ic50_substance_idBTRX_395750      -8.25      0.39    -8.92    -7.46 1.00 ## ic50_substance_idJNJ              -9.15      0.31    -9.76    -8.51 1.00 ## ic50_substance_idPF               -6.13      1.10    -7.65    -3.14 1.00 ## hill_substance_idBTRX_335140      -1.46      0.59    -2.83    -0.58 1.00 ## hill_substance_idBTRX_395750      -0.90      0.51    -2.27    -0.28 1.00 ## hill_substance_idJNJ              -1.01      0.52    -2.48    -0.41 1.00 ## hill_substance_idPF               -0.31      0.25    -0.91    -0.03 1.00 ## bottom_substance_idBTRX_335140     0.00      0.51    -1.02     1.00 1.00 ## bottom_substance_idBTRX_395750     0.01      0.50    -0.97     0.98 1.00 ## bottom_substance_idJNJ             0.00      0.51    -1.03     0.98 1.00 ## bottom_substance_idPF              0.01      0.50    -0.94     0.99 1.00 ## top_substance_idBTRX_335140      100.00      0.00   100.00   100.00   NA ## top_substance_idBTRX_395750      100.00      0.00   100.00   100.00   NA ## top_substance_idJNJ              100.00      0.00   100.00   100.00   NA ## top_substance_idPF               100.00      0.00   100.00   100.00   NA ##                                Bulk_ESS Tail_ESS ## ic50_substance_idBTRX_335140       3453     2241 ## ic50_substance_idBTRX_395750       2970     1707 ## ic50_substance_idJNJ               3764     2646 ## ic50_substance_idPF                2124     1222 ## hill_substance_idBTRX_335140       2996     2651 ## hill_substance_idBTRX_395750       2949     1852 ## hill_substance_idJNJ               3926     3141 ## hill_substance_idPF                1784     1342 ## bottom_substance_idBTRX_335140     4155     2948 ## bottom_substance_idBTRX_395750     4618     2963 ## bottom_substance_idJNJ             4014     3065 ## bottom_substance_idPF              4128     2920 ## top_substance_idBTRX_335140          NA       NA ## top_substance_idBTRX_395750          NA       NA ## top_substance_idJNJ                  NA       NA ## top_substance_idPF                   NA       NA ##  ## Family Specific Parameters:  ##       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma    32.15      2.84    27.30    38.27 1.00     3616     2674 ##  ## ... ## and 4 more lines."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Madeline Martin. Author. Matthew O'Meara. Author, maintainer.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Martin M, O'Meara M (2023). BayesPharma: Tools Bayesian Analysis Non-Linear Pharmacology Models. R package version 0.0.3, https://maomlab.github.io/BayesPharma/.","code":"@Manual{,   title = {BayesPharma: Tools for Bayesian Analysis of Non-Linear Pharmacology Models},   author = {Madeline Martin and Matthew O'Meara},   year = {2023},   note = {R package version 0.0.3},   url = {https://maomlab.github.io/BayesPharma/}, }"},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"BayesPharma package contains collection R tools analyzing pharmacology data using Bayesian statistics modeling. comparison likelihood-based inference, BayesPharma builds stan ecosystem brms package. BayesPharma facilitates applying principled Bayesian workflow fit analyze several foundational pharmacology models, dose-response modeling, modeling Pnear folding funnels molecular modeling, modeling potential docking âhit-rateâ curves function dock score ultra-large library docking (Lyu et al.Â (2019), Alon et al.Â (2021)).","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"pre-requisites","dir":"","previous_headings":"Installation","what":"Pre-requisites","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"Follow instructions install rstan","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"install-bayespharma","dir":"","previous_headings":"Installation","what":"Install BayesPharma","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"R ","code":"install.packages(\"remotes\") remotes::install_github(\"maomlab/BayesPharma\", build_vignettes = FALSE)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"predictor columns typically treatment variables like drug batch variable like well_id. use model , example fit sigmoid agonist model:","code":"library(tidyverse) library(BayesPharma)  data <- data.frame(   response = ...,   treatment = ...,   <predictor columns>) model <- BayesPharma::sigmoid_model(    data = data,    formula = BayesPharma::sigmoid_agoinst_formula(),    prior = BayesPharma::sigmoid_agonsit_prior(),    init = BayesPharma::sigmoid_agonist_init())"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"evaluate-model-fit","dir":"","previous_headings":"Usage","what":"Evaluate model fit","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"model fit, evaluate ","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"traceplot","dir":"","previous_headings":"Usage > Evaluate model fit","what":"Traceplot","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model |> BayesPharma::traceplot()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"basic-statistics","dir":"","previous_headings":"Usage > Evaluate model fit","what":"Basic statistics","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model |> posterior::summarize_draws()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"regression-plot","dir":"","previous_headings":"Usage > Evaluate model fit","what":"Regression plot","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model |> BayesPharma::plot_posterior_draws()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"prior-densities","dir":"","previous_headings":"Usage > Evaluate model fit","what":"Prior densities","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model |> BayesPharma::density_distributions() model |> BayesPharma::posterior_densities() model |> BayesPharma::prior_posterior_densities()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"posterior-predictive-check","dir":"","previous_headings":"Usage > Evaluate model fit","what":"posterior predictive check","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model |> brms::pp_check(type = \"dens_overlay\", ndraws = 50)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/index.html","id":"compare-model-fits","dir":"","previous_headings":"Usage","what":"compare model fits","title":"Tools for Bayesian Analysis of Non-Linear Pharmacology Models","text":"","code":"model <- model |> brms::add_loo_criterion() model_fit_comparison <- brms::compare_models(model, model_alt)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/BayesPharma-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BayesPharma: Tools for Bayesian Analysis of Non-Linear Pharmacology Models â BayesPharma-package","title":"BayesPharma: Tools for Bayesian Analysis of Non-Linear Pharmacology Models â BayesPharma-package","text":"BayesPharma package builds Stan brms provide support Bayesian regression modeling foundational pharmacology models. model type, user provides formula: Describing model parameters, treatment, optional predictors lead measured response using functions provided BayesPharma model type. observed data: response, treatment, optional predictors data.frame prior: Initial distributions model parameters models BayesPharma support sigmoid_model: 4-parameter Hill equation MuSyC_model: Bivariate synergy model Bliss Loewe interaction models special cases michaelis_menten_model: Michaelis Menten enzyme kinetics ordinary differential equation model tQ_model: Generalization enzyme progress curve kinetics ordinary differential equation growth_sigmoid_model: Sigmoid model growth kinetics growth_richards_model: Generalized Richards model growth kinetics BayesPharma package also provides range case studies templates examples getting started applying Bayesian modeling pharmacology data analysis. Building rstan::stan brings performance stability -U-Turn Sampling (NUTs) Hamiltonian Monte Carlo whole ecosystem tools model assessment, visualization (see https://mc-stan.org/). Building brms allows compact formula based model specification adding complexity model incrementally, including handling missing data, measurement error, response distributions (see https://paul-buerkner.github.io/brms/).","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate MuSyC Ed Scores Using a Robust Functional Form â MuSyC","title":"Generate MuSyC Ed Scores Using a Robust Functional Form â MuSyC","text":"Generate MuSyC Ed Scores Using Robust Functional Form","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate MuSyC Ed Scores Using a Robust Functional Form â MuSyC","text":"","code":"MuSyC(logd1, logd2, logE0, logE1, logC1, h1, logE2, logC2, h2, logE3, logalpha)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate MuSyC Ed Scores Using a Robust Functional Form â MuSyC","text":"logd1 numeric log dose treatment 1 logd2 numeric log dose treatment 2 logE0 numeric Full log response treatment. logE1 numeric Full log response treatment 1 dose treatment 2 zero. logC1 numeric AC50 treatment 1 dose treatment 2 zero. h1 numeric Slope treatment 1 AC50 dose treatment 2 zero exponential form. Use MuSyC_si_to_hi convert slope form. logE2 numeric Full log response treatment 2 dose treatment 1 zero. logC2 numeric AC50 treatment 2 dose treatment 1 zero. h2 numeric Slope treatment 2 AC50 dose treatment 1 zero exponential form. Use MuSyC_si_to_hi convert slope form. logE3 numeric Full response treatment 1 treatment 2. logalpha numeric Log synergistic potency parameter greater 1 synergistic, less 1 antagonistic.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate MuSyC Ed Scores Using a Robust Functional Form â MuSyC","text":"numeric synergistic response treatment 1 treatment 2 doses logd1 logd2 respectively.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate MuSyC Ed Scores Using a Robust Functional Form â MuSyC","text":"Meyer, D.J., Wooten, D.J., Paudel B.B., Bauer, J., Hardeman, K.N., Westover, D., Lovly, C.M., Harris, L.., Tyson D.R., Quaranta, V., Quantifying Drug Combination Synergy along Potency Efficacy Axes, Cell Syst. 8, 2 (2019). https://doi.org/10.1016/j.cels.2019.01.003 Wooten, D.J., Meyer, C.T., Lubbock, .L.R. et al. MuSyC consensus framework unifies multi-drug synergy metrics combinatorial drug discovery. Nat Commun 12, 4607 (2021). https://doi.org/10.1038/s41467-021-24789-z","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Formula for the MuSyC Synergy Model â MuSyC_formula","title":"Create a Formula for the MuSyC Synergy Model â MuSyC_formula","text":"Setup MuSyC synergy model formula predict E0, C1, E1, s1, C2, E2, s2, log10alpha, E3alpha parameters.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Formula for the MuSyC Synergy Model â MuSyC_formula","text":"","code":"MuSyC_formula(   treatment_1_variable = \"logd1\",   treatment_1_units = \"Log[Molar]\",   treatment_2_variable = \"logd2\",   treatment_2_units = \"Log[Molar]\",   response_variable = \"response\",   response_units = NULL,   predictors = 1,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Formula for the MuSyC Synergy Model â MuSyC_formula","text":"treatment_1_variable character variable representing treatment. treatment_1_units character units treatment. default log base 10 molar concentration treatment_2_variable character variable representing treatment. treatment_2_units character units treatment. default log base 10 molar concentration response_variable character variable representing response treatment response_units character units response predictors formula specify predictors non-linear parameters. .e. perturbations/experimental differences modeled separately? ... additional arguments passed brms::brmsformula()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Formula for the MuSyC Synergy Model â MuSyC_formula","text":"brms::brmsformula()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Formula for the MuSyC Synergy Model â MuSyC_formula","text":"","code":"if (FALSE) {   # Data has a string column drug_id with drug identifiers   # Fit a separate model for each drug   BayesPharma::MuSyC_formula(predictors = 0 + drug_id)    # Data has a string column plate_id with plate identifiers   # Estimate the change in response for each plate relative to a global   # baseline.   BayesPharma::MuSyC_formula(predictors = plate_id)    # data has columns drug_id and plate_id   # fit a multilevel model where the drug effect depends on the plate   BayesPharma::MuSyC_formula(predictors = 0 + (drug_id|plate_id)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_genquant_stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan Code for the MuSyC Generated Quantities â MuSyC_genquant_stanvar","title":"Stan Code for the MuSyC Generated Quantities â MuSyC_genquant_stanvar","text":"Stan Code MuSyC Generated Quantities","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_genquant_stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan Code for the MuSyC Generated Quantities â MuSyC_genquant_stanvar","text":"","code":"MuSyC_genquant_stanvar()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_hi_to_si.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Exponent to Slope Parameterization for Drug i in MuSyC Model â MuSyC_hi_to_si","title":"Convert Exponent to Slope Parameterization for Drug i in MuSyC Model â MuSyC_hi_to_si","text":"can used setting priors interpreting parameter estimates see MuSyC_si_to_hi() details","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_hi_to_si.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Exponent to Slope Parameterization for Drug i in MuSyC Model â MuSyC_hi_to_si","text":"","code":"MuSyC_hi_to_si(hi, Ci, E0, Ei)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_hi_to_si.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Exponent to Slope Parameterization for Drug i in MuSyC Model â MuSyC_hi_to_si","text":"hi numeric value exponent MuSyC equation drug Ci numeric value AC50 drug E0 numeric value response treatments Ei numeric value response infinite drug treatments","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_hi_to_si.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Exponent to Slope Parameterization for Drug i in MuSyC Model â MuSyC_hi_to_si","text":"si slope drug AC50 doses drugs zero","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Initial Parameter Values for the MuSyC Model â MuSyC_init","title":"Create Initial Parameter Values for the MuSyC Model â MuSyC_init","text":"Initial values MuSyC model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Initial Parameter Values for the MuSyC Model â MuSyC_init","text":"","code":"MuSyC_init(   logE0 = log(0.5),   logC1 = 0,   logE1 = log(0.5),   h1 = 4,   logC2 = 0,   logE2 = log(0.5),   h2 = 4,   logE3 = log(0.5),   logalpha = 0 )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Initial Parameter Values for the MuSyC Model â MuSyC_init","text":"logE0 numeric function returning array length 1.  Initial value logE0 parameter. Default: log(0.5) logC1 numeric function returning array length 1. Initial value logC1 parameter. Default: 0 = log(1) logE1 numeric function returning array length 1. Initial value logE1 parameter. Default: log(0.5) h1 numeric function returning array length 1. Initial value h1 parameter. Default: 4 = MuSyC_si_to_hi(si=1, Ci=1, E0=1, Ei=0.0) exponent treatment 1 corresponding slope 1 logC2 numeric function returning array length 1. Initial value logC2 parameter. Default: 0 = log(1) logE2 numeric function returning array length 1. Initial value logE2 parameter. Default: log(0.5) h2 numeric function returning array length 1. Initial value h2 parameter. Default: 4 = MuSyC_si_to_hi(si=1, Ci=1, E0=1, Ei=0.0) exponent treatment 1 corresponding slope 1 logE3 numeric function returning array length 1. Initial value logE3 parameter. Default: log(0.5) logalpha numeric function returning array length 1. Initial value logalpha parameter. Default: 0 = log(1)","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Initial Parameter Values for the MuSyC Model â MuSyC_init","text":"input BayesPharma::model_MuSyC(init = ...) parameter.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Initial Parameter Values for the MuSyC Model â MuSyC_init","text":"","code":"if (FALSE) {   # default prior and init for MuSyC Model   prior <- BayesPharma::MuSyC_prior()   init <- BayesPharma::MuSyC_init()    # Set prior and init for MuSyC model where both treatment 1 and treatment 2   # are assumed to be full inhibitors   BayesPharma::MuSyC_prior(logE0 = 0, E1 = -Inf, E2 = -Inf, E3 = -Inf)   BayesPharma::MuSyC_init(E0 = 1, E1 = -Inf, E2 = -Inf, E3 = -Inf) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a MuSyC Synergy Model â MuSyC_model","title":"Fit a MuSyC Synergy Model â MuSyC_model","text":"MuSyC synergy model bivariate functional form Bliss Loewe synergy models models special cases described (Meyer, et al., 2019) (Wooten, et al., 2021). functional form See MuSyC() full mathematical description MuSyC function. default observed data (therefore columns input data data.frame) <treatment 1>: logd1, log10 dose molar concentration treatment 1 <response>: response, unspecified units <treatment 2>: logd2, log10 dose molar concentration treatment 2 logd1scale logd2scale used center <treatment 1> <treatment 2> make fitting numerically stable. input data, taken mean <treatment 1> <treatment 2> respectively. modeled parameters logE0: log(<response>) <treatment 1> = 0 <treatment 2> = 0 logC1: log(<treatment 1>) <treatment 2> = 0, <response> halfway E0 E1 logE1: log(response) <treatment 1> => Inf <treatment 2> = 0 h1: hill slope response respect <treatment 1> <treatment 1> = C1 <treatment 2> = 0. See MuSyC_hi_to_si() MuSyC_si_to_hi() converting slope (si) hill slope (hi). logC2: log(<treatment 2>) <treatment 1> = 0, <response> halfway E0 E2 logE2: log(response) <treatment 2> => Inf <treatment 1> = 0 h2: hill slope response respect <treatment 2> <treatment 2> = C2 <treatment 1> = 0. See MuSyC_hi_to_si() MuSyC_si_to_hi() converting slopec(si) hill slope (hi). logE3: log(response) <treatment1 1> => Inf <treatment 2> => Inf, modeling synergistic efficacy logalpha: log synergistic potency alpha. alpha > 1 treatments synergistic <treatment 1>`` shifts response due <treatment 2>lower doses visa versa. Whenalpha < 1the treatments antagonistic <treatment 1>shifts response <treatment 2>` higher doses vise versa","code":"<response> ~ MuSyC(       <treatment 1> - <logd1scale>,       <treatment 2> - <logd2scale>,       logE0,       logC1, logE1, h1,       logC2, logE2, h2,       logE3, logalpha)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a MuSyC Synergy Model â MuSyC_model","text":"","code":"MuSyC_model(   data,   prior = MuSyC_prior(),   init = MuSyC_init(),   formula = MuSyC_formula(),   control = list(adapt_delta = 0.99, max_treedepth = 12),   stanvars = c(MuSyC_stanvar(), MuSyC_genquant_stanvar()),   expose_functions = TRUE,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a MuSyC Synergy Model â MuSyC_model","text":"data data.frame observed data. must contain columns treatment, response additional predictors specified formula. See sigmoid_agonist_formula() details. prior brms::brmsprior() model parameters. create prior MuSyC model, use MuSyC_prior() function. init function giving initial values parameters. specify initial values, use MuSyC_init() function. formula bpformula object. create formula MuSyC model, use MuSyC_formula() function. control named list arguments control sampler's behavior. Adding max_treedepth giving greater value 10 can improve model convergence. stanvars stanvars code MuSyC model. expose_functions logical. Expose sigmoid function used model. needed e.g. brms::loo_compare() ... additional arguments passed brms::brm()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a MuSyC Synergy Model â MuSyC_model","text":"Meyer, D.J., Wooten, D.J., Paudel B.B., Bauer, J., Hardeman, K.N., Westover, D., Lovly, C.M., Harris, L.., Tyson D.R., Quaranta, V., Quantifying Drug Combination Synergy along Potency Efficacy Axes, Cell Syst. 8, 2 (2019). https://doi.org/10.1016/j.cels.2019.01.003 Wooten, D.J., Meyer, C.T., Lubbock, .L.R. et al. MuSyC consensus framework unifies multi-drug synergy metrics combinatorial drug discovery. Nat Commun 12, 4607 (2021). https://doi.org/10.1038/s41467-021-24789-z","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Prior for the MuSyC Synergy Model â MuSyC_prior","title":"Create a Prior for the MuSyC Synergy Model â MuSyC_prior","text":"Creating data.frame priors dose response parameters required MuSyC model. like set parameter constant, enter numeric value function argument.  like set distribution, example, function arguments type ec50 = brms::prior(prior = normal(<mu>, <sigma>), nlpar = 'ec50'). distribution options, reference brms::prior Prior Choice Recommendations","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Prior for the MuSyC Synergy Model â MuSyC_prior","text":"","code":"MuSyC_prior(   logE0 = brms::prior(prior = normal(-0.6931, 3), nlpar = \"logE0\", ub = 0),   logE1 = brms::prior(prior = normal(-1.386, 3), nlpar = \"logE1\", ub = 0),   logC1 = brms::prior(prior = normal(0, 3), nlpar = \"logC1\"),   h1 = brms::prior(prior = normal(4, 3), nlpar = \"h1\", lb = 0.1),   logE2 = brms::prior(prior = normal(-1.386, 3), nlpar = \"logE2\", ub = 0),   logC2 = brms::prior(prior = normal(0, 3), nlpar = \"logC2\"),   h2 = brms::prior(prior = normal(4, 3), nlpar = \"h2\", lb = 0.1),   logE3 = brms::prior(prior = normal(-1.386, 3), nlpar = \"logE3\", ub = 0),   logalpha = brms::prior(prior = normal(0, 0.5), nlpar = \"logalpha\"),   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Prior for the MuSyC Synergy Model â MuSyC_prior","text":"logE0 numeric brms::brmsprior(). Prior log response treatment. (Default: normal(log(0.5), 3) lower bounded 0). logE1 numeric brms::brmsprior(). Prior full log response treatment 1 treatment 2 zero. (Default: normal(log(0.25), 3) lower bounded 0). logC1 numeric brms::brmsprior(). Prior log AC50 treatment 1 dose treatment 2 zero. (Default: normal(log(1), 3)). h1 numeric brms::brmsprior(). Prior slope treatment 1 AC50 treatment 2 zero exponential form. converted slope exponential form, use MuSyC_si_to_hi()). particular, let mu = MuSyC_si_to_hi(si = 1, Ci = 1, E0 = 0, Ei = 0), (Default: normal(mu, 3) lower bounded .1). logE2 numeric brms::brmsprior(). Prior full log response treatment 2 treatment 1 zero. (Default: normal(log(0.25), 3) lower bounded 0). logC2 numeric brms::brmsprior(). Prior log AC50 treatment 2. (Default: normal(log(1), 3)). h2 numeric brms::brmsprior(). Prior slope treatment 2 AC50 treatment 1 zero exponential form. converted slope exponential form, use MuSyC_si_to_hi()). particular, let mu = MuSyC_si_to_hi(si = 1, Ci = 1, E0 = 0, Ei = 0), (Default: normal(mu, 3) lower bounded .1). logE3 numeric brms::brmsprior(). Prior combined full response treatment 1 treatment 2. (Default: normal(log(0.25), 3) lower bounded 0). logalpha numeric brms::brmsprior(). Prior log synergistic potency. values greater 1 synergistic, values less 1 antagonistic. (Default: normal(log(0), 0.5). ... additional brms::brmsprior() objects add prior.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Prior for the MuSyC Synergy Model â MuSyC_prior","text":"brms::brmsprior()  data.frame","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_si_to_hi.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert From Slope to Exponent Parameterization for Drug i in the MuSyC Model â MuSyC_si_to_hi","title":"Convert From Slope to Exponent Parameterization for Drug i in the MuSyC Model â MuSyC_si_to_hi","text":"can used setting priors interpreting parameter estimates","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_si_to_hi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert From Slope to Exponent Parameterization for Drug i in the MuSyC Model â MuSyC_si_to_hi","text":"","code":"MuSyC_si_to_hi(si, Ci, E0, Ei)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_si_to_hi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert From Slope to Exponent Parameterization for Drug i in the MuSyC Model â MuSyC_si_to_hi","text":"si numeric value slope drug AC50 doses drugs zero Ci numeric value AC50 drug E0 numeric value response treatments Ei numeric value response infinite drug treatments","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_si_to_hi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert From Slope to Exponent Parameterization for Drug i in the MuSyC Model â MuSyC_si_to_hi","text":"hi numeric value exponent MuSyC equation drug ","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_si_to_hi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert From Slope to Exponent Parameterization for Drug i in the MuSyC Model â MuSyC_si_to_hi","text":"Claim: d1=0 d2=C2 gradient response respect d2 s2, symbolically d(Ed)/d(d2) = s2 s2 = h2 * (E0 + E2) / (4 * C2)   Cancel C1^h1 terms:   Distribute derivative across terms numerator   Evaluate d2 = C2:","code":"d(Ed)/d(d2)   = d/d(d2)     (C1^h1 * C2^h2 * E0 + C1^h1 * d2^h2 * E2) /     (C1^h1 * C2^h2      + C1^h1 * d2^h2) =  d/d(d2)      (C2^h2 * E0 + d2^h2 * E2) /      (C2^h2      + d2^h2) =  E0 * C2^h2 * (d/d(d2) 1     / (C2^h2 + d2^h2)) +      E2         * (d/d(d2) d2^h2 / (C2^h2 + d2^h2))    =  E0 * C2^h2 * (h2 * d2^(h2-1) / (C2^h2 + d2^h2)^2) +      E2 * (C2^h2 * h2 * d2^(h2-1) / (C2^h2 + d2^h2)^2)    =  (E0 + E2) * C2^h2 * h2 * d2^(h2-1)/(C2^h2 + d2^h2)^2 =  (E0 + E2) * h2 * C2^(2*h2-1) / (4*C2^(2*h2)))   =  h2 * (E0 + E2) / (4 * C2)"},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan Code for the MuSyC Function. â MuSyC_stanvar","title":"Stan Code for the MuSyC Function. â MuSyC_stanvar","text":"Stan Code MuSyC Function.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan Code for the MuSyC Function. â MuSyC_stanvar","text":"","code":"MuSyC_stanvar()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/MuSyC_stanvar.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stan Code for the MuSyC Function. â MuSyC_stanvar","text":"stanvar script MuSyC equation.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Pnear Quality Metric for a RMSD Funnel â Pnear","title":"Compute the Pnear Quality Metric for a RMSD Funnel â Pnear","text":"protein structure prediction key measure accuracy well predicted energy score correlate distance native conformation. common distance measure -atom root mean squared distance (RMSD). challenge, however, expect far away native conformation, energy discriminating, want bias assessment near native conformation. therefore Pnear metric defined (Bhardwaj, et al., Nature, 2016) measures \"funnel-like\" score-vs-rmsd plot . Pnear Rosetta Documentation","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Pnear Quality Metric for a RMSD Funnel â Pnear","text":"","code":"Pnear(score, rmsd, lambda = 1.5, kbt = 0.62, verbose = FALSE)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Pnear Quality Metric for a RMSD Funnel â Pnear","text":"score vector scores e.g. Rosetta energies e.g. Ref2015. rmsd root mean squared deviation values e.g. backbone atoms lambda Lambda value Angstroms indicating breadth Gaussian used define \"native-like-ness\".  bigger value, permissive calculation structures deviate native. Typical values peptides range 1.5 2.0, proteins 2.0 perhaps 4.0. kbt value k_B*T, energy units, determines large energy gap must order sequence said favor native state. default value, 0.62, correspond physiological temperature ref2015 scorefunction units kcal/mol. verbose give verbose output.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Pnear Quality Metric for a RMSD Funnel â Pnear","text":"numeric value.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Pnear Quality Metric for a RMSD Funnel â Pnear","text":"","code":"# subtract off the min-score as is done in the Rosetta Code scores = scores - min(scores)  # write down the equation in more code-like notation Pnear <- Sum_i[exp(-RMSD[i]^2/lambda^2)*exp(-scores[i]/k_BT)] /          Sum_i[exp(-scores[i]/k_BT)]  # combine the terms in the first exponential Pnear = Sum_i[exp(-RMSD[i]^2/lambda^2 - scores[i]/k_BT)] /         Sum_i[exp(-scores[i]/k_BT)]  let x_i  = RMSD[i]^2/lambda^2 * k_BT/scores[i]     beta = -scores[i]  Pnear = Sum_i[exp(-RMSD[i]^2/lambda^2*k_BT/scores])]  # Use the log-sum-exponential trick log(Pnear) =   log_sum_exp(-RMSD[i]^2/lambda^2 - scores[i]/k_BT)              - log_sum_exp(-scores[i]/k_BT)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute the Pnear Quality Metric for a RMSD Funnel â Pnear","text":"Unlike Conway discrimination score, PNear calculation uses hard cutoffs.  advantageous repeated testing: scatter points RMSD plot changes slightly run run, PNear value change small amount, whereas metric dependent hard cutoffs change large amount low-energy point crosses RMSD threshold.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the Pnear Quality Metric for a RMSD Funnel â Pnear","text":"Vikram K. Mulligan (vmulligan\\@flatironinstitute.org) adapted Rosetta","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/Pnear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Pnear Quality Metric for a RMSD Funnel â Pnear","text":"","code":"if (FALSE) {  Pnear(score = score_a, rmsd = rmsd_a) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/basic_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Give Basic Statistical Information About the Model Results â basic_stats","title":"Give Basic Statistical Information About the Model Results â basic_stats","text":"Return data.frame containing summary statistics bpfit model. summary statistics included mean, median, standard deviation, lower confidence interval, upper confidence interval.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/basic_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Give Basic Statistical Information About the Model Results â basic_stats","text":"","code":"basic_stats(   model,   predictors_col_name = \"_Intercept\",   half_max_label = \"ec50\",   l_ci = 0.025,   u_ci = 0.975 )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/basic_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Give Basic Statistical Information About the Model Results â basic_stats","text":"model brms::brmsfit() model predictors_col_name character expression predictors column input data.frame. Predictors perturbations tested experiment (.e. Drug, Temperature, etc.) half_max_label character label half maximal fits type experiment done (.e. ec50, ic50, ed50, id50, ld50, etc.). l_ci numeric unit lower confidence interval u_ci numeric unit upper confidence interval","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/basic_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Give Basic Statistical Information About the Model Results â basic_stats","text":"tibble::tibble() object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/basic_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Give Basic Statistical Information About the Model Results â basic_stats","text":"","code":"if (FALSE) {   BayesPharma::basic_stats(     model = my_sigmoid_model,     predictors_col_name = \"predictors\",     half_max_label = \"ic50\",     l_ci = 0.025,     u_ci = 0.975) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/bpfit-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class bpfit of Models Fit with the BayesPharma Package â bpfit-class","title":"Class bpfit of Models Fit with the BayesPharma Package â bpfit-class","text":"Models fit BayesPharma package model function represented bpfit object, wrapper around brms::brmsfit contains posterior draws (samples), model formula, Stan code, relevant data, information. Additionally, bpfit objects contain bayes_pharma_info list following elements:","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/bpfit-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class bpfit of Models Fit with the BayesPharma Package â bpfit-class","text":"model_type: character type model elements defined formula, including treatment response variables units BayesPharma information used plots model analysis methods. Additionally, default bpfit objects methods exposed default possible e.g. compare models brms::loo_compare.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/calculate_log_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Log(dose) (in base 10) Column to the Input data.frame â calculate_log_dose","title":"Add a Log(dose) (in base 10) Column to the Input data.frame â calculate_log_dose","text":"Given dose column data.frame given molar concentration add new column log base-10 dose, log_dose, data.frame return .","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/calculate_log_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Log(dose) (in base 10) Column to the Input data.frame â calculate_log_dose","text":"","code":"calculate_log_dose(data, dose_col = \"dose\", molar_concentration = 1)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/calculate_log_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Log(dose) (in base 10) Column to the Input data.frame â calculate_log_dose","text":"data data.frame containing column representing dose molar units. dose_col expression dose column input data.frame (Default: \"dose\") molar_concentration numeric units molar concentration dose column (Default: 1).","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/calculate_log_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Log(dose) (in base 10) Column to the Input data.frame â calculate_log_dose","text":"input data.frame appended log_dose column log10(<dose_col>) * molar_concentration.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/calculate_log_dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Log(dose) (in base 10) Column to the Input data.frame â calculate_log_dose","text":"","code":"if (FALSE) { # Consider observations at doses of 1 Î¼M and 0.1 Î¼M. # If the doses are given in molar units (M) then data <- data.frame(dose = c(1e-6, 1e-7)) |>    BayesPharma::calculate_log_dose(dose_col = dose, molar_concentration = 1) data$log_dose == c(-6, -7)  # If the doses are given with in units of nanomolar (nM) then data <- data.frame(dose_nM = c(1000, 100)) |>   BayesPharma::calculate_log_dose(     dose_col = dose_nM,     molar_concentration = 1e-9) data$log_dose == c(-6, -7) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/constant_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for a Curve with a Constant Response â constant_formula","title":"Formula for a Curve with a Constant Response â constant_formula","text":"set-equation formula objects constant response.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/constant_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formula for a Curve with a Constant Response â constant_formula","text":"","code":"constant_formula(   response_variable = \"response\",   response_units = NULL,   predictors = 1,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/constant_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formula for a Curve with a Constant Response â constant_formula","text":"response_variable character variable representing response treatment response_units character units response predictors Additional formula objects specify predictors non-linear parameters. .e. perturbations/experimental differences modeled separately? (Default: 1) random effect taken consideration? .e. cell number, plate number, etc. ... additional arguments brms::brmsformula()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/constant_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formula for a Curve with a Constant Response â constant_formula","text":"bpformula brms::brmsformula()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/constant_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for a Curve with a Constant Response â constant_formula","text":"","code":"if (FALSE) {   constant_formula(predictors = 0 + predictors) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/drc_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for DRC Dose Response Models â drc_model","title":"Wrapper for DRC Dose Response Models â drc_model","text":"Wrapper DRC Dose Response Models","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/drc_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for DRC Dose Response Models â drc_model","text":"","code":"drc_model(   data,   formula = response ~ log_dose,   fct = drc::L.4(fixed = c(NA, NA, NA, NA), names = c(\"hill\", \"bottom\", \"top\", \"ec50\")),   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/drc_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for DRC Dose Response Models â drc_model","text":"data data.frame formula formula formula relating response log_dose, drc::L.4 sigmoid link function used dose drc::LL.4 log-linear sigmoid link functions used fct argument. fct Boltzmann non-linear link function. Default 4 parameter log-linear sigmoid equation, drc::L.4, parameters estimated. fix subset , set parameters constant values. ... additional arguments passed drc::drm","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/drc_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for DRC Dose Response Models â drc_model","text":"object (S3) class drc drc package.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/drc_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for DRC Dose Response Models â drc_model","text":"","code":"if (FALSE) { BayesPharma::drc_model(   data = tibble::tibble(     log_dose = seq(-7, -5, length.out = 20),     mean_response = BayesPharma::sigmoid(       ac50 = -6, hill = -1, top = 1, bottom = 0, log_dose = log_dose),     response = stats::rnorm(n = 20, mean = 0, sd = 0.2))) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/expect_gg.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an Object is a ggplot2 Plot â expect_gg","title":"Check if an Object is a ggplot2 Plot â expect_gg","text":"Use tests check object ggplot2::ggplot object","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/expect_gg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an Object is a ggplot2 Plot â expect_gg","text":"","code":"expect_gg(x)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/expect_gg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an Object is a ggplot2 Plot â expect_gg","text":"x ggplot2::ggplot object","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/expect_gg.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an Object is a ggplot2 Plot â expect_gg","text":"borrowed bayesplot:::expect_gg","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards.html","id":null,"dir":"Reference","previous_headings":"","what":"Richards growth function â growth_richards","title":"Richards growth function â growth_richards","text":"Functional form Richards growth model.   parameterization follows (Zwietering, 1990) grofit:","code":"response(time) =   K0 + (K - K0)/(     1 + nu * exp(       1 + nu + rate/(K - K0) * (1 + nu)^(1 + 1/nu) *       (lambda - time))) ^ (1/nu) K      = **carrying capacity**, `K = response(time = Inf)`. The          \\pkg{grofit} package calls this parameter `A`. `K` has the same          units as the `response`. K0     = **initial population size** `K0 = response(time = 0)`. The          \\pkg{grofit} package assumes `K0=0`. `K0` has the same units as the          `response`. rate   = **maximum growth rate** `rate = max[d(response)/d(time)]`. The          \\pkg{grofit} package calls this `mu`. `rate` has the units of          `response/time` lambda = **duration of the lag-phase** the time point at which the          tangent through the growth curve when it achieves the maximum          growth rate crosses the initial population size `K0`. (see          Figure 2 in (Kahm et al., 2010)). nu     = **growth asymmetry** before and after the inflection"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Richards growth function â growth_richards","text":"","code":"growth_richards(K, K0, rate, lambda, nu, time)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Richards growth function â growth_richards","text":"K numeric carrying capacity K0 numeric baseline response rate numeric maximum growth rate lambda numeric duration lag-phase nu numeric growth asymmetry inflection point time numeric time point evaluate response","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Richards growth function â growth_richards","text":"numeric response given time parameters","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Richards growth function â growth_richards","text":"Zwietering M. H., Jongenburger ., Rombouts F. M., van 't Riet K., (1990) Modeling Bacterial Growth Curve. Appl. Environ. Microbiol., 56(6), 1875-1881 https://doi.org/10.1128/aem.56.6.1875-1881.1990 Kahm, M., Hasenbrink, G., Lichtenberg-FratÃ©, H., Ludwig, J., & Kschischo, M. (2010). grofit: Fitting Biological Growth Curves R. J. Stat. Softw., 33(7), 1â21. https://doi.org/10.18637/jss.v033.i07","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Richards growth function â growth_richards","text":"","code":"if (FALSE) {  # Generate Richards growth curve  data <- data.frame(    time = seq(0, 2, length.out = 101)) |>      dplyr::mutate(        response = stats::rnorm(          n = length(time),          mean = BayesPharma::growth_richards(            K = 1,            K0 = 0,            rate = 2,            lambda = 0.5,            nu = 2,            time = time),        sd = .2)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Formula for the Richards Growth Model â growth_richards_formula","title":"Create a Formula for the Richards Growth Model â growth_richards_formula","text":"set-Richards growth model formula use growth_richards_model BayesPharma package. functional form   parameterization follows (Zwietering, 1990) grofit:   See vignettes(topic = \"derive_growth_model\", package = \"BayesPharma\")","code":"response ~ richards_growth(K, K0, rate, lambda, nu, time) K      = **carrying capacity**, `K = response(time = Inf)`. The          \\pkg{grofit} package calls this parameter `A`. `K` has the same          units as the `response`. K0     = **initial population size** `K0 = response(time = 0)`. The          \\pkg{grofit} package assumes `K0=0`. `K0` has the same units as          the `response`. rate   = **maximum growth rate** `rate = max[d(response)/d(time)]`. The          \\pkg{grofit} package calls this `mu`. `rate` has the units of          `response/time` lambda = **duration of the lag-phase** the time point at which the          tangent through the growth curve when it achieves the maximum          growth rate crosses the initial population size `K0`. (see          Figure 2 in (Kahm et al., 2010)). nu     = **growth asymmetry** before and after the inflection          point."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Formula for the Richards Growth Model â growth_richards_formula","text":"","code":"growth_richards_formula(   treatment_variable = \"time\",   treatment_units = \"hours\",   response_variable = \"response\",   response_units = NULL,   predictors = 1,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Formula for the Richards Growth Model â growth_richards_formula","text":"treatment_variable character variable representing time treatment treatment_units character units time variable response_variable character variable representing response treatment response_units character units response predictors Additional formula objects specify predictors non-linear parameters. .e. perturbations/experimental differences modeled separately? (Default: 1) random effect taken consideration? .e. cell number, plate number, etc. ... additional arguments brms::brmsformula()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Formula for the Richards Growth Model â growth_richards_formula","text":"bpformula, subclass brms::brmsformula() can passed growth_richards_model().","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_formula.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a Formula for the Richards Growth Model â growth_richards_formula","text":"Zwietering M. H., Jongenburger ., Rombouts F. M., van 't Riet K., (1990) Modeling Bacterial Growth Curve. Appl. Environ. Microbiol., 56(6), 1875-1881 https://doi.org/10.1128/aem.56.6.1875-1881.1990 Kahm, M., Hasenbrink, G., Lichtenberg-FratÃ©, H., Ludwig, J., & Kschischo, M. (2010). grofit: Fitting Biological Growth Curves R. J. Stat. Softw., 33(7), 1â21. https://doi.org/10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Formula for the Richards Growth Model â growth_richards_formula","text":"","code":"if (FALSE) {   # Data has a string column drug_id with drug identifiers   # Fit a separate model for each drug   BayesPharma::growth_richards_formula(predictors = 0 + drug_id)    # Data has a string column plate_id with plate identifiers   # Estimate the change in response for each plate relative to a global   # baseline.   BayesPharma::growth_richards_formula(predictors = plate_id)    # data has columns drug_id and plate_id   # fit a multilevel model where the drug effect depends on the plate   BayesPharma::growth_richards_formula(predictors = 0 + (drug_id|plate_id)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Initialization for the Richards Growth Model â growth_richards_init","title":"Create Initialization for the Richards Growth Model â growth_richards_init","text":"Creating initial values Richards growth model parameters can passed growth_richards_model.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Initialization for the Richards Growth Model â growth_richards_init","text":"","code":"growth_richards_init(K = 1, K0 = 0, rate = 1, lambda = 0.5, nu = 1)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Initialization for the Richards Growth Model â growth_richards_init","text":"K numeric numeric returning function K0 numeric numeric returning function rate numeric numeric returning function lambda numeric numeric returning function nu numeric numeric returning function values range [0, Inf], 1 standard sigmoid","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Initialization for the Richards Growth Model â growth_richards_init","text":"input [brm][brms::brm](init = ...)","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Initialization for the Richards Growth Model â growth_richards_init","text":"","code":"if (FALSE) { init <- BayesPharma::growth_richards_init(   A = 100,   nu = 2) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Bayesian Richards Growth Model â growth_richards_model","title":"Run Bayesian Richards Growth Model â growth_richards_model","text":"additional information additional function arguments, reference: brm stan documentation.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Bayesian Richards Growth Model â growth_richards_model","text":"","code":"growth_richards_model(   data,   formula = growth_richards_formula(),   prior = growth_richards_prior(),   init = growth_richards_init(),   iter = 8000,   control = list(adapt_delta = 0.99),   stanvar_function = growth_richards_stanvar(),   expose_functions = TRUE,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Bayesian Richards Growth Model â growth_richards_model","text":"data data.frame experimental data. Must contain column representing treatment, response predictors specified formula. formula bpformula object. create growth model formula, use growth_richards_formula() prior brmspriors data.frame K, K0, rate, lambda, nu. create prior, use growth_richards_prior() init initial values parameters modeled. create init, use growth_richards_init() iter numeric value number iterations model runs. Increasing iter can help model convergence control named list parameters control sampler's behavior. Adding max_treedepth giving greater value 10 can improve model convergence stanvar_function Stan code model expose_functions logical. Expose stan functions model. needed e.g. run brms::loo_compare() ... additional arguments passed brms::brm()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Bayesian Richards Growth Model â growth_richards_model","text":"bpfit wraps brms::brmsfit()","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Bayesian Richards Growth Model â growth_richards_model","text":"","code":"if (FALSE) {   BayesPharma::growth_sigmoid_model(     data = data,     formula = BayesPharma::growth_richards_formula(predictors = 0 + drug)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Prior for the Richards Growth Model â growth_richards_prior","title":"Create a Prior for the Richards Growth Model â growth_richards_prior","text":"Creates priors Richards growth model. function arguments K, K0, rate, lambda, nu NULL, normal distribution priors set. like set parameter constant, enter numeric value function argument. distribution options, reference brms::prior Prior Choice Recommendations","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Prior for the Richards Growth Model â growth_richards_prior","text":"","code":"growth_richards_prior(   K = brms::prior(prior = normal(1, 0.5), nlpar = \"K\"),   K0 = brms::prior(prior = normal(0, 0.5), nlpar = \"K0\"),   rate = brms::prior(prior = normal(2, 0.5), nlpar = \"rate\", lb = 0),   lambda = brms::prior(prior = normal(0.5, 0.5), nlpar = \"lambda\"),   nu = brms::prior(prior = normal(1, 1), nlpar = \"nu\", lb = 0),   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Prior for the Richards Growth Model â growth_richards_prior","text":"K brms::brmsprior() numeric. Prior K parameter. (Default: normal(1, 0.5)). K0 brms::brmsprior() numeric. Prior K0 parameter. (Default: normal(0, 0.5)). rate brms::brmsprior() numeric. Prior rate parameter. (Default: normal(1, 1) lower bound 0). lambda brms::brmsprior() numeric. Prior lambda parameter. (Default: normal(0.5, 0.5)). nu brms::brmsprior() numeric. Prior nu parameter.  (Default: normal(1, 1) lower bound 0). ... additional brms::brmsprior() objects.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Prior for the Richards Growth Model â growth_richards_prior","text":"brms::brmsprior()  data.frame","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Prior for the Richards Growth Model â growth_richards_prior","text":"","code":"if (FALSE) { priors <- growth_richards_prior(   K = brms::prior(prior = normal(100, 20), nlpar = \"K\"),   nu = brms::prior(prior = normal(2, 4), nlpar = \"nu\"),   lambda = 1) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan Code for the Richards Growth Function. â growth_richards_stanvar","title":"Stan Code for the Richards Growth Function. â growth_richards_stanvar","text":"Stan Code Richards Growth Function.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan Code for the Richards Growth Function. â growth_richards_stanvar","text":"","code":"growth_richards_stanvar()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_stanvar.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stan Code for the Richards Growth Function. â growth_richards_stanvar","text":"stanvar script Richard growth model response equation.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_richards_stanvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stan Code for the Richards Growth Function. â growth_richards_stanvar","text":"","code":"if (FALSE) { brms::brm(   data = data.frame(     response = ...,     time = ...),   formula = brms::brmsformula(     response ~ growth_richards(K, K0, rate, lambda, nu, time),     K + K0 + rate + lambda + nu ~ 1,     nl = TRUE),   prior = ...,   init =  ...,   stanvars = BayesPharma::growth_sigmoid_stanvar()) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Sigmoid growth function â growth_sigmoid","title":"Sigmoid growth function â growth_sigmoid","text":"Functional form sigmoid growth model, related Richards growth model setting nu = 1. parameterization follows (Zwietering, 1990) grofit:   See vignettes(topic = \"derive_growth_model\", package = \"BayesPharma\")","code":"K      = **carrying capacity**, `K = response(time = Inf)`. The          \\pkg{grofit} package calls this parameter `A`. `K` has the same          units as the `response`. K0     = **initial population size** `K0 = response(time = 0)`. The          \\pkg{grofit} package assumes `K0=0`. `K0` has the same units as          the `response`. rate   = **maximum growth rate** `rate = max[d(response)/d(time)]`. The          \\pkg{grofit} package calls this `mu`. `rate` has the units of          `response/time` lambda = **duration of the lag-phase** the time point at which the          tangent through the growth curve when it achieves the maximum          growth rate crosses the initial population size `K0`. (see          Figure 2 in (Kahm et al., 2010))."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigmoid growth function â growth_sigmoid","text":"","code":"growth_sigmoid(K, K0, rate, lambda, time)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigmoid growth function â growth_sigmoid","text":"K numeric, carrying capacity K0 numeric, initial population size rate numeric, maximum growth rate lambda numeric, duration lag-phase time numeric, time point evaluate response","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sigmoid growth function â growth_sigmoid","text":"numeric, response given time parameters","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sigmoid growth function â growth_sigmoid","text":"Richards growth model given response(time) = K0 + (K - K0)/(1 + nu * exp( 1 + nu + rate/(K - K0) * (1 + nu)^(1 + 1/nu) * (lambda - time))) ^ (1/nu) Setting nu = 1, simplifying gives response(time) = K0 + (K - K0)/(1 + 1 * exp( 1 + 1 + rate/(K - K0) * (1 + 1)^(1 + 1/1) * (lambda - time))) ^ (1/1) response(time) = K0 + (K - K0)/(1 + exp( 2 + rate/(K - K0) * (2)^(2) * (lambda - time))) ^ (1/1) response(time) = K0 + (K - K0)/(1 + exp(2 + rate/(K - K0) * 4 * (lambda - time))) response(time) = K0 + (K - K0)/(1 + exp(4 * rate/(K - K0) * (lambda - time) + 2)) sigmoid growth curve related sigmoid agoinst model setting top = K, bottom = K0, hill = 4 * rate / (K - K0) / log10(e), AC50 = lambda + 2 * log10(e) / hill, log_dose = time, e exp(1): response(time) = bottom + (top - bottom)/(1 + exp(hill/log10(e) * (lambda - time) + 2)) response(time) = bottom + (top - bottom)/(1 + exp(hill/log10(e) * (AC50 - time))) response(log_dose) = bottom + (top - bottom)/(1 + 10^((ac50 - log_dose) * hill))","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sigmoid growth function â growth_sigmoid","text":"Zwietering M. H., Jongenburger ., Rombouts F. M., van 't Riet K., (1990) Modeling Bacterial Growth Curve. Appl. Environ. Microbiol., 56(6), 1875-1881 https://doi.org/10.1128/aem.56.6.1875-1881.1990 Kahm, M., Hasenbrink, G., Lichtenberg-FratÃ©, H., Ludwig, J., & Kschischo, M. (2010). grofit: Fitting Biological Growth Curves R. J. Stat. Softw., 33(7), 1â21. https://doi.org/10.18637/jss.v033.i07","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sigmoid growth function â growth_sigmoid","text":"","code":"if (FALSE) {  # Generate Sigmoid growth curve  data <- data.frame(    time = seq(0, 2, length.out = 101)) |>      dplyr::mutate(        response = stats::rnorm(          n = length(time),          mean = BayesPharma::growth_sigmoid(            K = 1,            K0 = 0,            rate = 2,            lambda = 0.5,            time = time),        sd = .2)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Formula for the Sigmoid Growth Model â growth_sigmoid_formula","title":"Create a Formula for the Sigmoid Growth Model â growth_sigmoid_formula","text":"set-sigmoid growth model formula use growth_sigmoid_model(). functional form   parameterization follows (Zwietering, 1990) grofit:   See vignettes(topic = \"derive_growth_model\", package = \"BayesPharma\")","code":"response ~ growth_sigmoid(K, K0, rate, lambda, time) K      = **carrying capacity**, `K = response(time = Inf)`. The          \\pkg{grofit} package calls this parameter `A`. `K` has the same          units as the `response`. K0     = **initial population size** `K0 = response(time = 0)`. The          \\pkg{grofit} package assumes `K0=0`. `K0` has the same units as          the `response`. rate   = **maximum growth rate** `rate = max[d(response)/d(time)]`. The          \\pkg{grofit} package calls this `mu`. `rate` has the units of          `response/time` lambda = **duration of the lag-phase** the time point at which the          tangent through the growth curve when it achieves the maximum          growth rate crosses the initial population size `K0`. (see          Figure 2 in (Kahm et al., 2010))."},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Formula for the Sigmoid Growth Model â growth_sigmoid_formula","text":"","code":"growth_sigmoid_formula(   treatment_variable = \"time\",   treatment_units = \"hours\",   response_variable = \"response\",   response_units = NULL,   predictors = 1,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Formula for the Sigmoid Growth Model â growth_sigmoid_formula","text":"treatment_variable character variable representing time treatment treatment_units character units time variable response_variable character variable representing response treatment response_units character units response predictors Additional formula objects specify predictors non-linear parameters. .e. perturbations/experimental differences modeled separately? (Default: 1) random effect taken consideration? .e. cell number, plate number, etc. ... additional arguments brms::brmsformula()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Formula for the Sigmoid Growth Model â growth_sigmoid_formula","text":"bpformula, subclass brms::brmsformula can passed growth_sigmoid_model().","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_formula.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a Formula for the Sigmoid Growth Model â growth_sigmoid_formula","text":"Zwietering M. H., Jongenburger ., Rombouts F. M., van 't Riet K., (1990) Modeling Bacterial Growth Curve. Appl. Environ. Microbiol., 56(6), 1875-1881 https://doi.org/10.1128/aem.56.6.1875-1881.1990 Kahm, M., Hasenbrink, G., Lichtenberg-FratÃ©, H., Ludwig, J., & Kschischo, M. (2010). grofit: Fitting Biological Growth Curves R. J. Stat. Softw., 33(7), 1â21. https://doi.org/10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Formula for the Sigmoid Growth Model â growth_sigmoid_formula","text":"","code":"if (FALSE) {   # Data has a string column drug_id with drug identifiers   # Fit a separate model for each drug   BayesPharma::growth_sigmoid_formula(predictors = 0 + drug_id)    # Data has a string column plate_id with plate identifiers   # Estimate the change in response for each plate relative to a global   # baseline.   BayesPharma::growth_sigmoid_formula(predictors = plate_id)    # data has columns drug_id and plate_id   # fit a multilevel model where the drug effect depends on the plate   BayesPharma::growth_sigmoid_formula(predictors = 0 + (drug_id|plate_id)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Initialization for the Sigmoid Growth Model â growth_sigmoid_init","title":"Create Initialization for the Sigmoid Growth Model â growth_sigmoid_init","text":"Creating initial values sigmoid growth model parameters can passed .  growth_sigmoid_model.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Initialization for the Sigmoid Growth Model â growth_sigmoid_init","text":"","code":"growth_sigmoid_init(K = 1, K0 = 0, rate = 1, lambda = 0.5)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Initialization for the Sigmoid Growth Model â growth_sigmoid_init","text":"K numeric numeric returning function K0 numeric numeric returning function rate numeric numeric returning function lambda numeric numeric returning function units time","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Initialization for the Sigmoid Growth Model â growth_sigmoid_init","text":"input [brm][brms::brm](init = ...)","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Initialization for the Sigmoid Growth Model â growth_sigmoid_init","text":"","code":"if (FALSE) { init <- BayesPharma::growth_sigmoid_init(   A = 100) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Bayesian Sigmoid Growth Model â growth_sigmoid_model","title":"Run the Bayesian Sigmoid Growth Model â growth_sigmoid_model","text":"additional information additional function arguments, reference: brms::brms() stan documentation.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Bayesian Sigmoid Growth Model â growth_sigmoid_model","text":"","code":"growth_sigmoid_model(   data,   formula = growth_richards_formula(),   prior = growth_richards_prior(),   init = growth_richards_init(),   iter = 8000,   control = list(adapt_delta = 0.99),   stanvar_function = growth_richards_stanvar(),   expose_functions = TRUE,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Bayesian Sigmoid Growth Model â growth_sigmoid_model","text":"data data.frame experimental data. Must contain column representing treatment, response predictors specified formula. formula bpformula object. create growth model formula, use growth_sigmoid_formula() prior brmspriors data.frame K, K0, rate, lambda. create prior, use growth_sigmoid_prior(). init initial values parameters modeled. create init, use growth_sigmoid_init() iter numeric value number iterations model runs. Increasing iter can help model convergence control named list parameters control sampler's behavior. Adding max_treedepth giving greater value 10 can improve model convergence stanvar_function Stan code model expose_functions logical. Expose stan functions model. needed e.g. run brms::loo_compare() ... additional arguments passed brms::brm()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the Bayesian Sigmoid Growth Model â growth_sigmoid_model","text":"bpfit wrapper brms::brmsfit()","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the Bayesian Sigmoid Growth Model â growth_sigmoid_model","text":"","code":"if (FALSE) {   BayesPharma::growth_sigmoid_model(     data = data,     formula = BayesPharma::growth_richards_formula(predictors = 0 + drug)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Prior for the Sigmoid Growth Model â growth_sigmoid_prior","title":"Create a Prior for the Sigmoid Growth Model â growth_sigmoid_prior","text":"Creates priors sigmoid growth model. function arguments K, K0, rate, lambda, NULL, normal distribution priors set. like set parameter constant, enter numeric  value function argument. distribution options, reference brms::prior Prior Choice Recommendations","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Prior for the Sigmoid Growth Model â growth_sigmoid_prior","text":"","code":"growth_sigmoid_prior(   K = brms::prior(prior = normal(1, 0.5), nlpar = \"K\"),   K0 = brms::prior(prior = normal(0, 0.5), nlpar = \"K0\"),   rate = brms::prior(prior = normal(2, 0.5), nlpar = \"rate\", lb = 0),   lambda = brms::prior(prior = normal(0.5, 0.5), nlpar = \"lambda\"),   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Prior for the Sigmoid Growth Model â growth_sigmoid_prior","text":"K brms::brmsprior() numeric. Prior K parameter. (Default: normal(1, 0.5)) K0 brms::brmsprior() numeric. Prior K0 parameter. (Default: normal(0, 0.5)) rate brms::brmsprior() numeric. Prior rate parameter. (Default: normal(1, 1) lower bound 0). lambda brms::brmsprior() numeric. Prior lambda parameter. (Default: normal(0.5, 0.5)). ... additional brms::brmsprior() objects.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Prior for the Sigmoid Growth Model â growth_sigmoid_prior","text":"brms::brmsprior()  data.frame","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Prior for the Sigmoid Growth Model â growth_sigmoid_prior","text":"","code":"if (FALSE) { priors <- growth_sigmoid_prior(   K = brms::prior(prior = normal(100, 20), nlpar = \"K\"),   lambda = 1) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan Code for the Growth Richards Function. â growth_sigmoid_stanvar","title":"Stan Code for the Growth Richards Function. â growth_sigmoid_stanvar","text":"Stan Code Growth Richards Function.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan Code for the Growth Richards Function. â growth_sigmoid_stanvar","text":"","code":"growth_sigmoid_stanvar()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_stanvar.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stan Code for the Growth Richards Function. â growth_sigmoid_stanvar","text":"stanvar script sigmoid growth model response equation","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/growth_sigmoid_stanvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stan Code for the Growth Richards Function. â growth_sigmoid_stanvar","text":"","code":"if (FALSE) { brms::brm(   data = data.frame(     response = ...,     time = ...),   formula = brms::brmsformula(     response ~ growth_sigmoid(K, K0, rate, lambda, time),     K + K0 + rate + lambda ~ 1,     nl = TRUE),   prior = ...,   init =  ...,   stanvars = BayesPharma::growth_sigmoid_stanvar()) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/kor_antag.html","id":null,"dir":"Reference","previous_headings":"","what":"Dose Response Measurements of Four Different Kappa Opioid Receptor\nAntagonists â kor_antag","title":"Dose Response Measurements of Four Different Kappa Opioid Receptor\nAntagonists â kor_antag","text":"data set containing drugs used, cell id, log dose response measured , reference, raw, normalized measurement","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/kor_antag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dose Response Measurements of Four Different Kappa Opioid Receptor\nAntagonists â kor_antag","text":"","code":"kor_antag"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/kor_antag.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dose Response Measurements of Four Different Kappa Opioid Receptor\nAntagonists â kor_antag","text":"data.frame includes dose-response measurements","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/kor_antag.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dose Response Measurements of Four Different Kappa Opioid Receptor\nAntagonists â kor_antag","text":"https://github.com/maomlab/BayesPharma","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Formula for the Michaelis Menten Enzyme Kinetics Model â michaelis_menten_formula","title":"Define a Formula for the Michaelis Menten Enzyme Kinetics Model â michaelis_menten_formula","text":"set-Michaelis Menten enzyme kinetics model formula define ordinary differential equation model kcat, kM model parameters use michaelis_menten_model.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Formula for the Michaelis Menten Enzyme Kinetics Model â michaelis_menten_formula","text":"","code":"michaelis_menten_formula(   series_index_variable = \"series_index\",   treatment_variable = \"time\",   treatment_units = \"seconds\",   ET_variable = \"ET\",   ET_units = \"mg/ml\",   ST_variable = \"ST\",   ST_units = \"mg/ml\",   response_variable = \"P\",   response_units = \"mg/ml\",   predictors = 1,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Formula for the Michaelis Menten Enzyme Kinetics Model â michaelis_menten_formula","text":"series_index_variable character variable indexing measurements part common time series treatment_variable character variable representing time treatment treatment_units character units treatment variable ET_variable character variable representing total enzyme concentration ET_units character variable representing units enzyme concentration ST_variable character variable representing total substrate concentration ST_units character variable representing units substrate concentration response_variable character variable representing product response_units character units product predictors expression predictors kcat kM parameters ... additional arguments passed brms::brmsformula()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Formula for the Michaelis Menten Enzyme Kinetics Model â michaelis_menten_formula","text":"bpformula, subclass brms::brmsformula can passed michaelis_menten_model().","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_formula.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Define a Formula for the Michaelis Menten Enzyme Kinetics Model â michaelis_menten_formula","text":"Choi, B., Rempala, G.. & Kim, J.K. Beyond Michaelis-Menten equation: Accurate efficient estimation enzyme kinetic parameters. Sci Rep 7, 17018 (2017). https://doi.org/10.1038/s41598-017-17072-z","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_genquant_stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan Code for the Michaelis Menten Model Generated Quantities â michaelis_menten_genquant_stanvar","title":"Stan Code for the Michaelis Menten Model Generated Quantities â michaelis_menten_genquant_stanvar","text":"substrate concentration varied, generally possible fit kcat kM. However, possible fit ratio kcat/kM. Including rstan::stan code generate samples kcat/kM.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_genquant_stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan Code for the Michaelis Menten Model Generated Quantities â michaelis_menten_genquant_stanvar","text":"","code":"michaelis_menten_genquant_stanvar()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_genquant_stanvar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stan Code for the Michaelis Menten Model Generated Quantities â michaelis_menten_genquant_stanvar","text":"Choi, B., Rempala, G.. & Kim, J.K. Beyond Michaelis-Menten equation: Accurate efficient estimation enzyme kinetic parameters. Sci Rep 7, 17018 (2017). https://doi.org/10.1038/s41598-017-17072-z","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Parameter Values for the Michaeli Menten Enzyme Kinetic Model â michaelis_menten_init","title":"Initialize Parameter Values for the Michaeli Menten Enzyme Kinetic Model â michaelis_menten_init","text":"Initialize Parameter Values Michaeli Menten Enzyme Kinetic Model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Parameter Values for the Michaeli Menten Enzyme Kinetic Model â michaelis_menten_init","text":"","code":"michaelis_menten_init(kcat = 4, kM = 4)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Parameter Values for the Michaeli Menten Enzyme Kinetic Model â michaelis_menten_init","text":"kcat numeric initial value kcat parameter Michaelis Menten model kM numeric initial value kM parameter Michaelis Menten model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Parameter Values for the Michaeli Menten Enzyme Kinetic Model â michaelis_menten_init","text":"input [michaelis_menten_model](init = ...) parameter.","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model for the Michaeli Menten Enzyme Kinetics Model â michaelis_menten_model","title":"Model for the Michaeli Menten Enzyme Kinetics Model â michaelis_menten_model","text":"Model Michaeli Menten Enzyme Kinetics Model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model for the Michaeli Menten Enzyme Kinetics Model â michaelis_menten_model","text":"","code":"michaelis_menten_model(   data,   formula = michaelis_menten_formula(),   prior = michaelis_menten_prior(),   init = michaelis_menten_init(),   iter = 8000,   control = list(adapt_delta = 0.99),   stanvar_function = c(BayesPharma::michaelis_menten_stanvar(),     BayesPharma::michaelis_menten_genquant_stanvar()),   expose_functions = TRUE,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model for the Michaeli Menten Enzyme Kinetics Model â michaelis_menten_model","text":"data data.frame experimental data. must contain columns time P predictors specified formula. formula brms::brmsformula object. create dose-response brms::brmsformula, use michaelis_menten_formula function. prior brms::brmsprior kcat, kM. Use michaelis_menten_formula() create priors use . init list lists, numeric value, \"random\" initial values parameters modeled. iter numeric iterations model runs. Increasing iter can help model convergence. control named list parameters control sampler's behavior. Adding max_treedepth giving greater value 10 can improve model convergence. stanvar_function stan code model expose_functions logical. Expose BayesPharma functions model ... additional arguments passed brms::brm().","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model for the Michaeli Menten Enzyme Kinetics Model â michaelis_menten_model","text":"bpfit object, wrapper around brms::brmsfit object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model for the Michaeli Menten Enzyme Kinetics Model â michaelis_menten_model","text":"Choi, B., Rempala, G.. & Kim, J.K. Beyond Michaelis-Menten equation: Accurate efficient estimation enzyme kinetic parameters. Sci Rep 7, 17018 (2017). https://doi.org/10.1038/s41598-017-17072-z","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_model_generate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Data from the Michaelis Menten Enzyme Kinetics â michaelis_menten_model_generate","title":"Generate Data from the Michaelis Menten Enzyme Kinetics â michaelis_menten_model_generate","text":"Generate data Michaelis Menten enzyme kinetics ordinary differential equation described (Choi, et al., 2017, DOI: 10.1038/s41598-017-17072-z). Consider kinetic rate equation","code":"kf                  --->    kcat           E + S  <---  C --->  E + P                   kb"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_model_generate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Data from the Michaelis Menten Enzyme Kinetics â michaelis_menten_model_generate","text":"","code":"michaelis_menten_model_generate(time, kcat, kM, ET, ST, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_model_generate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Data from the Michaelis Menten Enzyme Kinetics â michaelis_menten_model_generate","text":"time numeric vector. Increasing time points kcat numeric value catalytic rate constant kM numeric value Michaelis rate constant ET numeric value total enzyme concentration ST numeric value total substrate concentration ... additional arguments deSolve::ode()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_model_generate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Data from the Michaelis Menten Enzyme Kinetics â michaelis_menten_model_generate","text":"run Michaelis Menten ordinary differential equation forwards starting initial product concentration 0 specified kcat kM parameters specified time steps.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_model_generate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Data from the Michaelis Menten Enzyme Kinetics â michaelis_menten_model_generate","text":"free enzyme (E) reversibly binds substrate (S) form complex (C) forward backward rate constants kf kb, irreversibly catalyzed product (P), rate constant kcat, releasing enzyme catalyze additional substrate. total enzyme concentration defined ET := E + C. total substrate product concentration defined ST := S + C + P. Michaelis constant defined kM := (kb + kcat) / kf. kcat rate constant determines maximum turn saturating substrate concentrations, Vmax := kcat * ET. rate constants kcat kM can estimated monitoring product accumulation time (enzyme progress curves), varying enzyme substrate concentrations. (Choi, et al, 2017, equation 2, Michaelis Menten differential equation defined (Choi, et al. 2017) prove, tQ model valid K = kb/kf dissociation constant.","code":"Observed data:      M     = number of measurements        # number of measurements      t[M]  = time                          # measured in seconds      Pt[M] = product                       # product produced at time t      ST    = substrate total concentration # specified for each experiment      ET    = enzyme total concentration    # specified for each experiment    Model parameters:     kcat    # catalytic constant (min^-1)     kM      # Michaelis constant ()    ODE formulation:     dPdt = kcat * (              ET + kM + ST - Pt +              -sqrt((ET + kM + ST - Pt)^2 - 2 * ET * (ST - Pt))) / 2    initial condition:      P := 0 K/(2*ST) * (ET+kM+ST) / sqrt((ET+kM+ST+P)^2 - 4*ET(ST-P)) << 1,"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_model_generate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate Data from the Michaelis Menten Enzyme Kinetics â michaelis_menten_model_generate","text":"Choi, B., Rempala, G.. & Kim, J.K. Beyond Michaelis-Menten equation: Accurate efficient estimation enzyme kinetic parameters. Sci Rep 7, 17018 (2017). https://doi.org/10.1038/s41598-017-17072-z","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Prior for the Michaeli Menten Enzyme Kinetics Model â michaelis_menten_prior","title":"Create a Prior for the Michaeli Menten Enzyme Kinetics Model â michaelis_menten_prior","text":"kcat kM parameters, default priors gamma(4, 1). use gamma distribution naturally lower bounded 0. first parameter shape, alpha=4, second rate, beta=1. mean gamma distributions alpha/beta variance alpha/beta^2.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Prior for the Michaeli Menten Enzyme Kinetics Model â michaelis_menten_prior","text":"","code":"michaelis_menten_prior(   kcat = brms::prior_string(prior = \"gamma(4, 1)\", lb = 0, nlpar = \"kcat\"),   kM = brms::prior_string(prior = \"gamma(4, 1)\", lb = 0, nlpar = \"kM\") )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Prior for the Michaeli Menten Enzyme Kinetics Model â michaelis_menten_prior","text":"kcat prior kcat parameter. Given numeric value, used constant estimated. kM prior kM parameter. Given numeric value, used constant estimated.","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan Code for the Michaelis Menten Kinetics Model â michaelis_menten_stanvar","title":"Stan Code for the Michaelis Menten Kinetics Model â michaelis_menten_stanvar","text":"Michaelis Menten model ordinary differential equation model change product function total enzyme concentration (ET), total substrate concentration (ST), Michaelis constant (kM) catalytic constant (kcat). implement Michaelis Menten model rstan::stan, function michaelis_menten_ode defined passed michaelis_menten_single integrate using stiff backward differentiation formula (BDF) method. fit multiple time series one model, michaelis_menten_multiple can used. Note handle fitting time-series different numbers observations, additional series_index argument used. Note observations time-series sequential order supplied data.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan Code for the Michaelis Menten Kinetics Model â michaelis_menten_stanvar","text":"","code":"michaelis_menten_stanvar()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_stanvar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stan Code for the Michaelis Menten Kinetics Model â michaelis_menten_stanvar","text":"Choi, B., Rempala, G.. & Kim, J.K. Beyond Michaelis-Menten equation: Accurate efficient estimation enzyme kinetic parameters. Sci Rep 7, 17018 (2017). https://doi.org/10.1038/s41598-017-17072-z","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/michaelis_menten_stanvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stan Code for the Michaelis Menten Kinetics Model â michaelis_menten_stanvar","text":"","code":"if (FALSE) { brms::brm(   data = ...,   formula = brms::brmsformula(     P ~ michaelis_menten_multiple(       series_index, time, kcat, kM, ET, ST),     kcat + kM ~ 1,     nl = TRUE,     loop = FALSE),   prior = ...,   init =  ...,   stanvars = BayesPharma::michaelis_menten_stanvar()) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_density_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Density Distribution of Model Parameters â plot_density_distribution","title":"Plot Density Distribution of Model Parameters â plot_density_distribution","text":"function useful observe distributions priors set brmsfit model. adding sample_prior = \"\" sigmoid_model brmsfit model, model samples prior distributions can observed using plot function verify values intended covered included.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_density_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Density Distribution of Model Parameters â plot_density_distribution","text":"","code":"plot_density_distribution(   model,   pars = NULL,   labeller = NULL,   title_label = \"Density Distributions\" )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_density_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Density Distribution of Model Parameters â plot_density_distribution","text":"model `brms::brmsfit model. pars parameters choose (Default b__Intercept') labeller strip 'b_' '_Intercept' parameter labels title_label character plot title.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_density_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Density Distribution of Model Parameters â plot_density_distribution","text":"ggplot2::ggplot() object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_density_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Density Distribution of Model Parameters â plot_density_distribution","text":"","code":"if (FALSE) {   plot_density_distribution(     model = my_sigmoid_model) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_drc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Plot of a DRC Model â plot_drc","title":"Create Plot of a DRC Model â plot_drc","text":"Create Plot DRC Model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_drc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Plot of a DRC Model â plot_drc","text":"","code":"plot_drc(   model,   newdata = NULL,   predict_args = list(interval = \"prediction\"),   aes_mapping = ggplot2::aes(x = .data[[\"log_dose\"]], y = .data[[\"response\"]]),   title = NULL )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_drc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Plot of a DRC Model â plot_drc","text":"model drc::drm model object generated drc::drm() newdata data.frame predictions made. Default: use range treatment values model object. predict_args list arguments passed predict(model, ...) including interval generate ribbon given type, see drc::predict.drc() details. aes_mapping [ggplot2::aes](...) mapping columns model data new data plot. (Default: ggplot2::aes](x = log_dose, y = response)) title character giving plot title","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_posterior_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Posterior Density Distributions of modeled parameters â plot_posterior_density","title":"Plot Posterior Density Distributions of modeled parameters â plot_posterior_density","text":"plots bpfit() model density distribution parameter mean, lower confidence interval, upper confidence interval.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_posterior_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Posterior Density Distributions of modeled parameters â plot_posterior_density","text":"","code":"plot_posterior_density(   model,   predictors_col_name = \"_Intercept\",   half_max_label = \"ac50\",   l_ci = 0.025,   u_ci = 0.975,   title_label = \"Posterior Density Plots w/ Mean & 95% CI\" )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_posterior_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Posterior Density Distributions of modeled parameters â plot_posterior_density","text":"model bpfit model. predictors_col_name character predictors column input data.frame. Predictors perturbations tested experiment (.e. Drug, Temperature, etc.). half_max_label character label half maximal fits type experiment done (.e. ec50, ic50, ed50, id50, ld50, etc.). l_ci numeric unit lower confidence interval u_ci numeric unit upper confidence interval title_label string plot title.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_posterior_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Posterior Density Distributions of modeled parameters â plot_posterior_density","text":"ggplot2::ggplot() object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_posterior_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Posterior Density Distributions of modeled parameters â plot_posterior_density","text":"","code":"if (FALSE) {   plot_posterior_density(     model = my_sigmoid_model,     predictors_col_name = \"predictors\",     half_max_label = \"ic50\",     l_ci = 0.025,     u_ci = 0.975,     title_label = \"Posterior Density Plots with Mean and 95% CI\") }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_posterior_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of Posterior Model Fit Draws â plot_posterior_draws","title":"Plot of Posterior Model Fit Draws â plot_posterior_draws","text":"plot sample model fit draws posterior distribution expected mean median quantile intervals.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_posterior_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of Posterior Model Fit Draws â plot_posterior_draws","text":"","code":"plot_posterior_draws(   model,   newdata = NULL,   treatment_variable = NULL,   treatment_units = NULL,   treatment_from = NULL,   treatment_to = NULL,   response_variable = NULL,   response_units = NULL,   title = \"Dose-Response Posterior Draws\",   n = 50,   point_size = 0.75,   jitter_height = 0,   jitter_width = 0 )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_posterior_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of Posterior Model Fit Draws â plot_posterior_draws","text":"model bpfit object resulting fitting BayesPharma model newdata data.frame NULL new data use predictions. Default data.frame predictor treatment variable. treatment_variable character NULL. NULL treatment variable name looked model. treatment variable model$data newdata supplied must column corresponding treatment variable. treatment_units character NULL. NULL treatment units looked model. treatment units used label X-axis plot. treatment_from numeric NULL, lower bound treatment range. NULL, use (finite) lower bound treatment variable model data. treatment_to numeric NULL, upper bound treatment range. NULL, use (finite) upper bound treatment variable model data. response_variable string NULL. NULL response variable name looked model. response variable model$data newdata supplied must column corresponding response variable. response_units character NULL. NULL response units looked model. response units used label Y-axis plot. title character name plot n numeric value number draws show. point_size numeric. ggplot2::geom_jitter() point size. jitter_height numeric. height distance overlapping points. jitter_width numeric. width distance overlapping points.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_posterior_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of Posterior Model Fit Draws â plot_posterior_draws","text":"ggplot2::ggplot object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_posterior_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of Posterior Model Fit Draws â plot_posterior_draws","text":"","code":"if (FALSE) {   # Consider a model named my_model and data named my_data with a column   # named predictors containing multiple different perturbations.   plot_posterior_draws(     model = my_model,     newdata = my_data,     predictors_col_name = \"predictors\",     lower = -12,     upper = -3,     n = 50,     facet_var = predictors,     jitter_width = 0.10,     title = \"Dose-Response Posterior Draws\",     xlab = \"Log[Molar]\",     ylab = \"Response\") }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_pp_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Posterior Predictive Check â plot_pp_check","title":"Perform Posterior Predictive Check â plot_pp_check","text":"Given brms model, perform graphical posterior predictive check. pp_check brms package different plot types analyze model fit comparing observed data generated data model. documentation pp_check: http://paul-buerkner.github.io/brms/reference/pp_check.brmsfit.html documentation pp_check plot types PPC plotting functions: https://mc-stan.org/bayesplot/reference/PPC-overview.html","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_pp_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Posterior Predictive Check â plot_pp_check","text":"","code":"plot_pp_check(model, plot_type = \"dens_overlay\", n = 50, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_pp_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Posterior Predictive Check â plot_pp_check","text":"model brmsfit model. plot_type character plot type. n numeric number posterior draws used. ... additional arguments brms::pp_check().","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_pp_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Posterior Predictive Check â plot_pp_check","text":"ggplot2::ggplot() object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_pp_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Posterior Predictive Check â plot_pp_check","text":"","code":"if (FALSE) { # Consider a dose response model with the plot type being 10 box plots BayesPharma::plot_pp_check(   model = my_dose_response_model,   plot_type = \"box_plot\",   n = 10) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_prior_posterior_densities.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Prior and Posterior Marginal Distributions â plot_prior_posterior_densities","title":"Plot Prior and Posterior Marginal Distributions â plot_prior_posterior_densities","text":"Generate plot shows model variable distribution marginal posterior uncertainty overlaid distribution marginal prior uncertainty.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_prior_posterior_densities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Prior and Posterior Marginal Distributions â plot_prior_posterior_densities","text":"","code":"plot_prior_posterior_densities(   model,   predictors_col_name = \"_Intercept\",   half_max_label = \"ec50\",   title_label = \"Prior Posterior Density\" )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_prior_posterior_densities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Prior and Posterior Marginal Distributions â plot_prior_posterior_densities","text":"model bpfit object resulting fitting BayesPharma model predictors_col_name string expression predictors column input data.frame (default = \"_Intercept\"). Predictors perturbations tested experiment (.e. Drug, Temperature, etc.). half_max_label string label half maximal fits type experiment done (.e. ec50, ic50, ed50, id50, ld50, etc.). title_label string plot title.  (default = \"Prior Posterior Density Plots\")","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_prior_posterior_densities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Prior and Posterior Marginal Distributions â plot_prior_posterior_densities","text":"ggplot2::ggplot() object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_prior_posterior_densities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Prior and Posterior Marginal Distributions â plot_prior_posterior_densities","text":"","code":"if (FALSE) {   plot_prior_posterior_densities(     model = my_sigmoid_model,     predictors_col_name = \"predictors\",     half_max_response = \"ic50\",     title_label = \"Prior Posterior Density Plots\") }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_sigmoid_functional_form.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Sigmoid Functional Form with Labeled Parameters â plot_sigmoid_functional_form","title":"Plot the Sigmoid Functional Form with Labeled Parameters â plot_sigmoid_functional_form","text":"Generates plot sigmoid() functional form values parameters ac50, hill, top, bottom labeled.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_sigmoid_functional_form.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Sigmoid Functional Form with Labeled Parameters â plot_sigmoid_functional_form","text":"","code":"plot_sigmoid_functional_form(   ac50,   hill,   top,   bottom,   log_dose,   treatment_units,   response_units )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_sigmoid_functional_form.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Sigmoid Functional Form with Labeled Parameters â plot_sigmoid_functional_form","text":"ac50 numeric value ac50 parameter, either ec50 sigmoid_agonist_formula() ic50 sigmoid_antagonist_formula() hill numeric value hill parameter top numeric value top parameter bottom numeric value bottom parameter log_dose numeric vector treatment values treatment_units character units log dose response_units character units response","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_sigmoid_functional_form.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Sigmoid Functional Form with Labeled Parameters â plot_sigmoid_functional_form","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_sigmoid_functional_form.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Sigmoid Functional Form with Labeled Parameters â plot_sigmoid_functional_form","text":"","code":"if (FALSE) {   plot_sigmoid_functional_form(     ac50 = -6,     hill = -1,     top = 100,     bottom = 0,     treatment_label = \"Log[Molar]\",     response_label = \"% Baseline\")}"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_synergy_checkerboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Synergy Checkerboard â plot_synergy_checkerboard","title":"Plot Synergy Checkerboard â plot_synergy_checkerboard","text":"Plot Synergy Checkerboard","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_synergy_checkerboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Synergy Checkerboard â plot_synergy_checkerboard","text":"","code":"plot_synergy_checkerboard(   data,   treatment_1_label = \"Treatment 1\",   treatment_2_label = \"Treatment 2\",   treatment_1_units = NULL,   treatment_2_units = NULL,   plot_zero_dose = TRUE,   contour_color = \"gold\" )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_synergy_checkerboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Synergy Checkerboard â plot_synergy_checkerboard","text":"data data.frame columns dose1, dose2, response treatment_1_label character used make default title axis labels treatment_2_label character used make default title axis labels treatment_1_units character used make default axis labels treatment_2_units character used make default axis labels plot_zero_dose logical plotted log scale, zero doses -Inf, show plot, add slight separation axis. contour_color character color contour lines","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/plot_synergy_checkerboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Synergy Checkerboard â plot_synergy_checkerboard","text":"ggplot2::ggplot plot light-blue dark-blue tiles dose response. Individual plot elements can -written plot can saved ggplot2::ggsave()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Prepare an Init for a brms Model â prepare_init","title":"Helper Function to Prepare an Init for a brms Model â prepare_init","text":"Helper Function Prepare Init brms Model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Prepare an Init for a brms Model â prepare_init","text":"","code":"prepare_init(init)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Prepare an Init for a brms Model â prepare_init","text":"init function returning numeric array length 1 numeric value.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to Prepare an Init for a brms Model â prepare_init","text":"function returning numeric  array length 1.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Prepare a Prior for a brms Model â prepare_prior","title":"Helper Function to Prepare a Prior for a brms Model â prepare_prior","text":"extends brms::prior() allowing just taking numeric value rather constant(<value>) specify constant prior brms::brmsprior given, checks specified arguments","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Prepare a Prior for a brms Model â prepare_prior","text":"","code":"prepare_prior(prior, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Prepare a Prior for a brms Model â prepare_prior","text":"prior brms::brmsprior() numeric. ... additional arguments brms::prior_string(). prior brms::brmsprior() check slots given values. prior numeric, arguments passed brms::prior_string()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to Prepare a Prior for a brms Model â prepare_prior","text":"brms::brmsprior()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper Function to Prepare a Prior for a brms Model â prepare_prior","text":"used building BayesPharma models allow user specified priors make sure right parameters make sure model well specified.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/prepare_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function to Prepare a Prior for a brms Model â prepare_prior","text":"","code":"if (FALSE) {   # user should specify a prior for hill, but they misspell it:   user_hill_prior <- brms::prior(     prior = normal(1, 1),     nlpar = \"hilll\",     ub = 0)    # in a script where we want to validate the user_hill_prior   hill_prior <- BayesPharma:::prepare_prior(     prior = user_hill_prior,     nlpar = \"hill\")    # gives an assert error that nlpar is not set correctly }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Sigmoid Function â sigmoid","title":"Sigmoid Function â sigmoid","text":"Functional form sigmoid model.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigmoid Function â sigmoid","text":"","code":"sigmoid(ac50, hill, top, bottom, log_dose)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigmoid Function â sigmoid","text":"ac50 numeric, log_dose half maximal activity hill numeric, slope curve ac50 units response/log_dose top numeric, value maximal response positive slope, occurs log_dose = Inf, negative slope log_dose = -Inf bottom numeric, value minimal response positive slope, occurs log_dose = -Inf, negative slope log_dose = Inf log_dose numeric, evaluate response log base 10.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sigmoid Function â sigmoid","text":"numeric, response given log_dose parameters","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sigmoid Function â sigmoid","text":"","code":"if (FALSE) {  # Generate an agonist curve with an ec50 of 1 Î¼M with the response  # normalized to [0, 1] over the range 100 nM to 10 Î¼M with half-log steps  data <- data.frame(    log_dose = seq(-7, -5, length.out = 5)) |>      dplyr::mutate(        response = stats::rnorm(          n = length(log_dose),          mean = BayesPharma::sigmoid(            ac50 = -6,            hill = 1,            top = 1,            bottom = 0,            log_dose = log_dose),        sd = .2)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Agonist Sigmoid Formula for the Sigmoid Model â sigmoid_agonist_formula","title":"Create an Agonist Sigmoid Formula for the Sigmoid Model â sigmoid_agonist_formula","text":"set-sigmoid dose response model formula define non-linear model multilevel non-linear model ec50, hill, top, , bottom use sigmoid_model .","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Agonist Sigmoid Formula for the Sigmoid Model â sigmoid_agonist_formula","text":"","code":"sigmoid_agonist_formula(   treatment_variable = \"log_dose\",   treatment_units = \"Log[Molar]\",   response_variable = \"response\",   response_units = NULL,   predictors = 1,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Agonist Sigmoid Formula for the Sigmoid Model â sigmoid_agonist_formula","text":"treatment_variable character variable representing treatment. treatment_units character units treatment. default log base 10 molar concentration. response_variable character variable representing response treatment. response_units character units response. predictors character expression predictors non-linear parameters. .e. perturbations/experimental differences modeled separately? ... additional arguments brms::brmsformula()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Agonist Sigmoid Formula for the Sigmoid Model â sigmoid_agonist_formula","text":"bpformula, subclass brms::brmsformula can passed sigmoid_model().","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Agonist Sigmoid Formula for the Sigmoid Model â sigmoid_agonist_formula","text":"","code":"if (FALSE) {   # Data has a string column drug_id with drug identifiers   # Fit a separate model for each drug   BayesPharma::sigmoid_agonist_formula(predictors = 0 + drug_id)    # Data has a string column plate_id with plate identifiers   # Estimate the change in response for each plate relative to a global   # baseline.   BayesPharma::sigmoid_agonist_formula(predictors = plate_id)    # data has columns drug_id and plate_id   # fit a multilevel model where the drug effect depends on the plate   BayesPharma::sigmoid_agonist_formula(predictors = 0 + (drug_id|plate_id)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Parameter Values for an Agonist Sigmoid Model â sigmoid_agonist_init","title":"Initialize Parameter Values for an Agonist Sigmoid Model â sigmoid_agonist_init","text":"Creating initial values agonist sigmoid model parameters can passed sigmoid_model() along sigmoid_agonist_formula() sigmoid_agonist_prior().","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Parameter Values for an Agonist Sigmoid Model â sigmoid_agonist_init","text":"","code":"sigmoid_agonist_init(ec50 = -6, hill = 1, top = 1, bottom = 0)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Parameter Values for an Agonist Sigmoid Model â sigmoid_agonist_init","text":"ec50 numeric numeric returning function units treatment. treatment log_dose, default value -6 corresponds 1e-6 molar = 1 Î¼M hill numeric numeric returning function units response/log_dose top numeric numeric returning function units response bottom numeric numeric returning function units response","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Parameter Values for an Agonist Sigmoid Model â sigmoid_agonist_init","text":"input [brms::brm](init = ...)","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Parameter Values for an Agonist Sigmoid Model â sigmoid_agonist_init","text":"","code":"if (FALSE) { #Consider an activator that has a max response around 50%, EC50 is estimated #to be around 1 nM, minimum response is known to be 0. init <- BayesPharma::sigmoid_agonist_init(   ec50 = -9,   top = 0.5) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Prior an Agonist Sigmoid Model â sigmoid_agonist_prior","title":"Create a Prior an Agonist Sigmoid Model â sigmoid_agonist_prior","text":"Creates data.frame priors sigmoid agonist model function arguments ec50, hill, top, bottom NULL, default normal distribution priors set. like set parameter constant, enter numeric value function argument. distribution options, reference brms::prior Prior Choice Recommendations","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Prior an Agonist Sigmoid Model â sigmoid_agonist_prior","text":"","code":"sigmoid_agonist_prior(   ec50 = brms::prior(prior = normal(-6, 2.5), nlpar = \"ec50\"),   hill = brms::prior(prior = normal(1, 1), nlpar = \"hill\", lb = -0.01),   top = brms::prior(prior = normal(1, 0.5), nlpar = \"top\"),   bottom = brms::prior(prior = normal(0, 0.5), nlpar = \"bottom\"),   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Prior an Agonist Sigmoid Model â sigmoid_agonist_prior","text":"ec50 brms::brmsprior numeric. Prior ec50 parameter.  Setting ec50 numeric value constrains constant value. Default: normal(-6, 2.5) mean -6 corresponds concentration 1e-6 1 Î¼M. hill brms::brmsprior numeric. Prior hill parameter. Default: normal(1, 1) lower bound -0.1. top brms::brmsprior numeric giving prior top parameter. Setting top numeric constrains constant value. bottom brms::brmsprior numeric giving prior bottom parameter. Setting bottom numeric constrains constant value. ... additional brms::brmsprior objects.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Prior an Agonist Sigmoid Model â sigmoid_agonist_prior","text":"brms::brmsprior","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_agonist_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Prior an Agonist Sigmoid Model â sigmoid_agonist_prior","text":"","code":"if (FALSE) { # Consider an activator that has a max response around 50%, EC50 is estimated # to be around 1 nM, and minimum response is known to be 0. priors <- sigmoid_agonist_prior(   ec50 = brms::prior(prior = normal(-9, 0.5), nlpar = \"ec50\"),   top = brms::prior(prior = normal(0.5, 0.2), nlpar = \"top\"),   bottom = 0) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Formula for the Sigmoid Antagonist Model â sigmoid_antagonist_formula","title":"Create a Formula for the Sigmoid Antagonist Model â sigmoid_antagonist_formula","text":"set-antagonist sigmoid dose response model formula define non-linear model multilevel non-linear model ic50, hill, top, , bottom use sigmoid_model()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Formula for the Sigmoid Antagonist Model â sigmoid_antagonist_formula","text":"","code":"sigmoid_antagonist_formula(   treatment_variable = \"log_dose\",   treatment_units = \"Log[Molar]\",   response_variable = \"response\",   response_units = NULL,   predictors = 1,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Formula for the Sigmoid Antagonist Model â sigmoid_antagonist_formula","text":"treatment_variable character variable representing treatment. treatment_units character units treatment. default log base 10 molar concentration. response_variable character variable representing response treatment. response_units character units response. predictors character expression predictors non-linear parameters. .e. perturbations/experimental differences modeled separately? ... additional arguments brms::brmsformula()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Formula for the Sigmoid Antagonist Model â sigmoid_antagonist_formula","text":"bpformula, subclass brms::brmsformula can passed sigmoid_model().","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Formula for the Sigmoid Antagonist Model â sigmoid_antagonist_formula","text":"","code":"if (FALSE) {   # Data has a string column drug_id with drug identifiers   # Fit a separate model for each drug   BayesPharma::sigmoid_antagonist_formula(predictors = 0 + drug_id)    # Data has a string column plate_id with plate identifiers   # Estimate the change in response for each plate relative to a global   # baseline.   BayesPharma::sigmoid_antagonist_formula(predictors = plate_id)    # data has columns drug_id and plate_id   # fit a multilevel model where the drug effect depends on the plate   BayesPharma::sigmoid_antagonist_formula(     predictors = 0 + (drug_id|plate_id)) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Parameter Values for an Antagonist Sigmoid Model â sigmoid_antagonist_init","title":"Initialize Parameter Values for an Antagonist Sigmoid Model â sigmoid_antagonist_init","text":"Creating initial values agonist sigmoid model parameters can passed sigmoid_model() along sigmoid_antagonist_formula() sigmoid_antagonist_prior().","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Parameter Values for an Antagonist Sigmoid Model â sigmoid_antagonist_init","text":"","code":"sigmoid_antagonist_init(ic50 = -6, hill = -1, top = 1, bottom = 0)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Parameter Values for an Antagonist Sigmoid Model â sigmoid_antagonist_init","text":"ic50 numeric numeric returning function units treatment. treatment log_dose, default value -6 corresponds 1e-6 molar = 1 Î¼M hill numeric numeric returning function units response/log_dose top numeric numeric returning function units response bottom numeric numeric returning funciton units response","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Parameter Values for an Antagonist Sigmoid Model â sigmoid_antagonist_init","text":"input [brm][brms::brm](init = ...)","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Parameter Values for an Antagonist Sigmoid Model â sigmoid_antagonist_init","text":"","code":"if (FALSE) { #Consider an inhibitor that has a min response around 50%, IC50 is estimated #to be around 1 nM, maximum response is known to be around 1, init <- BayesPharma::sigmoid_antagonist_init(   ec50 = -9,   bottom = 0.5) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Prior an Antagonist Sigmoid Model â sigmoid_antagonist_prior","title":"Create a Prior an Antagonist Sigmoid Model â sigmoid_antagonist_prior","text":"Creates data.frame priors sigmoid antagonist model function arguments ic50, hill, top, bottom = NULL, default normal distribution priors set. like set parameter constant, enter numeric value function argument. distribution options, reference brms::prior Prior Choice Recommendations","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Prior an Antagonist Sigmoid Model â sigmoid_antagonist_prior","text":"","code":"sigmoid_antagonist_prior(   ic50 = brms::prior(prior = normal(-6, 2.5), nlpar = \"ic50\"),   hill = brms::prior(prior = normal(-1, 1), nlpar = \"hill\", ub = 0.01),   top = brms::prior(prior = normal(1, 0.5), nlpar = \"top\"),   bottom = brms::prior(prior = normal(0, 0.5), nlpar = \"bottom\"),   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Prior an Antagonist Sigmoid Model â sigmoid_antagonist_prior","text":"ic50 brms::brmsprior() numeric. Prior ic50 parameter. (Default: normal(-6, 2.5) mean -6 corresponds concentration 1e-6 1 Î¼M. Setting ic50 numeric value constrains constant value. hill brms::brmsprior() numeric. Prior hill parameter. (Default: normal(-1, 1) upper bounded 0.1). top brmsprior numeric giving prior top parameter. Setting top numeric constrains constant value. bottom brmsprior numeric giving prior bottom parameter. Setting bottom numeric constrains constant value. ... additional brms::brmsprior objects.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Prior an Antagonist Sigmoid Model â sigmoid_antagonist_prior","text":"brms::brmsprior","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_antagonist_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Prior an Antagonist Sigmoid Model â sigmoid_antagonist_prior","text":"","code":"if (FALSE) { # Consider an activator that has a max response around 50%, EC50 is estimated # to be around 1 Î¼M, and minimum response is known to be 0. priors <- sigmoid_antagonist_prior(   ic50 = brms::prior(prior = normal(-6, 0.5), nlpar = \"ic50\"),   top = brms::prior(prior = normal(0.5, 0.5), nlpar = \"top\"),   bottom = 0) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_hill_to_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Hill to Slope Parameters a the Sigmoid Functional Form â sigmoid_hill_to_slope","title":"Convert Hill to Slope Parameters a the Sigmoid Functional Form â sigmoid_hill_to_slope","text":"hill parameter controls slope ac50 (slope) slope also depends top bottom parameters. helper function facilitates computing slope parameters.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_hill_to_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Hill to Slope Parameters a the Sigmoid Functional Form â sigmoid_hill_to_slope","text":"","code":"sigmoid_hill_to_slope(hill, top, bottom)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_hill_to_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Hill to Slope Parameters a the Sigmoid Functional Form â sigmoid_hill_to_slope","text":"hill numeric hill coefficient sigmoid() function. top numeric top parameter sigmoid() function. bottom numeric bottom parameter sigmoid() function.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_hill_to_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Hill to Slope Parameters a the Sigmoid Functional Form â sigmoid_hill_to_slope","text":"numeric slope sigmoid() function ac50.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_hill_to_slope.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Hill to Slope Parameters a the Sigmoid Functional Form â sigmoid_hill_to_slope","text":"prove function correct, consider derivative response sigmoid() function respect log_dose: Evaluating derivative log_dose == ac50 simplifies exponents:","code":"d(response)/d(log_dose) =     hill * log(10) * (top - bottom) * 10 ^ ((ac50 - log_dose) * hill) /     ((10 ^ ((ac50 - log_dose) * hill) + 1) ^ 2) slope = hill * log(10) * (top - bottom) / (1 + 1) ^ 2)         = hill * log(10) * (top - bottom) / 4"},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Bayesian Sigmoid Model â sigmoid_model","title":"Fit a Bayesian Sigmoid Model â sigmoid_model","text":"Fits sigmoid model. functional form default observed data (therefore columns input data data.frame) : log_dose, log10 dose molar concentration : response, unspecified units modeled parameters ac50: dose response reaches half maximal activity hill: hill coefficient controlling slope ac50, convention slope agonist positive top: response  => Inf bottom: response  => -Inf configure model can use following helper functions agonist models sigmoid_agonist_formula(): define response relates treatment parameters ac50->ec50, covariates predict parameters sigmoid_agonist_prior(): define prior model parameters, slope constrained positive sigmoid_agonist_init(): define initial values model parameters match default sigmoid_agonist_prior() following helper functions antagonist model sigmoid_antagonist_formula(): define response relates treatment parameters ac50->ic50, covariates predict parameters sigmoid_antagonist_prior(): define prior model parameters, slope constrained negative sigmoid_antagonist_init(): define initial values model parameters match default sigmoid_antagonist_prior()","code":"<response> ~ sigmoid(ac50, hill, top, bottom, <treatment>) sigmoid = bottom + (top - bottom)/(1 + 10^((ac50 - <treatment>) * hill))"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Bayesian Sigmoid Model â sigmoid_model","text":"","code":"sigmoid_model(   data,   formula = sigmoid_agonist_formula(),   prior = sigmoid_agonist_prior(),   init = sigmoid_agonist_init(),   iter = 8000,   control = list(adapt_delta = 0.99),   stanvar_function = sigmoid_stanvar(),   expose_functions = TRUE,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Bayesian Sigmoid Model â sigmoid_model","text":"data data.frame observed data. must contain columns treatment, response additional predictors specified formula. See sigmoid_agonist_formula() details. formula bpformula formula sigmoid model (see ). prior brmsprior defining distribution model parameters defined formula. (see ). init function initialize brms::brm model parameters (see ) iter numeric iterations model runs. Increasing iter can help model convergence (see brms::brm) control named list arguments control sampler's behavior.  Adding max_treedepth giving greater value 10 can improve model convergence (see brms::brm) stanvar_function stan code model. expose_functions logical. Expose sigmoid function used model. needed e.g. brms::loo_compare() ... additional arguments passed brms::brm()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Bayesian Sigmoid Model â sigmoid_model","text":"bpfit object, wrapper around brms::brmsfit object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Bayesian Sigmoid Model â sigmoid_model","text":"","code":"if (FALSE) {   BayesPharma::sigmoid_model(     data = data,     formula = BayesPharma::sigmoid_antagoinst_formula(predictors = 0 + drug),     prior = BayesPharma::sigmoid_antagonist_prior(),     init = BayesPharma::sigmoid_antagonist_init()) }"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_slope_to_hill.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Slope to Hill Parameters a the Sigmoid Functional Form â sigmoid_slope_to_hill","title":"Convert Slope to Hill Parameters a the Sigmoid Functional Form â sigmoid_slope_to_hill","text":"hill parameter controls slope ac50 (slope) slope also depends top bottom parameters. helper function facilitates computing hill parameters.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_slope_to_hill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Slope to Hill Parameters a the Sigmoid Functional Form â sigmoid_slope_to_hill","text":"","code":"sigmoid_slope_to_hill(slope, top, bottom)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_slope_to_hill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Slope to Hill Parameters a the Sigmoid Functional Form â sigmoid_slope_to_hill","text":"slope numeric slope sigmoid() ac50 top numeric top parameter sigmoid() function. bottom numeric bottom parameter sigmoid() function.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_slope_to_hill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Slope to Hill Parameters a the Sigmoid Functional Form â sigmoid_slope_to_hill","text":"numeric hill coefficient sigmoid() function .","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_slope_to_hill.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Slope to Hill Parameters a the Sigmoid Functional Form â sigmoid_slope_to_hill","text":"prove function correct, re-arrange equation relating slope hill parameters","code":"hill * log(10) * (top - bottom) / 4 = slope   hill = slope * 4 / (log10 * (top - bottom))"},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan Code for the Sigmoid Model. â sigmoid_stanvar","title":"Stan Code for the Sigmoid Model. â sigmoid_stanvar","text":"Stan Code Sigmoid Model.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan Code for the Sigmoid Model. â sigmoid_stanvar","text":"","code":"sigmoid_stanvar()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/sigmoid_stanvar.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stan Code for the Sigmoid Model. â sigmoid_stanvar","text":"stanvar script sigmoid dose response equation.  log dose greater negative infinity (dose greater 0), sigmoid dose response equation used. ac50 half maximal response, hill slope, top maximum response, bottom minimum response. log dose equal negative infinity (dose equal 0), hill positive, bottom value returned. hill negative, top value returned.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Formula for the Total QSSA (tQ) Enzyme Kinetics Model â tQ_formula","title":"Define a Formula for the Total QSSA (tQ) Enzyme Kinetics Model â tQ_formula","text":"set-tQ enzyme kinetics model formula define ordinary differential equation model kcat, kM model parameters use tQ_model.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Formula for the Total QSSA (tQ) Enzyme Kinetics Model â tQ_formula","text":"","code":"tQ_formula(   series_index_variable = \"series_index\",   treatment_variable = \"time\",   treatment_units = \"seconds\",   ET_variable = \"ET\",   ET_units = \"mg/ml\",   ST_variable = \"ST\",   ST_units = \"mg/ml\",   response_variable = \"P\",   response_units = \"mg/ml\",   predictors = 1,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Formula for the Total QSSA (tQ) Enzyme Kinetics Model â tQ_formula","text":"series_index_variable character variable indexing measurements part common time series treatment_variable character variable representing time treatment treatment_units character units treatment variable ET_variable character variable representing total enzyme concentration ET_units character variable representing units enzyme concentration ST_variable character variable representing total substrate concentration ST_units character variable representing units substrate concentration response_variable character variable representing product response_units character units product predictors expression predictors kcat kM parameters ... additional arguments passed brms::brmsformula()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Formula for the Total QSSA (tQ) Enzyme Kinetics Model â tQ_formula","text":"bpformula, subclass brms::brmsformula can passed tQ_model().","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_formula.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Define a Formula for the Total QSSA (tQ) Enzyme Kinetics Model â tQ_formula","text":"Choi, B., Rempala, G.. & Kim, J.K. Beyond Michaelis-Menten equation: Accurate efficient estimation enzyme kinetic parameters. Sci Rep 7, 17018 (2017). https://doi.org/10.1038/s41598-017-17072-z","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_genquant_stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan Code for the tQ Model Generated Quantities â tQ_genquant_stanvar","title":"Stan Code for the tQ Model Generated Quantities â tQ_genquant_stanvar","text":"substrate concentration varied, generally possible fit kcat kM. However, possible fit ratio kcat/kM. Including rstan::stan code generate samples kcat/kM.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_genquant_stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan Code for the tQ Model Generated Quantities â tQ_genquant_stanvar","text":"","code":"tQ_genquant_stanvar()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_genquant_stanvar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stan Code for the tQ Model Generated Quantities â tQ_genquant_stanvar","text":"Choi, B., Rempala, G.. & Kim, J.K. Beyond Michaelis-Menten equation: Accurate efficient estimation enzyme kinetic parameters. Sci Rep 7, 17018 (2017). https://doi.org/10.1038/s41598-017-17072-z","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Parameter Values for the tQ Enzyme Kinetic Model â tQ_init","title":"Initialize Parameter Values for the tQ Enzyme Kinetic Model â tQ_init","text":"Initialize Parameter Values tQ Enzyme Kinetic Model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Parameter Values for the tQ Enzyme Kinetic Model â tQ_init","text":"","code":"tQ_init(kcat = 4, kM = 4)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Parameter Values for the tQ Enzyme Kinetic Model â tQ_init","text":"kcat numeric initial value kcat parameter tQ model kM numeric initial value kM parameter tQ model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Parameter Values for the tQ Enzyme Kinetic Model â tQ_init","text":"input [tQ_model](init = ...) parameter.","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model for the tQ Enzyme Kinetics Model â tQ_model","title":"Model for the tQ Enzyme Kinetics Model â tQ_model","text":"Model tQ Enzyme Kinetics Model","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model for the tQ Enzyme Kinetics Model â tQ_model","text":"","code":"tQ_model(   data,   formula = tQ_formula(),   prior = tQ_prior(),   init = tQ_init(),   iter = 8000,   control = list(adapt_delta = 0.99),   stanvar_function = c(BayesPharma::tQ_stanvar(), BayesPharma::tQ_genquant_stanvar()),   expose_functions = TRUE,   ... )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model for the tQ Enzyme Kinetics Model â tQ_model","text":"data data.frame experimental data. must contain columns time P predictors specified formula. formula brms::brmsformula object. create dose-response brms::brmsformula, use tQ_formula function. prior brms::brmsprior kcat, kM. Use tQ_formula() create priors use . init list lists, numeric value, \"random\" initial values parameters modeled. iter numeric iterations model runs. Increasing iter can help model convergence. control named list parameters control sampler's behavior. Adding max_treedepth giving greater value 10 can improve model convergence. stanvar_function stan code model expose_functions logical. Expose BayesPharma functions model ... additional arguments passed brms::brm().","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model for the tQ Enzyme Kinetics Model â tQ_model","text":"bpfit object, wrapper around brms::brmsfit object.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model for the tQ Enzyme Kinetics Model â tQ_model","text":"Choi, B., Rempala, G.. & Kim, J.K. Beyond Michaelis-Menten equation: Accurate efficient estimation enzyme kinetic parameters. Sci Rep 7, 17018 (2017). https://doi.org/10.1038/s41598-017-17072-z","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model_generate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Data from the Total QSSA (tQ) Model for Enzyme Kinetics â tQ_model_generate","title":"Generate Data from the Total QSSA (tQ) Model for Enzyme Kinetics â tQ_model_generate","text":"Simulate data total QSSA (tQ) model refinement classical Michaelis-Menten enzyme kinetics ordinary differential equation described (Choi, et al., 2017, DOI: 10.1038/s41598-017-17072-z). Consider kinetic rate equation","code":"kf                  --->    kcat           E + S  <---  C --->  E + P                   kb"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model_generate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Data from the Total QSSA (tQ) Model for Enzyme Kinetics â tQ_model_generate","text":"","code":"tQ_model_generate(time, kcat, kM, ET, ST, ...)"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model_generate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Data from the Total QSSA (tQ) Model for Enzyme Kinetics â tQ_model_generate","text":"time numeric vector. Increasing time points kcat numeric value catalytic rate constant kM numeric value Michaelis rate constant ET numeric value total enzyme concentration ST numeric value total substrate concentration ... additional arguments deSolve::ode()","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model_generate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Data from the Total QSSA (tQ) Model for Enzyme Kinetics â tQ_model_generate","text":"run tQ ordinary differential equation forwards starting initial product concentration 0 specified kcat kM parameters specified time steps.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model_generate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Data from the Total QSSA (tQ) Model for Enzyme Kinetics â tQ_model_generate","text":"free enzyme (E) reversibly binds substrate (S) form complex (C) forward backward rate constants kf kb, irreversibly catalyzed product (P), rate constant kcat, releasing enzyme catalyze additional substrate. total enzyme concentration defined ET := E + C. total substrate product concentration defined ST := S + C + P. Michaelis constant defined kM := (kb + kcat) / kf. kcat rate constant determines maximum turn saturating substrate concentrations, Vmax := kcat * ET. rate constants kcat kM can estimated monitoring product accumulation time (enzyme progress curves), varying enzyme substrate concentrations. (Choi, et al, 2017, equation 2, total quasi-steady-state approximation (tQ) differential equation defined (Choi, et al. 2017) prove, tQ model valid K = kb/kf dissociation constant.","code":"Observed data:      M     = number of measurements        # number of measurements      t[M]  = time                          # measured in seconds      Pt[M] = product                       # product produced at time t      ST    = substrate total concentration # specified for each experiment      ET    = enzyme total concentration    # specified for each experiment    Model parameters:     kcat    # catalytic constant (min^-1)     kM      # Michaelis constant ()    ODE formulation:     dPdt = kcat * (              ET + kM + ST - Pt +              -sqrt((ET + kM + ST - Pt)^2 - 2 * ET * (ST - Pt))) / 2    initial condition:      P := 0 K/(2*ST) * (ET+kM+ST) / sqrt((ET+kM+ST+P)^2 - 4*ET(ST-P)) << 1,"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_model_generate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate Data from the Total QSSA (tQ) Model for Enzyme Kinetics â tQ_model_generate","text":"Choi, B., Rempala, G.. & Kim, J.K. Beyond Michaelis-Menten equation: Accurate efficient estimation enzyme kinetic parameters. Sci Rep 7, 17018 (2017). https://doi.org/10.1038/s41598-017-17072-z","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Prior for the tQ Enzyme Kinetics Model â tQ_prior","title":"Create a Prior for the tQ Enzyme Kinetics Model â tQ_prior","text":"kcat kM parameters, default priors gamma(4, 1). use gamma distribution naturally lower bounded 0. first parameter shape, alpha=4, second rate, beta=1. mean gamma distributions alpha/beta variance alpha/beta^2.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Prior for the tQ Enzyme Kinetics Model â tQ_prior","text":"","code":"tQ_prior(   kcat = brms::prior_string(prior = \"gamma(4, 1)\", lb = 0, nlpar = \"kcat\"),   kM = brms::prior_string(prior = \"gamma(4, 1)\", lb = 0, nlpar = \"kM\") )"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Prior for the tQ Enzyme Kinetics Model â tQ_prior","text":"kcat prior kcat parameter. Given numeric value, used constant estimated. kM prior kM parameter. Given numeric value, used constant estimated.","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_stanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan Code for the tQ Enzyme Kinetics Model â tQ_stanvar","title":"Stan Code for the tQ Enzyme Kinetics Model â tQ_stanvar","text":"tQ ordinary differential equation model total quasi-steady-state assumption kinetics defined (Choi et al., 2017), related Michaelis-Menten kinetics model, assume enzyme concentration negligibly small.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_stanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan Code for the tQ Enzyme Kinetics Model â tQ_stanvar","text":"","code":"tQ_stanvar()"},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_stanvar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stan Code for the tQ Enzyme Kinetics Model â tQ_stanvar","text":"implement tQ model Stan, function tQ_ode defined passed tQ_single integrate using stiff backward differentiation formula (BDF) method. fit multiple time series one model, tQ_multiple can used. Note handle fitting time-series different numbers observations, additional series_index argument used. Note observations time-series sequential order supplied data.","code":""},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_stanvar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stan Code for the tQ Enzyme Kinetics Model â tQ_stanvar","text":"Choi, B., Rempala, G.. & Kim, J.K. Beyond Michaelis-Menten equation: Accurate efficient estimation enzyme kinetic parameters. Sci Rep 7, 17018 (2017). https://doi.org/10.1038/s41598-017-17072-z","code":""},{"path":[]},{"path":"https://api.github.com/repos/maomlab/BayesPharma/pages/reference/tQ_stanvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stan Code for the tQ Enzyme Kinetics Model â tQ_stanvar","text":"","code":"if (FALSE) { brms::brm(   data = ...,   formula = brms::brmsformula(     P ~ tQ_multiple(series_index, time, kcat, kM, ET, ST),     kcat + kM ~ 1,     nl = TRUE,     loop = FALSE),   prior = ...,   init =  ...,   stanvars = BayesPharma::tQ_stanvar()) }"}]
