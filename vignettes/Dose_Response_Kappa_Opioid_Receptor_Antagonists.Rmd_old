---
title: "Bayesian Dose Response Modeling and Analysis of Four Kappa Opioid Receptor Antagonists"
author: "Madeline Martin"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Bayesian Dose Response Modeling and Analysis of Four Kappa Opioid Receptor Antagonists}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}

---

```{r set-options}
#| echo=FALSE
options(rmarkdown.html_vignette.check_title = FALSE)

# inspired by https://www.jumpingrivers.com/blog/knitr-default-options-settings-hooks/
knitr::opts_chunk$set(
  cache = TRUE,
  echo = FALSE,
  fig.path = "model_KOR_Antagonists_figures/knitr-",
  fig.retina = 2, # Control using dpi
  fig.width = 6,  # generated images
  fig.height = 5, # generated images
  fig.pos = "t",  # pdf mode
  fig.align = "center",
  dpi = if (knitr::is_latex_output()) 72 else 300, 
  out.width = "100%")
#  dev = "svg",
#  dev.args = list(png = list(type = "cairo-png")),
#  optipng = "-o1 -quiet")

bayesplot::bayesplot_theme_set(
  new = ggplot2::theme_bw())

```

```{r load-packages}
#| echo=FALSE

library(tidymodels)
library(BayesPharma)
library(drc) 
```

# Dose Response Analysis of Four Novel Kappa Opioid Receptor Antagonists

In this case study we are going to reanalyze the dose response of 4
kappa opioid receptor (KOR) antagonists using the `BayesPharma`
package from from a study done by Margolis et al. (2020). Whole cell
electrophysiology in acute rat midbrain slices was used to evaluate
pharmacological properties of four novel KOR antagonists: BTRX-335140,
BTRX-395750, PF-04455242, and JNJ-67953964

In the paper, the dose-response data analysis was done by using the drc package
in R which implements the minimization of negative log likelihood function and 
reduces to least square estimation for a continuous response. The data was 
normalized to % baseline then fit to a 4-parameter log-logistic dose response 
model, setting the top (max response) to 100% and estimating the IC50, its 
variance, and the bottom (min response).

First, we will load the normalized dose-response data and plot it:

```{r load-data}

load("../data/kor_antag.rda")

# The BayesPharma uses columns log_dose and response
kor_antag <- kor_antag |>
  dplyr::mutate(response = normalized_measurement)
kor_antag
```

```{r plot-data}
#| dependson=c("load-data")

ggplot2::ggplot(kor_antag) +
  ggplot2::theme_bw() +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      x = log_dose,
      y = response),
    size = 1.0,
    color = "black") +
  ggplot2::labs(title = "",
       x = "Dose(nM)",
       y = "% of baseline U-69,593 effect", 
       color = "Drug") + 
  ggplot2::facet_wrap(
    facets = dplyr::vars(Drug)) 
```

## Setting the Prior for the Model
For the prior, we are going to use a normal distribution because the response
values are continuous. 
First, We will run the analysis with top (max response) parameter prior set to 
a constant value of 100 because top is normalized to 100 and the default broad
prior for `ic50`, `hill` and `bottom`. A broad prior represent unbiased
uncertainty and provide an opportunity for extreme responses.

Then, we will fit another model with a more informative prior using the 
information from the research paper, and compare the two models. 

The level of informativeness of the prior will affect how much influence the
prior has on the model. Here is more [information on prior choice 
recommendations.](
https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations)

```{r default-prior}

kor_prior <- BayesPharma::sigmoid_antagonist_prior(top = 100)
kor_prior
```

### Initial Values for Parameters
Then, we will set the initial to values close to parameter estimates to help
with model convergence. The initial values are the starting values for the
Monte Carlo Markov Chains of each parameter. The default initial values are:
`ec50 = -9`, `hill = -1`, `top = 100`, and `bottom = 0`.

```{r default-init}
#| warning=FALSE,
#| message=FALSE
kor_init <- BayesPharma::sigmoid_antagonist_init()
```

### Prior Predictive Check
Before running the model, we will verify that the prior distributions
cover a plausible range of values for each parameter. To do this, we want to 
sample only from the prior distributions by adding  *sample_prior = "only"* as 
an argument to the `sigmoid_antagonist_model` function.
We will use the default response distribution of the model 
(*family = gaussian()*).

```{r sample-prior}
#| results='hide',
#| message=FALSE,
#| dependson=c("load-data", "default-prior", "default-init")

kor_sample_prior <- BayesPharma::sigmoid_antagonist_model(
  data = kor_antag,
  prior = kor_prior,
  init = kor_init,
  sample_prior = "only")
```

Plot of the Prior Distributions:
```{r plot-prior-density}
#| dependson=c("sample-prior")

# Plot parameter distributions
kor_sample_prior |>
  BayesPharma::density_distributions_plot()
  
```


We can use this to evaluate the prior distributions for each parameter. The 
prior appears to cover a broad range of response values including extreme 
responses.


## Fitting the Model

To fit the model for each antagonist, we set the *predictors* argument in 
`sigmoid_antagonist_formula` to be *predictors = 0 + Drug*. 

```{r model}
#| results='hide',
#| message=FALSE,
#| dependson=c("load-data", "default-prior", "default-init")
kor_model <- BayesPharma::sigmoid_antagonist_model(
  data = kor_antag,
  formula = BayesPharma::sigmoid_antagonist_formula(0 + Drug), 
  prior = kor_prior,
  init = kor_init)
```

### Results from the Model

```{r model-summary}
#| dependson=c("model")

kor_model
```

## Checking for Convergence 
The model ran without warning messages meaning there were no parameter value 
problems or mcmc conflicts. The bulk and tail ESS indicate high resolution and 
stability. The R-hat for each parameter equals 1.00 and the traceplot shows the 
chains mixed well indicating the chains converged.

```{r model-traceplot}
#| dependson=c("model")

kor_model |> bayesplot::mcmc_trace()
```

## Posterior Predictive Check

We plot a posterior predictive check to check if the data generated from the 
posterior distribution fits the observed data. The observed data is the dark 
blue line and the simulated data are the light blue lines. 

The simulated data fits some antagonist models better than others. The models 
for BTRX-395750 and JNJ fits the structure of the data decently well, the model 
for BTRX-335140 fits well but has a higher level of uncertainty, and the 
simulated data for the PF model is less structured, is an okay fit, and has
the highest level of uncertainty of the 4 drugs.

```{r model-pp-check}
#| dependson=c("model")

BayesPharma::plot_pp_check(
  kor_model,
  plot_type = "dens_overlay_grouped",
  group = 'Drug',
  n = 50)
```

## Visualizing and Analyzing Results

Displayed below is a plot for the prior and posterior distributions of the 
parameters (prior is pink and posterior is teal). this can be useful for 
comparing the density distribution of the prior and posterior.
produced by the model:

```{r model-prior-posterior-densities}
#| dependson=c("model")

BayesPharma::prior_posterior_densities_plot(
  kor_model,
  predictors_col_name = "Drug",
  half_max_label = "ic50")
```

Displayed below is a plot of the posterior distributions for each parameter 
with the confidence intervals and mean. This is a useful visual of the model 
results and to highlight the mode and high density intervals: 

```{r model-posterior-densities}
#| message=FALSE,
#| warning=FALSE,
#| dependson=c("model")

BayesPharma::posterior_densities_plot(
  kor_model, 
  predictors_col_name = "Drug", 
  half_max_label = "ic50")
```

Displayed below is a plot of a sample of 100 sigmoid dose-response curves from 
the posterior distribution (purple) and the median quantile intervals: 

```{r model-posterior-draws}
#| dependson=c("model")

BayesPharma::posterior_draws_plot(model = kor_model)
```


## Improving the Model with a More Informative Prior
Below are the dose-response results discussed in the paper:
BTRX-335140: ic50 = 1.2 +/- 0.9 nM (-8.9 +/- 0.2 M), bottom = 1.3%
BTRX-395750: ic50 = 1.2 +/- 1.3 nM (-8.9 +/- 0.3 M), bottom = 28.0%
JNJ-67953964: ic50 = 3.0 +/- 4.6 nM (-8.5 +/- 0.4 M), bottom = -27%
PF-04455242: ic50 = 6.7 +/- 15.1 nM (-8.2 +/- 0.5 M), bottom = 45%

```{r model-prior2}
kor_prior2 <- BayesPharma::sigmoid_antagonist_prior(
  ec50 = brms::prior(normal(-8.5, 0.5), nlpar = "ec50"),
  hill = brms::prior(normal(-1, 0.5), ub = 0.01, nlpar = "hill"),
  top = 100,
  bottom = brms::prior(normal(10, 15), nlpar = "bottom"))
kor_prior2
```

Sampling the prior:

```{r model2-sample-prior}
#| results='hide',
#| message=FALSE,
#| dependson=c("load-data", "default-init", "model-prior2")

kor_sample_prior <- BayesPharma::sigmoid_antagonist_model(
  kor_antag,
  prior = kor_prior2,
  init = kor_init,
  sample_prior = "only")
```

Plot of the Prior Distributions:
```{r model2-prior-density}
#| dependson=c("model2")

kor_sample_prior |>
  bayesplot::mcmc_dens(
    pars = dplyr::vars(tidyselect::starts_with("b_")))
```

Running the Model:

```{r kor-model2}
#| results='hide',
#| message=FALSE

kor_model2 <- BayesPharma::sigmoid_antagonist_model(
  kor_antag,
  formula = BayesPharma::sigmoid_antagonist_formula(0 + Drug), 
  prior = kor_prior2,
  init = kor_init,
  cores = 2)

kor_model2
```


Checking the Model Convergence:

```{r kor-model2-traceplot}
kor_model2 |> bayesplot::mcmc_trace()
```

Posterior Predictive Check:

```{r}
BayesPharma::plot_pp_check(
  model = kor_model2,
  plot_type = "dens_overlay_grouped", 
  group = 'Drug',
  n = 50)
```

Plot of the Prior and Posterior Distributions:

```{r}
BayesPharma::prior_posterior_densities_plot(
  kor_model2, 
  predictors_col_name = "Drug",
  half_max_label = "ic50")
```

Plot of the Posterior Distributions with the Mean and Confidence Intervals:

```{r, message=FALSE, warning=FALSE}
BayesPharma::posterior_densities_plot(
  kor_model2, 
  predictors_col_name = "Drug",
  half_max_label = "ic50")
```

Sample of Sigmoid Dose-Response Curves from the Posterior Distribution and 
Mean Curve:

```{r}
BayesPharma::posterior_draws_plot(model = kor_model2)
```

## Comparing the Two Models Using LOO-Comparison:

The model with an `elpd_diff` and an `se_diff` of 0 is the preferred model. 
The `kor_model2`, the model with a more informative prior, is the preferred model,
but only by a minute amount.

```{r add-loo, cache=TRUE}
kor_model <- kor_model |>
  brms::add_criterion(criterion = c("loo"), reloo = TRUE)
kor_model2 <- kor_model2 |>
  brms::add_criterion(criterion = c("loo"), reloo = TRUE)

brms::loo_compare(
  kor_model,
  kor_model2)
```


##Analysis Using the drc Package

Here we will analyze the KOR antagonist data using the drc package and compare
it to the results from the BayesPharma analysis. 

We will fix the top to 100 and fit the ic50, hill, and bottom.

\scriptsize
```{r kor-drc-model}
#| dependson=c("kor-data"),
#| echo=TRUE
drc_models <- kor_antag |>
  dplyr::group_by(substance_id) |>
  dplyr::group_nest() |>
  dplyr::mutate(
    model = data |> 
      purrr::map(~drc::drm(
        response ~ log_dose,
        data = .x,
        fct = drc::L.4(fixed = c(NA, NA, 100, NA),
        names = c("hill", "bottom", "top", "ic50")))))

drc_models |>
  dplyr::mutate(summary = purrr::map(model, broom::tidy, conf.int = TRUE)) |>
  tidyr::unnest(summary) |>
  dplyr::arrange(term, substance_id) |>
  dplyr::select(-data, -model, -curve)
```
\normalsize

Displayed below is the comparison of results from `drc` and `BayesPharma` for each parameter of the dose-response curve. Here we see that the Bayesian method provides a distribution curve as evidence and has smaller confidence intervals than most of the standard errors provided by the drc method. 

```{r}
#| dependson = c("kor-drc-model", "kor-model"),
#| fig.width = 9,
#| fig.height = 3,
#| fig.cap="KOR antagonists conditional effects. The blue lines are samples from the BayesPharma kor_model posterior distribution, the orange line is the conditional mean, and the purple line is the conditional mean for the DRC model fit."
drc_model_conditional_effects <- drc_models |>
  dplyr::mutate(
    response = model |> purrr::map(
      predict,
      expand.grid(seq(-11, -6, length.out = 100)))) |>
  tidyr::unnest(response) |>
  dplyr::group_by(substance_id) |>
  dplyr::mutate(
    log_dose = seq(-11, -6, length.out = 100)) |>
  dplyr::ungroup() |>
  dplyr::transmute(
    model_name = "DRC",
    cond__ = substance_id,
    log_dose,
    response)

drc_model_conditional_effects_plot_layers <- list(
  ggplot2::geom_line(
    data = drc_model_conditional_effects,
    mapping = ggplot2::aes(
      x = log_dose,
      y = response),
    color = "purple",
    size = 1.3))

kor_model_conditional_effects <- kor_model |>  
  brms::conditional_effects(
    effects = "log_dose",
    conditions = kor_model |>
      brms::make_conditions(
        vars = "substance_id",
        incl_vars = FALSE),
    spaghetti = TRUE,
    ndraws = 100)

kor_model_conditional_effects_plot <- kor_model_conditional_effects |>
  plot(
    points = TRUE,
    mean = TRUE,
    line_args = list(size = 1.3, colour = "orange"),
    point_args = list(width = 0.02),
    plot = FALSE,
    facet_args = list(nrow = 1, ncol = 4),
    theme = ggplot2::theme_bw()) |>
  purrr::pluck(1)

kor_model_conditional_effects_plot +
  drc_model_conditional_effects_plot_layers +
  ggplot2::scale_x_continuous("log [Dose]") +
  ggplot2::scale_y_continuous("Response")
  
```