% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-util.R
\name{prepare_prior}
\alias{prepare_prior}
\title{Helper Function to Prepare a Prior for a \link{brms} Model}
\usage{
prepare_prior(prior, ...)
}
\arguments{
\item{prior}{\code{\link[brms:set_prior]{brms::brmsprior()}} or \code{numeric}.}

\item{...}{additional arguments to \code{\link[brms:set_prior]{brms::prior_string()}}. If \code{prior} is a
\code{\link[brms:set_prior]{brms::brmsprior()}} then this will check that the slots have the given
values. If prior is \code{numeric}, then these arguments are passed to
\code{\link[brms:set_prior]{brms::prior_string()}}}
}
\value{
\code{\link[brms:set_prior]{brms::brmsprior()}}
}
\description{
This extends \code{\link[brms:set_prior]{brms::prior()}} by
\enumerate{
\item allowing just taking a \code{numeric} value rather than \verb{constant(<value>)}
to specify a constant prior
\item if \link[brms:set_prior]{brms::brmsprior} is given, it checks that it has the specified
arguments
}

This is used in building \link{BayesPharma} models to allow user specified priors
but make sure they are for the right parameters to make sure the model is
well specified.
}
\examples{
\dontrun{
  # user should specify a prior for hill, but they misspell it:
  user_hill_prior <- brms::prior(
    prior = normal(1, 1),
    nlpar = "hilll",
    ub = 0)

  # in a script where we want to validate the user_hill_prior
  hill_prior <- BayesPharma:::prepare_prior(
    prior = user_hill_prior,
    nlpar = "hill")

  # gives an assert error that nlpar is not set correctly
}



}
